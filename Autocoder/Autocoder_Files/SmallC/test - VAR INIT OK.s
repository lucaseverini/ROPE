     ****************************************************************
     ***  test.s
     ***  Generated by Small-C Compiler on 8-Mar-2015 7:51:42 PM
     ****************************************************************
     ****************************************************************

     READ      EQU  001                * Read area
     PUNCH     EQU  101                * Punch area
     PRINT     EQU  201                * Print area
     
     PRCPOS    DCW  000                * char position in print area
     PUCPOS    DCW  000                * char position in punch area
     PUNSIZ    DCW  @080@              * Size of punch area
     PRTSIZ    DCW  @132@              * Size of print area
     EOS       DCW  @'@                * End Of String char
     EOL       DCW  @;@                * End Of Line char

               ORG  87
     X1        DSA  0                  * INDEX REGISTER 1
               ORG  92
     X2        DSA  0                  * INDEX REGISTER 2
               ORG  97
     X3        DSA  0                  * INDEX REGISTER 3
     
     * I need a single digit flag - should I replace this with a DA?
     RF        EQU  340
     
     ****************************************************************  

               ORG  5047               * 5047
     XXXXXX    DCW  @'5'@              * THE POINTER (3 DIGITS) TO THE STRING: 5050
               ORG  5050               * 5050
               DCW  @A@                * THE STRING...
               DCW  @A@
               DCW  @A@
               DCW  @A@
               DCW  @A@
               DCW  @A@
               DCW  @A@
               DCW  @A@
               DCW  @'@

     * SET THE START POSITION OF CODE
               ORG  5500
     START     NOP  

     * SET THE STACK POINTER
               SBR  X2,400

               MCW  X2,X3
               LCA  LRDAAA,5005
               LCA  LSDAAA,5025
               LCA  LTDAAA,5028
               LCA  LUDAAA,5033
               LCA  LVDAAA,5046
               LCA  EOS,5022
               LCA  @F@,5021
               LCA  @E@,5020
               LCA  @D@,5019
               LCA  @C@,5018
               LCA  @B@,5017
               LCA  @A@,5016
               LCA  @9@,5015
               LCA  @8@,5014
               LCA  @7@,5013
               LCA  @6@,5012
               LCA  @5@,5011
               LCA  @4@,5010
               LCA  @3@,5009
               LCA  @2@,5008
               LCA  @1@,5007
               LCA  @0@,5006
               LCA  EOS,5041
               LCA  EOL,5040
               LCA  @D@,5039
               LCA  @%@,5038
               LCA  @:@,5037
               LCA  @C@,5036
               LCA  EOS,5064
               LCA  EOL,5063
               LCA  @S@,5062
               LCA  @%@,5061
               LCA  @:@,5060
               LCA  @C@,5059
               LCA  EOS,5070
               LCA  EOL,5069
               LCA  @D@,5068
               LCA  @%@,5067
               LCA  @:@,5066
               LCA  @X@,5065
               LCA  EOS,5081
               LCA  EOL,5080
               LCA  @D@,5079
               LCA  @%@,5078
               LCA  @:@,5077
               LCA  @B@,5076
               LCA  @ @,5075
               LCA  @D@,5074
               LCA  @%@,5073
               LCA  @:@,5072
               LCA  @A@,5071
               LCA  EOS,5089
               LCA  EOL,5088
               LCA  @.@,5087
               LCA  @E@,5086
               LCA  @N@,5085
               LCA  @O@,5084
               LCA  @D@,5083
               LCA  EOL,5082
               B    LPDAAA
               H    

     * **********************************************************************
     * FunctionDefinition(puts)
     * **********************************************************************
     LUBAAA    SBR  3+X3
               SW   1+X3
               CW   2+X3
               CW   3+X3

     * ***********************
     * BeginBlock (LVBAAA:null)
               MA   LVEAAA,X2
     * WhileStatement ((( *s ) != '\0')) (LWBAAA:LVBAAA) top:LXBAAA bottom:LYBAAA)
     LXBAAA    NOP  
     * NotEqualExpression (( *s ) != '\0')
     * DereferenceExpression ( *s )
     * VariableExpression (s : 15997+X3)
     * Push (15997+X3:3)
               MA   LVEAAA,X2
               LCA  15997+X3,0+X2
     * Pop (X1:3)
               LCA  0+X2,X1
               MA   LYEAAA,X2
     * Push (0+X1:1)
               MA   LZEAAA,X2
               LCA  0+X1,0+X2
     * ConstantExpression ('\0' : EOS)
     * Push (EOS:1)
               MA   LZEAAA,X2
               LCA  EOS,0+X2
               C    0+X2,15999+X2
     * Pop (1)
               MA   LAFAAA,X2
     * Pop (1)
               MA   LAFAAA,X2
     * Push (LBFAAA:5)
               MA   LCFAAA,X2
               LCA  LBFAAA,0+X2
               BE   LWEAAA
               B    LXEAAA
     LWEAAA    MCW  LDFAAA,0+X2
     LXEAAA    NOP  
               MCS  0+X2,0+X2
     * Pop (5)
               MA   LEFAAA,X2
               BCE  LYBAAA,5+X2, 

     * ***********************
     * BeginBlock (LWBAAA:LVBAAA)
     * FunctionCallExpr putchar(( *(s++) ))
     * Push (5)
               MA   LCFAAA,X2
     * DereferenceExpression ( *(s++) )
     * PostIncrement (s++)
     * Push (LYEAAA:3)
               MA   LVEAAA,X2
               LCA  LYEAAA,0+X2
               MA   X3,0+X2
     * Pop (X1:3)
               LCA  0+X2,X1
               MA   LYEAAA,X2
     * Push (0+X1:3)
               MA   LVEAAA,X2
               LCA  0+X1,0+X2
               MA   LZEAAA,0+X1
     * Pop (X1:3)
               LCA  0+X2,X1
               MA   LYEAAA,X2
     * Push (0+X1:1)
               MA   LZEAAA,X2
               LCA  0+X1,0+X2
     * Push (X3:3)
               MA   LVEAAA,X2
               LCA  X3,0+X2
               MCW  X2,X3
               B    LJBAAA
     * Pop (X3:3)
               LCA  0+X2,X3
               MA   LYEAAA,X2
     * Pop (1)
               MA   LAFAAA,X2
     * Pop (5)
               MA   LEFAAA,X2
     LWBAAA    NOP  
               BCE  LVBAAA,RF,R
     * EndBlock (LWBAAA:LVBAAA)
     * ***********************

               B    LXBAAA
     LYBAAA    NOP  
     LVBAAA    NOP  
               MA   LYEAAA,X2
               MCW  @ @,RF
     * EndBlock (LVBAAA:null)
     * ***********************

               LCA  3+X3,X1
               B    0+X1

     * **********************************************************************
     * FunctionDefinition(strlen)
     * **********************************************************************
     LFAAAA    SBR  3+X3
               SW   1+X3
               CW   2+X3
               CW   3+X3

     * ***********************
     * BeginBlock (LGAAAA:null)
               LCA  LFFAAA,8+X3
               MA   LGFAAA,X2
     * WhileStatement (((str[(++len)]) != '\0')) retree.statement.EmptyStatement@515b6c19 top:LHAAAA bottom:LIAAAA)
     LHAAAA    NOP  
     * NotEqualExpression ((str[(++len)]) != '\0')
     * SubScriptEpression (str[(++len)])
     * VariableExpression (str : 15997+X3)
     * Push (15997+X3:3)
               MA   LVEAAA,X2
               LCA  15997+X3,0+X2
     * PreIncrement((++len)
     * Push (LGFAAA:3)
               MA   LVEAAA,X2
               LCA  LGFAAA,0+X2
               MA   X3,0+X2
     * Pop (X1:3)
               LCA  0+X2,X1
               MA   LYEAAA,X2
               A    LBFAAA,0+X1
     * Push (0+X1:5)
               MA   LCFAAA,X2
               LCA  0+X1,0+X2
     * raw index on the stack
     * Push (LBFAAA:5)
               MA   LCFAAA,X2
               LCA  LBFAAA,0+X2
               M    15995+X2,6+X2
               SW   2+X2
               LCA  6+X2,15995+X2
     * Pop (5)
               MA   LEFAAA,X2
     * STACK TOP IS NOW ARRAY INDEX
               B    LJFAAA
               MA   0+X2,15997+X2
     * Pop (3)
               MA   LYEAAA,X2
     * STACK top is location in array now.
     * Pop (X1:3)
               LCA  0+X2,X1
               MA   LYEAAA,X2
     * Push (0+X1:1)
               MA   LZEAAA,X2
               LCA  0+X1,0+X2
     * ConstantExpression ('\0' : EOS)
     * Push (EOS:1)
               MA   LZEAAA,X2
               LCA  EOS,0+X2
               C    0+X2,15999+X2
     * Pop (1)
               MA   LAFAAA,X2
     * Pop (1)
               MA   LAFAAA,X2
     * Push (LBFAAA:5)
               MA   LCFAAA,X2
               LCA  LBFAAA,0+X2
               BE   LHFAAA
               B    LIFAAA
     LHFAAA    MCW  LDFAAA,0+X2
     LIFAAA    NOP  
               MCS  0+X2,0+X2
     * Pop (5)
               MA   LEFAAA,X2
               BCE  LIAAAA,5+X2, 
               B    LHAAAA
     LIAAAA    NOP  
     * VariableExpression (len : 8+X3)
     * Push (8+X3:5)
               MA   LCFAAA,X2
               LCA  8+X3,0+X2
     * Pop (15994+X3:5)
               LCA  0+X2,15994+X3
               MA   LEFAAA,X2
     * set the return flag, so we know do deallocate our stack
               MCW  @R@,RF
     * and branch
               B    LGAAAA
     LGAAAA    NOP  
               MA   LQFAAA,X2
               MCW  @ @,RF
     * EndBlock (LGAAAA:null)
     * ***********************

               LCA  3+X3,X1
               B    0+X1

     * **********************************************************************
     * FunctionDefinition(genRand)
     * **********************************************************************
     LBAAAA    SBR  3+X3
               SW   1+X3
               CW   2+X3
               CW   3+X3

     * ***********************
     * BeginBlock (LCAAAA:null)
               MA   LVEAAA,X2
     * Assignment (seed = (((42 * seed) + 19) % 100000))
     * ModuloExpression (((42 * seed) + 19) % 100000)
     * ConstantExpression (100000 : LRFAAA)
     * Push (LRFAAA:5)
               MA   LCFAAA,X2
               LCA  LRFAAA,0+X2
     * Addition ((42 * seed) + 19)
     * Multiplication (42 * seed)
     * ConstantExpression (42 : LSFAAA)
     * Push (LSFAAA:5)
               MA   LCFAAA,X2
               LCA  LSFAAA,0+X2
     * StaticVariableExpression (seed : 5005)
     * Push (5005:5)
               MA   LCFAAA,X2
               LCA  LRDAAA,0+X2
               M    15995+X2,6+X2
               SW   2+X2
               LCA  6+X2,15995+X2
     * Pop (5)
               MA   LEFAAA,X2
     * ConstantExpression (19 : LTFAAA)
     * Push (LTFAAA:5)
               MA   LCFAAA,X2
               LCA  LTFAAA,0+X2
               A    0+X2,15995+X2
     * Pop (5)
               MA   LEFAAA,X2
               B    LUFAAA
     * Pop (5)
               MA   LEFAAA,X2
     * Push (LAGAAA:3)
               MA   LVEAAA,X2
               LCA  LAGAAA,0+X2
     * Pop (X1:3)
               LCA  0+X2,X1
               MA   LYEAAA,X2
     * Pop (0+X1:5)
               LCA  0+X2,0+X1
               MA   LEFAAA,X2
     * StaticVariableExpression (seed : 5005)
     * Push (5005:5)
               MA   LCFAAA,X2
               LCA  LRDAAA,0+X2
     * Pop (15997+X3:5)
               LCA  0+X2,15997+X3
               MA   LEFAAA,X2
     * set the return flag, so we know do deallocate our stack
               MCW  @R@,RF
     * and branch
               B    LCAAAA
     LCAAAA    NOP  
               MA   LYEAAA,X2
               MCW  @ @,RF
     * EndBlock (LCAAAA:null)
     * ***********************

               LCA  3+X3,X1
               B    0+X1

     * **********************************************************************
     * FunctionDefinition(itoa)
     * **********************************************************************
     LXAAAA    SBR  3+X3
               SW   1+X3
               CW   2+X3
               CW   3+X3

     * ***********************
     * BeginBlock (LYAAAA:null)
               LCA  LBGAAA,9+X3
               LCA  LBFAAA,14+X3
               MA   LCGAAA,X2
     * Assignment (start = str)
     * VariableExpression (str : 15992+X3)
     * Push (15992+X3:3)
               MA   LVEAAA,X2
               LCA  15992+X3,0+X2
     * Push (LDGAAA:3)
               MA   LVEAAA,X2
               LCA  LDGAAA,0+X2
               MA   X3,0+X2
     * Pop (X1:3)
               LCA  0+X2,X1
               MA   LYEAAA,X2
     * Pop (0+X1:3)
               LCA  0+X2,0+X1
               MA   LYEAAA,X2
     * IfStatement if((value < 0) then (LZAAAA:LYAAAA) else if((value == 0) then (LABAAA:LYAAAA)))
     * LessThanExpression (value < 0)
     * VariableExpression (value : 15997+X3)
     * Push (15997+X3:5)
               MA   LCFAAA,X2
               LCA  15997+X3,0+X2
               B    LEGAAA
     * ConstantExpression (0 : LDFAAA)
     * Push (LDFAAA:5)
               MA   LCFAAA,X2
               LCA  LDFAAA,0+X2
               B    LEGAAA
               C    0+X2,15995+X2
     * Pop (5)
               MA   LEFAAA,X2
               MCW  LDFAAA,0+X2
               BL   LGGAAA
               B    LHGAAA
     LGGAAA    MCW  LBFAAA,0+X2
     LHGAAA    NOP  
               MCS  0+X2,0+X2
     * Pop (5)
               MA   LEFAAA,X2
               BCE  LCBAAA,5+X2, 

     * ***********************
     * BeginBlock (LZAAAA:LYAAAA)
     * Assignment (( *(str++) ) = '-')
     * ConstantExpression ('-' : @-@)
     * Push (@-@:1)
               MA   LZEAAA,X2
               LCA  @-@,0+X2
     * PostIncrement (str++)
     * Push (LQFAAA:3)
               MA   LVEAAA,X2
               LCA  LQFAAA,0+X2
               MA   X3,0+X2
     * Pop (X1:3)
               LCA  0+X2,X1
               MA   LYEAAA,X2
     * Push (0+X1:3)
               MA   LVEAAA,X2
               LCA  0+X1,0+X2
               MA   LZEAAA,0+X1
     * Pop (X1:3)
               LCA  0+X2,X1
               MA   LYEAAA,X2
     * Pop (0+X1:1)
               LCA  0+X2,0+X1
               MA   LAFAAA,X2
     * Assignment (value = (-value))
     * NegExpression (-value)
     * VariableExpression (value : 15997+X3)
     * Push (15997+X3:5)
               MA   LCFAAA,X2
               LCA  15997+X3,0+X2
               ZS   0+X2
               B    LEGAAA
     * Push (LYEAAA:3)
               MA   LVEAAA,X2
               LCA  LYEAAA,0+X2
               MA   X3,0+X2
     * Pop (X1:3)
               LCA  0+X2,X1
               MA   LYEAAA,X2
     * Pop (0+X1:5)
               LCA  0+X2,0+X1
               MA   LEFAAA,X2
     LZAAAA    NOP  
               BCE  LYAAAA,RF,R
     * EndBlock (LZAAAA:LYAAAA)
     * ***********************

               B    LDBAAA
     LCBAAA    NOP  
     * IfStatement if((value == 0) then (LABAAA:LYAAAA))
     * EqualExpression (value == 0)
     * VariableExpression (value : 15997+X3)
     * Push (15997+X3:5)
               MA   LCFAAA,X2
               LCA  15997+X3,0+X2
               B    LEGAAA
     * ConstantExpression (0 : LDFAAA)
     * Push (LDFAAA:5)
               MA   LCFAAA,X2
               LCA  LDFAAA,0+X2
               B    LEGAAA
               C    0+X2,15995+X2
     * Pop (5)
               MA   LEFAAA,X2
     * Pop (5)
               MA   LEFAAA,X2
     * Push (LDFAAA:5)
               MA   LCFAAA,X2
               LCA  LDFAAA,0+X2
               BE   LJGAAA
               B    LKGAAA
     LJGAAA    MCW  LBFAAA,0+X2
     LKGAAA    NOP  
               MCS  0+X2,0+X2
     * Pop (5)
               MA   LEFAAA,X2
               BCE  LBBAAA,5+X2, 

     * ***********************
     * BeginBlock (LABAAA:LYAAAA)
     * Assignment ((str[0]) = '0')
     * ConstantExpression ('0' : @0@)
     * Push (@0@:1)
               MA   LZEAAA,X2
               LCA  @0@,0+X2
     * VariableExpression (str : 15992+X3)
     * Push (15992+X3:3)
               MA   LVEAAA,X2
               LCA  15992+X3,0+X2
     * ConstantExpression (0 : LDFAAA)
     * Push (LDFAAA:5)
               MA   LCFAAA,X2
               LCA  LDFAAA,0+X2
     * raw index on the stack
     * Push (LBFAAA:5)
               MA   LCFAAA,X2
               LCA  LBFAAA,0+X2
               M    15995+X2,6+X2
               SW   2+X2
               LCA  6+X2,15995+X2
     * Pop (5)
               MA   LEFAAA,X2
     * STACK TOP IS NOW ARRAY INDEX
               B    LJFAAA
               MA   0+X2,15997+X2
     * Pop (3)
               MA   LYEAAA,X2
     * STACK top is location in array now.
     * Pop (X1:3)
               LCA  0+X2,X1
               MA   LYEAAA,X2
     * Pop (0+X1:1)
               LCA  0+X2,0+X1
               MA   LAFAAA,X2
     * Assignment ((str[1]) = '\0')
     * ConstantExpression ('\0' : EOS)
     * Push (EOS:1)
               MA   LZEAAA,X2
               LCA  EOS,0+X2
     * VariableExpression (str : 15992+X3)
     * Push (15992+X3:3)
               MA   LVEAAA,X2
               LCA  15992+X3,0+X2
     * ConstantExpression (1 : LBFAAA)
     * Push (LBFAAA:5)
               MA   LCFAAA,X2
               LCA  LBFAAA,0+X2
     * raw index on the stack
     * Push (LBFAAA:5)
               MA   LCFAAA,X2
               LCA  LBFAAA,0+X2
               M    15995+X2,6+X2
               SW   2+X2
               LCA  6+X2,15995+X2
     * Pop (5)
               MA   LEFAAA,X2
     * STACK TOP IS NOW ARRAY INDEX
               B    LJFAAA
               MA   0+X2,15997+X2
     * Pop (3)
               MA   LYEAAA,X2
     * STACK top is location in array now.
     * Pop (X1:3)
               LCA  0+X2,X1
               MA   LYEAAA,X2
     * Pop (0+X1:1)
               LCA  0+X2,0+X1
               MA   LAFAAA,X2
     * VariableExpression (start : 6+X3)
     * Push (6+X3:3)
               MA   LVEAAA,X2
               LCA  6+X3,0+X2
     * Pop (15984+X3:3)
               LCA  0+X2,15984+X3
               MA   LYEAAA,X2
     * set the return flag, so we know do deallocate our stack
               MCW  @R@,RF
     * and branch
               B    LABAAA
     LABAAA    NOP  
               BCE  LYAAAA,RF,R
     * EndBlock (LABAAA:LYAAAA)
     * ***********************

     LBBAAA    NOP  
     LDBAAA    NOP  
     * WhileStatement ((exp <= (value / base))) retree.statement.ExpressionStatement@2ad3eec2 top:LEBAAA bottom:LFBAAA)
     LEBAAA    NOP  
     * LessThanOrEqualExpression (exp <= (value / base))
     * VariableExpression (exp : 14+X3)
     * Push (14+X3:5)
               MA   LCFAAA,X2
               LCA  14+X3,0+X2
               B    LEGAAA
     * Divide (value / base)
     * VariableExpression (base : 15989+X3)
     * Push (15989+X3:5)
               MA   LCFAAA,X2
               LCA  15989+X3,0+X2
     * VariableExpression (value : 15997+X3)
     * Push (15997+X3:5)
               MA   LCFAAA,X2
               LCA  15997+X3,0+X2
               B    LUFAAA
               MCW  0+X2,15995+X2
     * Pop (5)
               MA   LEFAAA,X2
               B    LEGAAA
               C    0+X2,15995+X2
     * Pop (5)
               MA   LEFAAA,X2
               MCW  LBFAAA,0+X2
               BH   LLGAAA
               B    LMGAAA
     LLGAAA    MCW  LDFAAA,0+X2
     LMGAAA    NOP  
               MCS  0+X2,0+X2
     * Pop (5)
               MA   LEFAAA,X2
               BCE  LFBAAA,5+X2, 
     * Assignment (exp = (exp * base))
     * Multiplication (exp * base)
     * VariableExpression (exp : 14+X3)
     * Push (14+X3:5)
               MA   LCFAAA,X2
               LCA  14+X3,0+X2
     * VariableExpression (base : 15989+X3)
     * Push (15989+X3:5)
               MA   LCFAAA,X2
               LCA  15989+X3,0+X2
               M    15995+X2,6+X2
               SW   2+X2
               LCA  6+X2,15995+X2
     * Pop (5)
               MA   LEFAAA,X2
     * Push (LCGAAA:3)
               MA   LVEAAA,X2
               LCA  LCGAAA,0+X2
               MA   X3,0+X2
     * Pop (X1:3)
               LCA  0+X2,X1
               MA   LYEAAA,X2
     * Pop (0+X1:5)
               LCA  0+X2,0+X1
               MA   LEFAAA,X2
               B    LEBAAA
     LFBAAA    NOP  
     * WhileStatement (exp) (LGBAAA:LYAAAA) top:LHBAAA bottom:LIBAAA)
     LHBAAA    NOP  
     * VariableExpression (exp : 14+X3)
     * Push (14+X3:5)
               MA   LCFAAA,X2
               LCA  14+X3,0+X2
               MCS  0+X2,0+X2
     * Pop (5)
               MA   LEFAAA,X2
               BCE  LIBAAA,5+X2, 

     * ***********************
     * BeginBlock (LGBAAA:LYAAAA)
     * Assignment (( *(str++) ) = (digits[(value / exp)]))
     * SubScriptEpression (digits[(value / exp)])
     * VariableExpression (digits : 9+X3)
     * Push (9+X3:3)
               MA   LVEAAA,X2
               LCA  9+X3,0+X2
     * Divide (value / exp)
     * VariableExpression (exp : 14+X3)
     * Push (14+X3:5)
               MA   LCFAAA,X2
               LCA  14+X3,0+X2
     * VariableExpression (value : 15997+X3)
     * Push (15997+X3:5)
               MA   LCFAAA,X2
               LCA  15997+X3,0+X2
               B    LUFAAA
               MCW  0+X2,15995+X2
     * Pop (5)
               MA   LEFAAA,X2
     * raw index on the stack
     * Push (LBFAAA:5)
               MA   LCFAAA,X2
               LCA  LBFAAA,0+X2
               M    15995+X2,6+X2
               SW   2+X2
               LCA  6+X2,15995+X2
     * Pop (5)
               MA   LEFAAA,X2
     * STACK TOP IS NOW ARRAY INDEX
               B    LJFAAA
               MA   0+X2,15997+X2
     * Pop (3)
               MA   LYEAAA,X2
     * STACK top is location in array now.
     * Pop (X1:3)
               LCA  0+X2,X1
               MA   LYEAAA,X2
     * Push (0+X1:1)
               MA   LZEAAA,X2
               LCA  0+X1,0+X2
     * PostIncrement (str++)
     * Push (LQFAAA:3)
               MA   LVEAAA,X2
               LCA  LQFAAA,0+X2
               MA   X3,0+X2
     * Pop (X1:3)
               LCA  0+X2,X1
               MA   LYEAAA,X2
     * Push (0+X1:3)
               MA   LVEAAA,X2
               LCA  0+X1,0+X2
               MA   LZEAAA,0+X1
     * Pop (X1:3)
               LCA  0+X2,X1
               MA   LYEAAA,X2
     * Pop (0+X1:1)
               LCA  0+X2,0+X1
               MA   LAFAAA,X2
     * Assignment (value = (value % exp))
     * ModuloExpression (value % exp)
     * VariableExpression (exp : 14+X3)
     * Push (14+X3:5)
               MA   LCFAAA,X2
               LCA  14+X3,0+X2
     * VariableExpression (value : 15997+X3)
     * Push (15997+X3:5)
               MA   LCFAAA,X2
               LCA  15997+X3,0+X2
               B    LUFAAA
     * Pop (5)
               MA   LEFAAA,X2
     * Push (LYEAAA:3)
               MA   LVEAAA,X2
               LCA  LYEAAA,0+X2
               MA   X3,0+X2
     * Pop (X1:3)
               LCA  0+X2,X1
               MA   LYEAAA,X2
     * Pop (0+X1:5)
               LCA  0+X2,0+X1
               MA   LEFAAA,X2
     * Assignment (exp = (exp / base))
     * Divide (exp / base)
     * VariableExpression (base : 15989+X3)
     * Push (15989+X3:5)
               MA   LCFAAA,X2
               LCA  15989+X3,0+X2
     * VariableExpression (exp : 14+X3)
     * Push (14+X3:5)
               MA   LCFAAA,X2
               LCA  14+X3,0+X2
               B    LUFAAA
               MCW  0+X2,15995+X2
     * Pop (5)
               MA   LEFAAA,X2
     * Push (LCGAAA:3)
               MA   LVEAAA,X2
               LCA  LCGAAA,0+X2
               MA   X3,0+X2
     * Pop (X1:3)
               LCA  0+X2,X1
               MA   LYEAAA,X2
     * Pop (0+X1:5)
               LCA  0+X2,0+X1
               MA   LEFAAA,X2
     LGBAAA    NOP  
               BCE  LYAAAA,RF,R
     * EndBlock (LGBAAA:LYAAAA)
     * ***********************

               B    LHBAAA
     LIBAAA    NOP  
     * Assignment (( *str ) = '\0')
     * ConstantExpression ('\0' : EOS)
     * Push (EOS:1)
               MA   LZEAAA,X2
               LCA  EOS,0+X2
     * VariableExpression (str : 15992+X3)
     * Push (15992+X3:3)
               MA   LVEAAA,X2
               LCA  15992+X3,0+X2
     * Pop (X1:3)
               LCA  0+X2,X1
               MA   LYEAAA,X2
     * Pop (0+X1:1)
               LCA  0+X2,0+X1
               MA   LAFAAA,X2
     * VariableExpression (start : 6+X3)
     * Push (6+X3:3)
               MA   LVEAAA,X2
               LCA  6+X3,0+X2
     * Pop (15984+X3:3)
               LCA  0+X2,15984+X3
               MA   LYEAAA,X2
     * set the return flag, so we know do deallocate our stack
               MCW  @R@,RF
     * and branch
               B    LYAAAA
     LYAAAA    NOP  
               MA   LNGAAA,X2
               MCW  @ @,RF
     * EndBlock (LYAAAA:null)
     * ***********************

               LCA  3+X3,X1
               B    0+X1

     * **********************************************************************
     * FunctionDefinition(putchar)
     * **********************************************************************
     LJBAAA    SBR  3+X3
               SW   1+X3
               CW   2+X3
               CW   3+X3

     * ***********************
     * BeginBlock (LKBAAA:null)
               MA   LVEAAA,X2
     * IfStatement if((c != '\n') then (LLBAAA:LKBAAA) else (LMBAAA:LKBAAA))
     * NotEqualExpression (c != '\n')
     * VariableExpression (c : 15997+X3)
     * Push (15997+X3:1)
               MA   LZEAAA,X2
               LCA  15997+X3,0+X2
     * ConstantExpression ('\n' : EOL)
     * Push (EOL:1)
               MA   LZEAAA,X2
               LCA  EOL,0+X2
               C    0+X2,15999+X2
     * Pop (1)
               MA   LAFAAA,X2
     * Pop (1)
               MA   LAFAAA,X2
     * Push (LBFAAA:5)
               MA   LCFAAA,X2
               LCA  LBFAAA,0+X2
               BE   LOGAAA
               B    LPGAAA
     LOGAAA    MCW  LDFAAA,0+X2
     LPGAAA    NOP  
               MCS  0+X2,0+X2
     * Pop (5)
               MA   LEFAAA,X2
               BCE  LQBAAA,5+X2, 

     * ***********************
     * BeginBlock (LLBAAA:LKBAAA)
     * Assignment (( *(__putchar_pos++) ) = c)
     * VariableExpression (c : 15997+X3)
     * Push (15997+X3:1)
               MA   LZEAAA,X2
               LCA  15997+X3,0+X2
     * PostIncrement (__putchar_pos++)
     * Push (LQGAAA:3)
               MA   LVEAAA,X2
               LCA  LQGAAA,0+X2
     * Pop (X1:3)
               LCA  0+X2,X1
               MA   LYEAAA,X2
     * Push (0+X1:3)
               MA   LVEAAA,X2
               LCA  0+X1,0+X2
               MA   LZEAAA,0+X1
     * Pop (X1:3)
               LCA  0+X2,X1
               MA   LYEAAA,X2
     * Pop (0+X1:1)
               LCA  0+X2,0+X1
               MA   LAFAAA,X2
     LLBAAA    NOP  
               BCE  LKBAAA,RF,R
     * EndBlock (LLBAAA:LKBAAA)
     * ***********************

               B    LRBAAA
     LQBAAA    NOP  

     * ***********************
     * BeginBlock (LMBAAA:LKBAAA)
     * WhileStatement ((((int) __putchar_last) >= ((int) __putchar_pos))) (LNBAAA:LMBAAA) top:LOBAAA bottom:LPBAAA)
     LOBAAA    NOP  
     * GreaterThanOrEqualExpression((((int) __putchar_last) >= ((int) __putchar_pos))
     * StaticVariableExpression (__putchar_last : 5028)
     * Push (5028:3)
               MA   LVEAAA,X2
               LCA  LTDAAA,0+X2
               B    LRGAAA
               B    LEGAAA
     * StaticVariableExpression (__putchar_pos : 5025)
     * Push (5025:3)
               MA   LVEAAA,X2
               LCA  LSDAAA,0+X2
               B    LRGAAA
               B    LEGAAA
               C    0+X2,15995+X2
     * Pop (5)
               MA   LEFAAA,X2
               MCW  LBFAAA,0+X2
               BL   LAHAAA
               B    LBHAAA
     LAHAAA    MCW  LDFAAA,0+X2
     LBHAAA    NOP  
               MCS  0+X2,0+X2
     * Pop (5)
               MA   LEFAAA,X2
               BCE  LPBAAA,5+X2, 

     * ***********************
     * BeginBlock (LNBAAA:LMBAAA)
     * Assignment (( *(__putchar_last--) ) = ' ')
     * ConstantExpression (' ' : @ @)
     * Push (@ @:1)
               MA   LZEAAA,X2
               LCA  @ @,0+X2
     * PostDecrement (__putchar_last--)
     * Push (LCHAAA:3)
               MA   LVEAAA,X2
               LCA  LCHAAA,0+X2
     * Pop (X1:3)
               LCA  0+X2,X1
               MA   LYEAAA,X2
     * Push (0+X1:3)
               MA   LVEAAA,X2
               LCA  0+X1,0+X2
               MA   LAFAAA,0+X1
     * Pop (X1:3)
               LCA  0+X2,X1
               MA   LYEAAA,X2
     * Pop (0+X1:1)
               LCA  0+X2,0+X1
               MA   LAFAAA,X2
     LNBAAA    NOP  
               BCE  LMBAAA,RF,R
     * EndBlock (LNBAAA:LMBAAA)
     * ***********************

               B    LOBAAA
     LPBAAA    NOP  
     * Assignment (__putchar_last = __putchar_pos)
     * StaticVariableExpression (__putchar_pos : 5025)
     * Push (5025:3)
               MA   LVEAAA,X2
               LCA  LSDAAA,0+X2
     * Push (LCHAAA:3)
               MA   LVEAAA,X2
               LCA  LCHAAA,0+X2
     * Pop (X1:3)
               LCA  0+X2,X1
               MA   LYEAAA,X2
     * Pop (0+X1:3)
               LCA  0+X2,0+X1
               MA   LYEAAA,X2
     * Assignment (__putchar_pos = 201)
     * ConstantExpression (201 : LSDAAA)
     * Push (LSDAAA:3)
               MA   LVEAAA,X2
               LCA  LSDAAA,0+X2
     * Push (LQGAAA:3)
               MA   LVEAAA,X2
               LCA  LQGAAA,0+X2
     * Pop (X1:3)
               LCA  0+X2,X1
               MA   LYEAAA,X2
     * Pop (0+X1:3)
               LCA  0+X2,0+X1
               MA   LYEAAA,X2
     * Start asm block
               W    
     * End asm block
     LMBAAA    NOP  
               BCE  LKBAAA,RF,R
     * EndBlock (LMBAAA:LKBAAA)
     * ***********************

     LRBAAA    NOP  
     * IfStatement if((__putchar_pos == 333) then (LSBAAA:LKBAAA))
     * EqualExpression (__putchar_pos == 333)
     * StaticVariableExpression (__putchar_pos : 5025)
     * Push (5025:3)
               MA   LVEAAA,X2
               LCA  LSDAAA,0+X2
     * ConstantExpression (333 : LFHAAA)
     * Push (LFHAAA:3)
               MA   LVEAAA,X2
               LCA  LFHAAA,0+X2
               C    0+X2,15997+X2
     * Pop (3)
               MA   LYEAAA,X2
     * Pop (3)
               MA   LYEAAA,X2
     * Push (LDFAAA:5)
               MA   LCFAAA,X2
               LCA  LDFAAA,0+X2
               BE   LDHAAA
               B    LEHAAA
     LDHAAA    MCW  LBFAAA,0+X2
     LEHAAA    NOP  
               MCS  0+X2,0+X2
     * Pop (5)
               MA   LEFAAA,X2
               BCE  LTBAAA,5+X2, 

     * ***********************
     * BeginBlock (LSBAAA:LKBAAA)
     * Assignment (__putchar_last = __putchar_pos)
     * StaticVariableExpression (__putchar_pos : 5025)
     * Push (5025:3)
               MA   LVEAAA,X2
               LCA  LSDAAA,0+X2
     * Push (LCHAAA:3)
               MA   LVEAAA,X2
               LCA  LCHAAA,0+X2
     * Pop (X1:3)
               LCA  0+X2,X1
               MA   LYEAAA,X2
     * Pop (0+X1:3)
               LCA  0+X2,0+X1
               MA   LYEAAA,X2
     * Assignment (__putchar_pos = 201)
     * ConstantExpression (201 : LSDAAA)
     * Push (LSDAAA:3)
               MA   LVEAAA,X2
               LCA  LSDAAA,0+X2
     * Push (LQGAAA:3)
               MA   LVEAAA,X2
               LCA  LQGAAA,0+X2
     * Pop (X1:3)
               LCA  0+X2,X1
               MA   LYEAAA,X2
     * Pop (0+X1:3)
               LCA  0+X2,0+X1
               MA   LYEAAA,X2
     * Start asm block
               W    
     * End asm block
     LSBAAA    NOP  
               BCE  LKBAAA,RF,R
     * EndBlock (LSBAAA:LKBAAA)
     * ***********************

     LTBAAA    NOP  
     LKBAAA    NOP  
               MA   LYEAAA,X2
               MCW  @ @,RF
     * EndBlock (LKBAAA:null)
     * ***********************

               LCA  3+X3,X1
               B    0+X1

     * **********************************************************************
     * FunctionDefinition(strcpy)
     * **********************************************************************
     LJAAAA    SBR  3+X3
               SW   1+X3
               CW   2+X3
               CW   3+X3

     * ***********************
     * BeginBlock (LKAAAA:null)
               MA   LVEAAA,X2
     * WhileStatement (((( *(dest++) ) = ( *(src++) )) != '\0')) retree.statement.EmptyStatement@3f1a2258 top:LLAAAA bottom:LMAAAA)
     LLAAAA    NOP  
     * NotEqualExpression ((( *(dest++) ) = ( *(src++) )) != '\0')
     * Assignment (( *(dest++) ) = ( *(src++) ))
     * DereferenceExpression ( *(src++) )
     * PostIncrement (src++)
     * Push (LIHAAA:3)
               MA   LVEAAA,X2
               LCA  LIHAAA,0+X2
               MA   X3,0+X2
     * Pop (X1:3)
               LCA  0+X2,X1
               MA   LYEAAA,X2
     * Push (0+X1:3)
               MA   LVEAAA,X2
               LCA  0+X1,0+X2
               MA   LZEAAA,0+X1
     * Pop (X1:3)
               LCA  0+X2,X1
               MA   LYEAAA,X2
     * Push (0+X1:1)
               MA   LZEAAA,X2
               LCA  0+X1,0+X2
     * PostIncrement (dest++)
     * Push (LYEAAA:3)
               MA   LVEAAA,X2
               LCA  LYEAAA,0+X2
               MA   X3,0+X2
     * Pop (X1:3)
               LCA  0+X2,X1
               MA   LYEAAA,X2
     * Push (0+X1:3)
               MA   LVEAAA,X2
               LCA  0+X1,0+X2
               MA   LZEAAA,0+X1
     * Pop (X1:3)
               LCA  0+X2,X1
               MA   LYEAAA,X2
               LCA  0+X2,0+X1
     * ConstantExpression ('\0' : EOS)
     * Push (EOS:1)
               MA   LZEAAA,X2
               LCA  EOS,0+X2
               C    0+X2,15999+X2
     * Pop (1)
               MA   LAFAAA,X2
     * Pop (1)
               MA   LAFAAA,X2
     * Push (LBFAAA:5)
               MA   LCFAAA,X2
               LCA  LBFAAA,0+X2
               BE   LGHAAA
               B    LHHAAA
     LGHAAA    MCW  LDFAAA,0+X2
     LHHAAA    NOP  
               MCS  0+X2,0+X2
     * Pop (5)
               MA   LEFAAA,X2
               BCE  LMAAAA,5+X2, 
               B    LLAAAA
     LMAAAA    NOP  
     LKAAAA    NOP  
               MA   LYEAAA,X2
               MCW  @ @,RF
     * EndBlock (LKAAAA:null)
     * ***********************

               LCA  3+X3,X1
               B    0+X1

     * **********************************************************************
     * FunctionDefinition(main)
     * **********************************************************************
     LPDAAA    SBR  3+X3
               SW   1+X3
               CW   2+X3
               CW   3+X3

     * ***********************
     * BeginBlock (LQDAAA:null)
               LCA  LBFAAA,8+X3
               LCA  LBFAAA,13+X3
               MA   LJHAAA,X2
     * FunctionCallExpr printf("c:%s\n", c)
     * Push (5)
               MA   LCFAAA,X2
     * StaticVariableExpression (c : 5049)
     * Push (5049:3)
               MA   LVEAAA,X2
               LCA  LWDAAA,0+X2
     * ArrayNameExpresssion("c:%s\n":char [6])
     * Push (LKHAAA:3)
               MA   LVEAAA,X2
               LCA  LKHAAA,0+X2
     * Push (X3:3)
               MA   LVEAAA,X2
               LCA  X3,0+X2
               MCW  X2,X3
               B    LNCAAA
     * Pop (X3:3)
               LCA  0+X2,X3
               MA   LYEAAA,X2
     * Pop (3)
               MA   LYEAAA,X2
     * Pop (3)
               MA   LYEAAA,X2
     * Pop (5)
               MA   LEFAAA,X2
     * FunctionCallExpr printf("c:%d\n", ((int) c))
     * Push (5)
               MA   LCFAAA,X2
     * StaticVariableExpression (c : 5049)
     * Push (5049:3)
               MA   LVEAAA,X2
               LCA  LWDAAA,0+X2
               B    LRGAAA
     * ArrayNameExpresssion("c:%d\n":char [6])
     * Push (LLHAAA:3)
               MA   LVEAAA,X2
               LCA  LLHAAA,0+X2
     * Push (X3:3)
               MA   LVEAAA,X2
               LCA  X3,0+X2
               MCW  X2,X3
               B    LNCAAA
     * Pop (X3:3)
               LCA  0+X2,X3
               MA   LYEAAA,X2
     * Pop (3)
               MA   LYEAAA,X2
     * Pop (5)
               MA   LEFAAA,X2
     * Pop (5)
               MA   LEFAAA,X2
     * FunctionCallExpr printf("x:%d\n", x)
     * Push (5)
               MA   LCFAAA,X2
     * StaticVariableExpression (x : 5046)
     * Push (5046:5)
               MA   LCFAAA,X2
               LCA  LVDAAA,0+X2
     * ArrayNameExpresssion("x:%d\n":char [6])
     * Push (LMHAAA:3)
               MA   LVEAAA,X2
               LCA  LMHAAA,0+X2
     * Push (X3:3)
               MA   LVEAAA,X2
               LCA  X3,0+X2
               MCW  X2,X3
               B    LNCAAA
     * Pop (X3:3)
               LCA  0+X2,X3
               MA   LYEAAA,X2
     * Pop (3)
               MA   LYEAAA,X2
     * Pop (5)
               MA   LEFAAA,X2
     * Pop (5)
               MA   LEFAAA,X2
     * FunctionCallExpr printf("a:%d b:%d\n", a, b)
     * Push (5)
               MA   LCFAAA,X2
     * VariableExpression (b : 13+X3)
     * Push (13+X3:5)
               MA   LCFAAA,X2
               LCA  13+X3,0+X2
     * VariableExpression (a : 8+X3)
     * Push (8+X3:5)
               MA   LCFAAA,X2
               LCA  8+X3,0+X2
     * ArrayNameExpresssion("a:%d b:%d\n":char [11])
     * Push (LNHAAA:3)
               MA   LVEAAA,X2
               LCA  LNHAAA,0+X2
     * Push (X3:3)
               MA   LVEAAA,X2
               LCA  X3,0+X2
               MCW  X2,X3
               B    LNCAAA
     * Pop (X3:3)
               LCA  0+X2,X3
               MA   LYEAAA,X2
     * Pop (3)
               MA   LYEAAA,X2
     * Pop (5)
               MA   LEFAAA,X2
     * Pop (5)
               MA   LEFAAA,X2
     * Pop (5)
               MA   LEFAAA,X2
     * Assignment (a = 2)
     * ConstantExpression (2 : LOHAAA)
     * Push (LOHAAA:5)
               MA   LCFAAA,X2
               LCA  LOHAAA,0+X2
     * Push (LGFAAA:3)
               MA   LVEAAA,X2
               LCA  LGFAAA,0+X2
               MA   X3,0+X2
     * Pop (X1:3)
               LCA  0+X2,X1
               MA   LYEAAA,X2
     * Pop (0+X1:5)
               LCA  0+X2,0+X1
               MA   LEFAAA,X2
     * FunctionCallExpr printf("a:%d b:%d\n", a, b)
     * Push (5)
               MA   LCFAAA,X2
     * VariableExpression (b : 13+X3)
     * Push (13+X3:5)
               MA   LCFAAA,X2
               LCA  13+X3,0+X2
     * VariableExpression (a : 8+X3)
     * Push (8+X3:5)
               MA   LCFAAA,X2
               LCA  8+X3,0+X2
     * ArrayNameExpresssion("a:%d b:%d\n":char [11])
     * Push (LNHAAA:3)
               MA   LVEAAA,X2
               LCA  LNHAAA,0+X2
     * Push (X3:3)
               MA   LVEAAA,X2
               LCA  X3,0+X2
               MCW  X2,X3
               B    LNCAAA
     * Pop (X3:3)
               LCA  0+X2,X3
               MA   LYEAAA,X2
     * Pop (3)
               MA   LYEAAA,X2
     * Pop (5)
               MA   LEFAAA,X2
     * Pop (5)
               MA   LEFAAA,X2
     * Pop (5)
               MA   LEFAAA,X2
     * Assignment (b = 3)
     * ConstantExpression (3 : LPHAAA)
     * Push (LPHAAA:5)
               MA   LCFAAA,X2
               LCA  LPHAAA,0+X2
     * Push (LJHAAA:3)
               MA   LVEAAA,X2
               LCA  LJHAAA,0+X2
               MA   X3,0+X2
     * Pop (X1:3)
               LCA  0+X2,X1
               MA   LYEAAA,X2
     * Pop (0+X1:5)
               LCA  0+X2,0+X1
               MA   LEFAAA,X2
     * FunctionCallExpr printf("a:%d b:%d\n", a, b)
     * Push (5)
               MA   LCFAAA,X2
     * VariableExpression (b : 13+X3)
     * Push (13+X3:5)
               MA   LCFAAA,X2
               LCA  13+X3,0+X2
     * VariableExpression (a : 8+X3)
     * Push (8+X3:5)
               MA   LCFAAA,X2
               LCA  8+X3,0+X2
     * ArrayNameExpresssion("a:%d b:%d\n":char [11])
     * Push (LNHAAA:3)
               MA   LVEAAA,X2
               LCA  LNHAAA,0+X2
     * Push (X3:3)
               MA   LVEAAA,X2
               LCA  X3,0+X2
               MCW  X2,X3
               B    LNCAAA
     * Pop (X3:3)
               LCA  0+X2,X3
               MA   LYEAAA,X2
     * Pop (3)
               MA   LYEAAA,X2
     * Pop (5)
               MA   LEFAAA,X2
     * Pop (5)
               MA   LEFAAA,X2
     * Pop (5)
               MA   LEFAAA,X2
     * FunctionCallExpr func(a, b)
     * Push (5)
               MA   LCFAAA,X2
     * VariableExpression (b : 13+X3)
     * Push (13+X3:5)
               MA   LCFAAA,X2
               LCA  13+X3,0+X2
     * VariableExpression (a : 8+X3)
     * Push (8+X3:5)
               MA   LCFAAA,X2
               LCA  8+X3,0+X2
     * Push (X3:3)
               MA   LVEAAA,X2
               LCA  X3,0+X2
               MCW  X2,X3
               B    LNDAAA
     * Pop (X3:3)
               LCA  0+X2,X3
               MA   LYEAAA,X2
     * Pop (5)
               MA   LEFAAA,X2
     * Pop (5)
               MA   LEFAAA,X2
     * Pop (5)
               MA   LEFAAA,X2
     * FunctionCallExpr printf("\nDone.\n")
     * Push (5)
               MA   LCFAAA,X2
     * ArrayNameExpresssion("\nDone.\n":char [8])
     * Push (LQHAAA:3)
               MA   LVEAAA,X2
               LCA  LQHAAA,0+X2
     * Push (X3:3)
               MA   LVEAAA,X2
               LCA  X3,0+X2
               MCW  X2,X3
               B    LNCAAA
     * Pop (X3:3)
               LCA  0+X2,X3
               MA   LYEAAA,X2
     * Pop (3)
               MA   LYEAAA,X2
     * Pop (5)
               MA   LEFAAA,X2
     LQDAAA    NOP  
               MA   LRHAAA,X2
               MCW  @ @,RF
     * EndBlock (LQDAAA:null)
     * ***********************

               LCA  3+X3,X1
               B    0+X1

     * **********************************************************************
     * FunctionDefinition(func)
     * **********************************************************************
     LNDAAA    SBR  3+X3
               SW   1+X3
               CW   2+X3
               CW   3+X3

     * ***********************
     * BeginBlock (LODAAA:null)
               MA   LGFAAA,X2
     * Assignment (c = (a2 + b2))
     * Addition (a2 + b2)
     * VariableExpression (a2 : 15997+X3)
     * Push (15997+X3:5)
               MA   LCFAAA,X2
               LCA  15997+X3,0+X2
     * VariableExpression (b2 : 15992+X3)
     * Push (15992+X3:5)
               MA   LCFAAA,X2
               LCA  15992+X3,0+X2
               A    0+X2,15995+X2
     * Pop (5)
               MA   LEFAAA,X2
     * Push (LGFAAA:3)
               MA   LVEAAA,X2
               LCA  LGFAAA,0+X2
               MA   X3,0+X2
     * Pop (X1:3)
               LCA  0+X2,X1
               MA   LYEAAA,X2
     * Pop (0+X1:5)
               LCA  0+X2,0+X1
               MA   LEFAAA,X2
     * FunctionCallExpr printf("c:%d\n", c)
     * Push (5)
               MA   LCFAAA,X2
     * VariableExpression (c : 8+X3)
     * Push (8+X3:5)
               MA   LCFAAA,X2
               LCA  8+X3,0+X2
     * ArrayNameExpresssion("c:%d\n":char [6])
     * Push (LLHAAA:3)
               MA   LVEAAA,X2
               LCA  LLHAAA,0+X2
     * Push (X3:3)
               MA   LVEAAA,X2
               LCA  X3,0+X2
               MCW  X2,X3
               B    LNCAAA
     * Pop (X3:3)
               LCA  0+X2,X3
               MA   LYEAAA,X2
     * Pop (3)
               MA   LYEAAA,X2
     * Pop (5)
               MA   LEFAAA,X2
     * Pop (5)
               MA   LEFAAA,X2
     * ConstantExpression (0 : LDFAAA)
     * Push (LDFAAA:5)
               MA   LCFAAA,X2
               LCA  LDFAAA,0+X2
     * Pop (15987+X3:5)
               LCA  0+X2,15987+X3
               MA   LEFAAA,X2
     * set the return flag, so we know do deallocate our stack
               MCW  @R@,RF
     * and branch
               B    LODAAA
     LODAAA    NOP  
               MA   LQFAAA,X2
               MCW  @ @,RF
     * EndBlock (LODAAA:null)
     * ***********************

               LCA  3+X3,X1
               B    0+X1

     * **********************************************************************
     * FunctionDefinition(printf)
     * **********************************************************************
     LNCAAA    SBR  3+X3
               SW   1+X3
               CW   2+X3
               CW   3+X3

     * ***********************
     * BeginBlock (LOCAAA:null)
               MA   LSHAAA,X2
     * Assignment (arg = ((*char) (( &cformat_str ) + 15997)))
     * Addition (( &cformat_str ) + 15997)
     * AddressOfExpression ( &cformat_str )
     * Push (LYEAAA:3)
               MA   LVEAAA,X2
               LCA  LYEAAA,0+X2
               MA   X3,0+X2
     * ConstantExpression (15997 : LYEAAA)
     * Push (LYEAAA:3)
               MA   LVEAAA,X2
               LCA  LYEAAA,0+X2
               MA   0+X2,15997+X2
     * Pop (3)
               MA   LYEAAA,X2
     * Push (LDGAAA:3)
               MA   LVEAAA,X2
               LCA  LDGAAA,0+X2
               MA   X3,0+X2
     * Pop (X1:3)
               LCA  0+X2,X1
               MA   LYEAAA,X2
     * Pop (0+X1:3)
               LCA  0+X2,0+X1
               MA   LYEAAA,X2
     * WhileStatement (((c = ( *(cformat_str++) )) != '\0')) (LPCAAA:LOCAAA) top:LHDAAA bottom:LIDAAA)
     LHDAAA    NOP  
     * NotEqualExpression ((c = ( *(cformat_str++) )) != '\0')
     * Assignment (c = ( *(cformat_str++) ))
     * DereferenceExpression ( *(cformat_str++) )
     * PostIncrement (cformat_str++)
     * Push (LYEAAA:3)
               MA   LVEAAA,X2
               LCA  LYEAAA,0+X2
               MA   X3,0+X2
     * Pop (X1:3)
               LCA  0+X2,X1
               MA   LYEAAA,X2
     * Push (0+X1:3)
               MA   LVEAAA,X2
               LCA  0+X1,0+X2
               MA   LZEAAA,0+X1
     * Pop (X1:3)
               LCA  0+X2,X1
               MA   LYEAAA,X2
     * Push (0+X1:1)
               MA   LZEAAA,X2
               LCA  0+X1,0+X2
     * Push (LSHAAA:3)
               MA   LVEAAA,X2
               LCA  LSHAAA,0+X2
               MA   X3,0+X2
     * Pop (X1:3)
               LCA  0+X2,X1
               MA   LYEAAA,X2
               LCA  0+X2,0+X1
     * ConstantExpression ('\0' : EOS)
     * Push (EOS:1)
               MA   LZEAAA,X2
               LCA  EOS,0+X2
               C    0+X2,15999+X2
     * Pop (1)
               MA   LAFAAA,X2
     * Pop (1)
               MA   LAFAAA,X2
     * Push (LBFAAA:5)
               MA   LCFAAA,X2
               LCA  LBFAAA,0+X2
               BE   LTHAAA
               B    LUHAAA
     LTHAAA    MCW  LDFAAA,0+X2
     LUHAAA    NOP  
               MCS  0+X2,0+X2
     * Pop (5)
               MA   LEFAAA,X2
               BCE  LIDAAA,5+X2, 

     * ***********************
     * BeginBlock (LPCAAA:LOCAAA)
     * IfStatement if((c != '%') then (LQCAAA:LPCAAA) else (LRCAAA:LPCAAA))
     * NotEqualExpression (c != '%')
     * VariableExpression (c : 7+X3)
     * Push (7+X3:1)
               MA   LZEAAA,X2
               LCA  7+X3,0+X2
     * ConstantExpression ('%' : @%@)
     * Push (@%@:1)
               MA   LZEAAA,X2
               LCA  @%@,0+X2
               C    0+X2,15999+X2
     * Pop (1)
               MA   LAFAAA,X2
     * Pop (1)
               MA   LAFAAA,X2
     * Push (LBFAAA:5)
               MA   LCFAAA,X2
               LCA  LBFAAA,0+X2
               BE   LVHAAA
               B    LWHAAA
     LVHAAA    MCW  LDFAAA,0+X2
     LWHAAA    NOP  
               MCS  0+X2,0+X2
     * Pop (5)
               MA   LEFAAA,X2
               BCE  LFDAAA,5+X2, 

     * ***********************
     * BeginBlock (LQCAAA:LPCAAA)
     * FunctionCallExpr putchar(c)
     * Push (5)
               MA   LCFAAA,X2
     * VariableExpression (c : 7+X3)
     * Push (7+X3:1)
               MA   LZEAAA,X2
               LCA  7+X3,0+X2
     * Push (X3:3)
               MA   LVEAAA,X2
               LCA  X3,0+X2
               MCW  X2,X3
               B    LJBAAA
     * Pop (X3:3)
               LCA  0+X2,X3
               MA   LYEAAA,X2
     * Pop (1)
               MA   LAFAAA,X2
     * Pop (5)
               MA   LEFAAA,X2
     LQCAAA    NOP  
               BCE  LPCAAA,RF,R
     * EndBlock (LQCAAA:LPCAAA)
     * ***********************

               B    LGDAAA
     LFDAAA    NOP  

     * ***********************
     * BeginBlock (LRCAAA:LPCAAA)
     * Assignment (c = ( *(cformat_str++) ))
     * DereferenceExpression ( *(cformat_str++) )
     * PostIncrement (cformat_str++)
     * Push (LYEAAA:3)
               MA   LVEAAA,X2
               LCA  LYEAAA,0+X2
               MA   X3,0+X2
     * Pop (X1:3)
               LCA  0+X2,X1
               MA   LYEAAA,X2
     * Push (0+X1:3)
               MA   LVEAAA,X2
               LCA  0+X1,0+X2
               MA   LZEAAA,0+X1
     * Pop (X1:3)
               LCA  0+X2,X1
               MA   LYEAAA,X2
     * Push (0+X1:1)
               MA   LZEAAA,X2
               LCA  0+X1,0+X2
     * Push (LSHAAA:3)
               MA   LVEAAA,X2
               LCA  LSHAAA,0+X2
               MA   X3,0+X2
     * Pop (X1:3)
               LCA  0+X2,X1
               MA   LYEAAA,X2
     * Pop (0+X1:1)
               LCA  0+X2,0+X1
               MA   LAFAAA,X2
     * IfStatement if((c == '%') then (LSCAAA:LRCAAA) else if((c == 'C') then (LTCAAA:LRCAAA) else if((c == 'S') then (LUCAAA:LRCAAA) else if((c == 'D') then (LVCAAA:LRCAAA) else (LWCAAA:LRCAAA)))))
     * EqualExpression (c == '%')
     * VariableExpression (c : 7+X3)
     * Push (7+X3:1)
               MA   LZEAAA,X2
               LCA  7+X3,0+X2
     * ConstantExpression ('%' : @%@)
     * Push (@%@:1)
               MA   LZEAAA,X2
               LCA  @%@,0+X2
               C    0+X2,15999+X2
     * Pop (1)
               MA   LAFAAA,X2
     * Pop (1)
               MA   LAFAAA,X2
     * Push (LDFAAA:5)
               MA   LCFAAA,X2
               LCA  LDFAAA,0+X2
               BE   LXHAAA
               B    LYHAAA
     LXHAAA    MCW  LBFAAA,0+X2
     LYHAAA    NOP  
               MCS  0+X2,0+X2
     * Pop (5)
               MA   LEFAAA,X2
               BCE  LDDAAA,5+X2, 

     * ***********************
     * BeginBlock (LSCAAA:LRCAAA)
     * FunctionCallExpr putchar('%')
     * Push (5)
               MA   LCFAAA,X2
     * ConstantExpression ('%' : @%@)
     * Push (@%@:1)
               MA   LZEAAA,X2
               LCA  @%@,0+X2
     * Push (X3:3)
               MA   LVEAAA,X2
               LCA  X3,0+X2
               MCW  X2,X3
               B    LJBAAA
     * Pop (X3:3)
               LCA  0+X2,X3
               MA   LYEAAA,X2
     * Pop (1)
               MA   LAFAAA,X2
     * Pop (5)
               MA   LEFAAA,X2
     LSCAAA    NOP  
               BCE  LRCAAA,RF,R
     * EndBlock (LSCAAA:LRCAAA)
     * ***********************

               B    LEDAAA
     LDDAAA    NOP  
     * IfStatement if((c == 'C') then (LTCAAA:LRCAAA) else if((c == 'S') then (LUCAAA:LRCAAA) else if((c == 'D') then (LVCAAA:LRCAAA) else (LWCAAA:LRCAAA))))
     * EqualExpression (c == 'C')
     * VariableExpression (c : 7+X3)
     * Push (7+X3:1)
               MA   LZEAAA,X2
               LCA  7+X3,0+X2
     * ConstantExpression ('C' : @C@)
     * Push (@C@:1)
               MA   LZEAAA,X2
               LCA  @C@,0+X2
               C    0+X2,15999+X2
     * Pop (1)
               MA   LAFAAA,X2
     * Pop (1)
               MA   LAFAAA,X2
     * Push (LDFAAA:5)
               MA   LCFAAA,X2
               LCA  LDFAAA,0+X2
               BE   LZHAAA
               B    LAIAAA
     LZHAAA    MCW  LBFAAA,0+X2
     LAIAAA    NOP  
               MCS  0+X2,0+X2
     * Pop (5)
               MA   LEFAAA,X2
               BCE  LBDAAA,5+X2, 

     * ***********************
     * BeginBlock (LTCAAA:LRCAAA)
     * FunctionCallExpr putchar(( *(arg--) ))
     * Push (5)
               MA   LCFAAA,X2
     * DereferenceExpression ( *(arg--) )
     * PostDecrement (arg--)
     * Push (LDGAAA:3)
               MA   LVEAAA,X2
               LCA  LDGAAA,0+X2
               MA   X3,0+X2
     * Pop (X1:3)
               LCA  0+X2,X1
               MA   LYEAAA,X2
     * Push (0+X1:3)
               MA   LVEAAA,X2
               LCA  0+X1,0+X2
               MA   LAFAAA,0+X1
     * Pop (X1:3)
               LCA  0+X2,X1
               MA   LYEAAA,X2
     * Push (0+X1:1)
               MA   LZEAAA,X2
               LCA  0+X1,0+X2
     * Push (X3:3)
               MA   LVEAAA,X2
               LCA  X3,0+X2
               MCW  X2,X3
               B    LJBAAA
     * Pop (X3:3)
               LCA  0+X2,X3
               MA   LYEAAA,X2
     * Pop (1)
               MA   LAFAAA,X2
     * Pop (5)
               MA   LEFAAA,X2
     LTCAAA    NOP  
               BCE  LRCAAA,RF,R
     * EndBlock (LTCAAA:LRCAAA)
     * ***********************

               B    LCDAAA
     LBDAAA    NOP  
     * IfStatement if((c == 'S') then (LUCAAA:LRCAAA) else if((c == 'D') then (LVCAAA:LRCAAA) else (LWCAAA:LRCAAA)))
     * EqualExpression (c == 'S')
     * VariableExpression (c : 7+X3)
     * Push (7+X3:1)
               MA   LZEAAA,X2
               LCA  7+X3,0+X2
     * ConstantExpression ('S' : @S@)
     * Push (@S@:1)
               MA   LZEAAA,X2
               LCA  @S@,0+X2
               C    0+X2,15999+X2
     * Pop (1)
               MA   LAFAAA,X2
     * Pop (1)
               MA   LAFAAA,X2
     * Push (LDFAAA:5)
               MA   LCFAAA,X2
               LCA  LDFAAA,0+X2
               BE   LBIAAA
               B    LCIAAA
     LBIAAA    MCW  LBFAAA,0+X2
     LCIAAA    NOP  
               MCS  0+X2,0+X2
     * Pop (5)
               MA   LEFAAA,X2
               BCE  LZCAAA,5+X2, 

     * ***********************
     * BeginBlock (LUCAAA:LRCAAA)
     * FunctionCallExpr puts(( *((**char) arg) ))
     * Push (5)
               MA   LCFAAA,X2
     * DereferenceExpression ( *((**char) arg) )
     * VariableExpression (arg : 6+X3)
     * Push (6+X3:3)
               MA   LVEAAA,X2
               LCA  6+X3,0+X2
     * Pop (X1:3)
               LCA  0+X2,X1
               MA   LYEAAA,X2
     * Push (0+X1:3)
               MA   LVEAAA,X2
               LCA  0+X1,0+X2
     * Push (X3:3)
               MA   LVEAAA,X2
               LCA  X3,0+X2
               MCW  X2,X3
               B    LUBAAA
     * Pop (X3:3)
               LCA  0+X2,X3
               MA   LYEAAA,X2
     * Pop (3)
               MA   LYEAAA,X2
     * Pop (5)
               MA   LEFAAA,X2
     * Assignment (arg = (arg + 15997))
     * Addition (arg + 15997)
     * VariableExpression (arg : 6+X3)
     * Push (6+X3:3)
               MA   LVEAAA,X2
               LCA  6+X3,0+X2
     * ConstantExpression (15997 : LYEAAA)
     * Push (LYEAAA:3)
               MA   LVEAAA,X2
               LCA  LYEAAA,0+X2
               MA   0+X2,15997+X2
     * Pop (3)
               MA   LYEAAA,X2
     * Push (LDGAAA:3)
               MA   LVEAAA,X2
               LCA  LDGAAA,0+X2
               MA   X3,0+X2
     * Pop (X1:3)
               LCA  0+X2,X1
               MA   LYEAAA,X2
     * Pop (0+X1:3)
               LCA  0+X2,0+X1
               MA   LYEAAA,X2
     LUCAAA    NOP  
               BCE  LRCAAA,RF,R
     * EndBlock (LUCAAA:LRCAAA)
     * ***********************

               B    LADAAA
     LZCAAA    NOP  
     * IfStatement if((c == 'D') then (LVCAAA:LRCAAA) else (LWCAAA:LRCAAA))
     * EqualExpression (c == 'D')
     * VariableExpression (c : 7+X3)
     * Push (7+X3:1)
               MA   LZEAAA,X2
               LCA  7+X3,0+X2
     * ConstantExpression ('D' : @D@)
     * Push (@D@:1)
               MA   LZEAAA,X2
               LCA  @D@,0+X2
               C    0+X2,15999+X2
     * Pop (1)
               MA   LAFAAA,X2
     * Pop (1)
               MA   LAFAAA,X2
     * Push (LDFAAA:5)
               MA   LCFAAA,X2
               LCA  LDFAAA,0+X2
               BE   LDIAAA
               B    LEIAAA
     LDIAAA    MCW  LBFAAA,0+X2
     LEIAAA    NOP  
               MCS  0+X2,0+X2
     * Pop (5)
               MA   LEFAAA,X2
               BCE  LXCAAA,5+X2, 

     * ***********************
     * BeginBlock (LVCAAA:LRCAAA)
               MA   LSHAAA,X2
     * FunctionCallExpr itoa(( *((*int) arg) ), a, 10)
     * Push (3)
               MA   LVEAAA,X2
     * ConstantExpression (10 : LFIAAA)
     * Push (LFIAAA:5)
               MA   LCFAAA,X2
               LCA  LFIAAA,0+X2
     * ArrayNameExpresssion(a:char [7])
     * Push (LGFAAA:3)
               MA   LVEAAA,X2
               LCA  LGFAAA,0+X2
               MA   X3,0+X2
     * DereferenceExpression ( *((*int) arg) )
     * VariableExpression (arg : 6+X3)
     * Push (6+X3:3)
               MA   LVEAAA,X2
               LCA  6+X3,0+X2
     * Pop (X1:3)
               LCA  0+X2,X1
               MA   LYEAAA,X2
     * Push (0+X1:5)
               MA   LCFAAA,X2
               LCA  0+X1,0+X2
     * Push (X3:3)
               MA   LVEAAA,X2
               LCA  X3,0+X2
               MCW  X2,X3
               B    LXAAAA
     * Pop (X3:3)
               LCA  0+X2,X3
               MA   LYEAAA,X2
     * Pop (5)
               MA   LEFAAA,X2
     * Pop (3)
               MA   LYEAAA,X2
     * Pop (5)
               MA   LEFAAA,X2
     * Pop (3)
               MA   LYEAAA,X2
     * FunctionCallExpr puts(a)
     * Push (5)
               MA   LCFAAA,X2
     * ArrayNameExpresssion(a:char [7])
     * Push (LGFAAA:3)
               MA   LVEAAA,X2
               LCA  LGFAAA,0+X2
               MA   X3,0+X2
     * Push (X3:3)
               MA   LVEAAA,X2
               LCA  X3,0+X2
               MCW  X2,X3
               B    LUBAAA
     * Pop (X3:3)
               LCA  0+X2,X3
               MA   LYEAAA,X2
     * Pop (3)
               MA   LYEAAA,X2
     * Pop (5)
               MA   LEFAAA,X2
     * Assignment (arg = (arg + 15995))
     * Addition (arg + 15995)
     * VariableExpression (arg : 6+X3)
     * Push (6+X3:3)
               MA   LVEAAA,X2
               LCA  6+X3,0+X2
     * ConstantExpression (15995 : LEFAAA)
     * Push (LEFAAA:3)
               MA   LVEAAA,X2
               LCA  LEFAAA,0+X2
               MA   0+X2,15997+X2
     * Pop (3)
               MA   LYEAAA,X2
     * Push (LDGAAA:3)
               MA   LVEAAA,X2
               LCA  LDGAAA,0+X2
               MA   X3,0+X2
     * Pop (X1:3)
               LCA  0+X2,X1
               MA   LYEAAA,X2
     * Pop (0+X1:3)
               LCA  0+X2,0+X1
               MA   LYEAAA,X2
     LVCAAA    NOP  
               MA   LGIAAA,X2
               BCE  LRCAAA,RF,R
     * EndBlock (LVCAAA:LRCAAA)
     * ***********************

               B    LYCAAA
     LXCAAA    NOP  

     * ***********************
     * BeginBlock (LWCAAA:LRCAAA)
     * set the return flag, so we know do deallocate our stack
               MCW  @R@,RF
     * and branch
               B    LWCAAA
     LWCAAA    NOP  
               BCE  LRCAAA,RF,R
     * EndBlock (LWCAAA:LRCAAA)
     * ***********************

     LYCAAA    NOP  
     LADAAA    NOP  
     LCDAAA    NOP  
     LEDAAA    NOP  
     LRCAAA    NOP  
               BCE  LPCAAA,RF,R
     * EndBlock (LRCAAA:LPCAAA)
     * ***********************

     LGDAAA    NOP  
     LPCAAA    NOP  
               BCE  LOCAAA,RF,R
     * EndBlock (LPCAAA:LOCAAA)
     * ***********************

               B    LHDAAA
     LIDAAA    NOP  
     LOCAAA    NOP  
               MA   LGIAAA,X2
               MCW  @ @,RF
     * EndBlock (LOCAAA:null)
     * ***********************

               LCA  3+X3,X1
               B    0+X1
     LEGAAA    SBR  X1
     * Normalizes the zone bits of a number, leaving either A=0B=0
     * for a positive or A=0B=1 for a negative
     * Do nothing on either no zone bits or only a b zone bit
               BWZ  LFGAAA,0+X2,2
               BWZ  LFGAAA,0+X2,K
     * else clear the zone bits, as it is positive
               MZ   @ @,0+X2
     LFGAAA    B    0+X1
    ****************************************************************  
    ** DIVISION SNIPPET                                           **
    ****************************************************************  
     
     LUFAAA    SBR  LVFAAA+3           * SETUP RETURN ADDRESS
     * POP DIVIDEND
               MCW  0+X2, LWFAAA
               SBR  X2, 15995+X2

     * POP DIVISOR
               MCW  0+X2, LXFAAA
               SBR  X2, 15995+X2


               B    *+17
               
               DCW  @00000@                
               DC   @00000000000@        

               ZA   LWFAAA, *-7         * PUT DIVIDEND INTO WORKING BL
               D    LXFAAA, *-19        * DIVIDE
               MZ   *-22, *-21          * KILL THE ZONE BIT
               MZ   *-29, *-34          * KILL THE ZONE BIT
               MCW  *-41, LYFAAA        * PICK UP ANSWER
               SW   *-44                * SO I CAN PICKUP REMAINDER
               MCW  *-46, LZFAAA        * GET REMAINDER
               CW   *-55                * CLEAR THE WM
               MZ   LYFAAA-1, LYFAAA    * CLEANUP QUOTIENT BITZONE
               MZ   LZFAAA-1, LZFAAA    * CLEANUP REMAINDER BITZONE
               
     * PUSH REMAINDER
               SBR  X2, 5+X2
               SW   15996+X2
               MCW  LZFAAA, 0+X2
               
     * PUSH QUOTIENT
               SBR  X2, 5+X2
               SW   15996+X2
               MCW  LYFAAA, 0+X2

     LVFAAA    B    000                 * JUMP BACK
               
     LXFAAA    DCW  00000               * DIVISOR
     LWFAAA    DCW  00000               * DIVIDEND
     LYFAAA    DCW  00000               * QUOTIENT
     LZFAAA    DCW  00000               * REMAINDER
     LJFAAA    SBR  X1
     * Casts a 5-digit number to a 3-digit address
     * make a copy of the top of the stack
               SW   15998+X2
               LCA  0+X2,3+X2
               CW   15998+X2
     * zero out the zone bits of our copy
               MZ   @0@,3+X2
               MZ   @0@,2+X2
               MZ   @0@,1+X2
     * set the low-order digit's zone bits
               C    @04000@,0+X2
               BL   LMFAAA
               C    @08000@,0+X2
               BL   LLFAAA
               C    @12000@,0+X2
               BL   LKFAAA
               S    @12000@,0+X2
               MZ   @A@,3+X2
               B    LMFAAA
     LKFAAA    S    @08000@,0+X2
               MZ   @I@,3+X2
               B    LMFAAA
     LLFAAA    S    @04000@,0+X2
               MZ   @S@,3+X2
     * For some reason the zone bits get set - it still works though.
     LMFAAA    C    @01000@,0+X2
               BL   LPFAAA
               C    @02000@,0+X2
               BL   LOFAAA
               C    @03000@,0+X2
               BL   LNFAAA
               MZ   @A@,1+X2
               B    LPFAAA
     LNFAAA    MZ   @I@,1+X2
               B    LPFAAA
     LOFAAA    MZ   @S@,1+X2
     LPFAAA    LCA  3+X2,15998+X2
               SBR  X2,15998+X2
               B    0+X1
     LRGAAA    SBR  X1
     * Casts a 3-digit address to a 5-digit number
     * Make room on the stack for an int
               MA   @002@,X2
     * make a copy of the top of the stack
               LCA  15998+X2,3+X2
     * Now zero out the top of the stack
               LCA  @00000@,0+X2
     * Now copy back, shifted over 2 digits
               MCW  3+X2,0+X2
     * Now zero out the zone bits on the stack
               MZ   @0@,0+X2
               MZ   @0@,15999+X2
               MZ   @0@,15998+X2
     * check the high-order digit's zone bits
               BWZ  LSGAAA,1+X2,S
               BWZ  LTGAAA,1+X2,K
               BWZ  LUGAAA,1+X2,B
               B    LVGAAA
     LSGAAA    A    @01000@,0+X2
               B    LVGAAA
     LTGAAA    A    @02000@,0+X2
               B    LVGAAA
     LUGAAA    A    @03000@,0+X2
     LVGAAA    BWZ  LWGAAA,3+X2,S
               BWZ  LXGAAA,3+X2,K
               BWZ  LYGAAA,3+X2,B
               B    LZGAAA
     LWGAAA    A    @04000@,0+X2
               B    LZGAAA
     LXGAAA    A    @08000@,0+X2
               B    LZGAAA
     LYGAAA    A    @12000@,0+X2
     LZGAAA    B    0+X1

     LYEAAA    DCW  @I9G@
     LKEAAA    DCW  @2@
     LRDAAA    DCW  @69105@
     LRFAAA    DCW  @100000@
     LBEAAA    DCW  @B@
     LXDAAA    DCW  @F@
     LRHAAA    DCW  @I8G@
     LSEAAA    DCW  @.@
     LQGAAA    DCW  @'2V@
     LTEAAA    DCW  @N@
     LFIAAA    DCW  @00010@
     LDGAAA    DCW  @006@
     LKHAAA    DCW  @'5Z@
     LQFAAA    DCW  @I9B@
     LJHAAA    DCW  @013@
     LGEAAA    DCW  @6@
     LOEAAA    DCW  @:@
     LDFAAA    DCW  @00000@
     LBFAAA    DCW  @00001@
     LLHAAA    DCW  @'3W@
     LJEAAA    DCW  @3@
     LCEAAA    DCW  @A@
     LYDAAA    DCW  @E@
     LNGAAA    DCW  @I8F@
     LVEAAA    DCW  @003@
     LMHAAA    DCW  @'6V@
     LSHAAA    DCW  @007@
     LVDAAA    DCW  @00111@
     LGIAAA    DCW  @I9C@
     LFEAAA    DCW  @7@
     LTFAAA    DCW  @00019@
     LREAAA    DCW  @ @
     LIEAAA    DCW  @4@
     LFFAAA    DCW  @0000J@
     LSFAAA    DCW  @00042@
     LIGAAA    DCW  @-@
     LZDAAA    DCW  @D@
     LAFAAA    DCW  @I9I@
     LUEAAA    DCW  @O@
     LOHAAA    DCW  @00002@
     LBGAAA    DCW  @'0W@
     LNEAAA    DCW  @%@
     LSDAAA    DCW  @201@
     LGFAAA    DCW  @008@
     LMEAAA    DCW  @0@
     LWDAAA    DCW  @'5'@
     LUDAAA    DCW  @081@
     LNHAAA    DCW  @'7/@
     LEEAAA    DCW  @8@
     LIHAAA    DCW  @I9D@
     LPEAAA    DCW  @S@
     LZEAAA    DCW  @001@
     LQEAAA    DCW  @X@
     LHEAAA    DCW  @5@
     LLEAAA    DCW  @1@
     LAEAAA    DCW  @C@
     LPHAAA    DCW  @00003@
     LAGAAA    DCW  @'0V@
     LCFAAA    DCW  @005@
     LCHAAA    DCW  @'2Y@
     LDEAAA    DCW  @9@
     LQHAAA    DCW  @'8S@
     LTDAAA    DCW  @200@
     LCGAAA    DCW  @014@
     LEFAAA    DCW  @I9E@
     LFHAAA    DCW  @333@

               END  START
