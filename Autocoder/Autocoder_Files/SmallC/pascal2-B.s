     ****************************************************************
     ***  pascal2.s
     ***  Generated by Small-C Compiler on 22-Feb-2015 02:03:11
     ****************************************************************

     READ      EQU  001                * Read area
     PUNCH     EQU  101                * Punch area
     PRINT     EQU  201                * Print area
     
     PRCPOS    DCW  000                * char position in print area
     PUCPOS    DCW  000                * char position in punch area
     PUNSIZ    DCW  @080@              * Size of punch area
     PRTSIZ    DCW  @132@              * Size of print area
     EOS       DCW  @'@                * End Of String char
     EOL       DCW  @;@                * End Of Line char

               ORG  87
     X1        DSA  0                  * INDEX REGISTER 1
               ORG  92
     X2        DSA  0                  * INDEX REGISTER 2
               ORG  97
     X3        DSA  0                  * INDEX REGISTER 3
     
     * I need a single digit flag - should I replace this with a DA?
     RF        EQU  340
     
     ****************************************************************  

     * SET THE START POSITION OF CODE
               ORG  5500
     START     NOP  

     * SET THE STACK POINTER
               SBR  X2,400

               MCW  X2,X3
               B    LBCAAA
               H    
     * FunctionDefinition((15))
     LPAAAA    SBR  3+X3
               SW   1+X3
               CW   2+X3
               CW   3+X3
     * BlockStatement(LQAAAA:null:14)
               MA   LCFAAA,X2
     * Assignment(start=str)
     * VariableExpression(str:-8:false)
     * Push(15992+X3:3)
               MA   LDFAAA,X2
               LCA  15992+X3,0+X2
     * Push(LEFAAA:3)
               MA   LDFAAA,X2
               LCA  LEFAAA,0+X2
               MA   X3,0+X2
     * Pop(X1:3)
               LCA  0+X2,X1
               MA   LFFAAA,X2
     * Pop(0+X1:3)
               LCA  0+X2,0+X1
               MA   LFFAAA,X2
     * if(retree.statement.BlockStatement@49134043:retree.statement.IfStatement@ee01430)
     * LessThanExpression(value:0)
     * VariableExpression(value:-3:false)
     * Push(15997+X3:5)
               MA   LIFAAA,X2
               LCA  15997+X3,0+X2
               B    LJFAAA
     * ConstantExpression(0)
     * Push(LLFAAA:5)
               MA   LIFAAA,X2
               LCA  LLFAAA,0+X2
               B    LJFAAA
               C    0+X2,15995+X2
     * Pop(5)
               MA   LOFAAA,X2
               MCW  LLFAAA,0+X2
               BL   LMFAAA
               B    LNFAAA
     LMFAAA    MCW  LBFAAA,0+X2
     LNFAAA    NOP  
               MCS  0+X2,0+X2
     * Pop(5)
               MA   LOFAAA,X2
               BCE  LGFAAA,5+X2, 
     * BlockStatement(LRAAAA:LQAAAA:0)
     * Assignment(( *(str++) )='-')
     * ConstantExpression(45)
     * Push(@-@:1)
               MA   LQFAAA,X2
               LCA  @-@,0+X2
     * PostIncrement(str)
     * Push(LRFAAA:3)
               MA   LDFAAA,X2
               LCA  LRFAAA,0+X2
               MA   X3,0+X2
     * Pop(X1:3)
               LCA  0+X2,X1
               MA   LFFAAA,X2
     * Push(0+X1:3)
               MA   LDFAAA,X2
               LCA  0+X1,0+X2
               MA   LQFAAA,0+X1
     * Pop(X1:3)
               LCA  0+X2,X1
               MA   LFFAAA,X2
     * Pop(0+X1:1)
               LCA  0+X2,0+X1
               MA   LSFAAA,X2
     * Assignment(value=(-value))
     * NegExpression(value)
     * VariableExpression(value:-3:false)
     * Push(15997+X3:5)
               MA   LIFAAA,X2
               LCA  15997+X3,0+X2
               ZS   0+X2
               B    LJFAAA
     * Push(LFFAAA:3)
               MA   LDFAAA,X2
               LCA  LFFAAA,0+X2
               MA   X3,0+X2
     * Pop(X1:3)
               LCA  0+X2,X1
               MA   LFFAAA,X2
     * Pop(0+X1:5)
               LCA  0+X2,0+X1
               MA   LOFAAA,X2
     LRAAAA    NOP  
               BCE  LQAAAA,RF,R
               B    LHFAAA
     LGFAAA    NOP  
     * if(retree.statement.BlockStatement@279ac931:null)
     * EqualExpression(value:0)
     * VariableExpression(value:-3:false)
     * Push(15997+X3:5)
               MA   LIFAAA,X2
               LCA  15997+X3,0+X2
               B    LJFAAA
     * ConstantExpression(0)
     * Push(LLFAAA:5)
               MA   LIFAAA,X2
               LCA  LLFAAA,0+X2
               B    LJFAAA
               C    0+X2,15995+X2
     * Pop(5)
               MA   LOFAAA,X2
     * Pop(5)
               MA   LOFAAA,X2
     * Push(LLFAAA:5)
               MA   LIFAAA,X2
               LCA  LLFAAA,0+X2
               BE   LUFAAA
               B    LVFAAA
     LUFAAA    MCW  LBFAAA,0+X2
     LVFAAA    NOP  
               MCS  0+X2,0+X2
     * Pop(5)
               MA   LOFAAA,X2
               BCE  LTFAAA,5+X2, 
     * BlockStatement(LSAAAA:LQAAAA:0)
     * Assignment((str[0])='0')
     * ConstantExpression(48)
     * Push(@0@:1)
               MA   LQFAAA,X2
               LCA  @0@,0+X2
     * VariableExpression(str:-8:false)
     * Push(15992+X3:3)
               MA   LDFAAA,X2
               LCA  15992+X3,0+X2
     * ConstantExpression(0)
     * Push(LLFAAA:5)
               MA   LIFAAA,X2
               LCA  LLFAAA,0+X2
     * raw index on the stack
     * Push(LBFAAA:5)
               MA   LIFAAA,X2
               LCA  LBFAAA,0+X2
               M    15995+X2,6+X2
               SW   2+X2
               LCA  6+X2,15995+X2
     * Pop(5)
               MA   LOFAAA,X2
     * STACK TOP IS NOW ARRAY INDEX
               B    LXFAAA
               MA   0+X2,15997+X2
     * Pop(3)
               MA   LFFAAA,X2
     * STACK top is location in array now.
     * Pop(X1:3)
               LCA  0+X2,X1
               MA   LFFAAA,X2
     * Pop(0+X1:1)
               LCA  0+X2,0+X1
               MA   LSFAAA,X2
     * Assignment((str[1])='\0')
     * ConstantExpression(0)
     * Push(@'@:1)
               MA   LQFAAA,X2
               LCA  @'@,0+X2
     * VariableExpression(str:-8:false)
     * Push(15992+X3:3)
               MA   LDFAAA,X2
               LCA  15992+X3,0+X2
     * ConstantExpression(1)
     * Push(LBFAAA:5)
               MA   LIFAAA,X2
               LCA  LBFAAA,0+X2
     * raw index on the stack
     * Push(LBFAAA:5)
               MA   LIFAAA,X2
               LCA  LBFAAA,0+X2
               M    15995+X2,6+X2
               SW   2+X2
               LCA  6+X2,15995+X2
     * Pop(5)
               MA   LOFAAA,X2
     * STACK TOP IS NOW ARRAY INDEX
               B    LXFAAA
               MA   0+X2,15997+X2
     * Pop(3)
               MA   LFFAAA,X2
     * STACK top is location in array now.
     * Pop(X1:3)
               LCA  0+X2,X1
               MA   LFFAAA,X2
     * Pop(0+X1:1)
               LCA  0+X2,0+X1
               MA   LSFAAA,X2
     * VariableExpression(start:6:false)
     * Push(6+X3:3)
               MA   LDFAAA,X2
               LCA  6+X3,0+X2
     * Pop(15984+X3:3)
               LCA  0+X2,15984+X3
               MA   LFFAAA,X2
     * set the return flag, so we know do deallocate our stack
               MCW  @R@,RF
     * and branch
               B    LSAAAA
     LSAAAA    NOP  
               BCE  LQAAAA,RF,R
     LTFAAA    NOP  
     LHFAAA    NOP  
     LFGAAA    NOP  
     * LessThanOrEqualExpression(exp:retree.expression.DivideExpression@230ec447)
     * VariableExpression(exp:14:false)
     * Push(14+X3:5)
               MA   LIFAAA,X2
               LCA  14+X3,0+X2
               B    LJFAAA
     * Divide(value/base)
     * VariableExpression(base:-11:false)
     * Push(15989+X3:5)
               MA   LIFAAA,X2
               LCA  15989+X3,0+X2
     * VariableExpression(value:-3:false)
     * Push(15997+X3:5)
               MA   LIFAAA,X2
               LCA  15997+X3,0+X2
               B    LHGAAA
               MCW  0+X2,15995+X2
     * Pop(5)
               MA   LOFAAA,X2
               B    LJFAAA
               C    0+X2,15995+X2
     * Pop(5)
               MA   LOFAAA,X2
               MCW  LBFAAA,0+X2
               BH   LNGAAA
               B    LOGAAA
     LNGAAA    MCW  LLFAAA,0+X2
     LOGAAA    NOP  
               MCS  0+X2,0+X2
     * Pop(5)
               MA   LOFAAA,X2
               BCE  LGGAAA,5+X2, 
     * Assignment(exp=(exp * base))
     * Multiplication(exp*base)
     * VariableExpression(exp:14:false)
     * Push(14+X3:5)
               MA   LIFAAA,X2
               LCA  14+X3,0+X2
     * VariableExpression(base:-11:false)
     * Push(15989+X3:5)
               MA   LIFAAA,X2
               LCA  15989+X3,0+X2
               M    15995+X2,6+X2
               SW   2+X2
               LCA  6+X2,15995+X2
     * Pop(5)
               MA   LOFAAA,X2
     * Push(LCFAAA:3)
               MA   LDFAAA,X2
               LCA  LCFAAA,0+X2
               MA   X3,0+X2
     * Pop(X1:3)
               LCA  0+X2,X1
               MA   LFFAAA,X2
     * Pop(0+X1:5)
               LCA  0+X2,0+X1
               MA   LOFAAA,X2
               B    LFGAAA
     LGGAAA    NOP  
     LPGAAA    NOP  
     * VariableExpression(exp:14:false)
     * Push(14+X3:5)
               MA   LIFAAA,X2
               LCA  14+X3,0+X2
               MCS  0+X2,0+X2
     * Pop(5)
               MA   LOFAAA,X2
               BCE  LQGAAA,5+X2, 
     * BlockStatement(LTAAAA:LQAAAA:0)
     * Assignment(( *(str++) )=(digits[retree.expression.DivideExpression@61556234]))
     * SubScriptEpression(digits:retree.expression.DivideExpression@61556234)
     * VariableExpression(digits:9:false)
     * Push(9+X3:3)
               MA   LDFAAA,X2
               LCA  9+X3,0+X2
     * Divide(value/exp)
     * VariableExpression(exp:14:false)
     * Push(14+X3:5)
               MA   LIFAAA,X2
               LCA  14+X3,0+X2
     * VariableExpression(value:-3:false)
     * Push(15997+X3:5)
               MA   LIFAAA,X2
               LCA  15997+X3,0+X2
               B    LHGAAA
               MCW  0+X2,15995+X2
     * Pop(5)
               MA   LOFAAA,X2
     * raw index on the stack
     * Push(LBFAAA:5)
               MA   LIFAAA,X2
               LCA  LBFAAA,0+X2
               M    15995+X2,6+X2
               SW   2+X2
               LCA  6+X2,15995+X2
     * Pop(5)
               MA   LOFAAA,X2
     * STACK TOP IS NOW ARRAY INDEX
               B    LXFAAA
               MA   0+X2,15997+X2
     * Pop(3)
               MA   LFFAAA,X2
     * STACK top is location in array now.
     * Pop(X1:3)
               LCA  0+X2,X1
               MA   LFFAAA,X2
     * Push(0+X1:1)
               MA   LQFAAA,X2
               LCA  0+X1,0+X2
     * PostIncrement(str)
     * Push(LRFAAA:3)
               MA   LDFAAA,X2
               LCA  LRFAAA,0+X2
               MA   X3,0+X2
     * Pop(X1:3)
               LCA  0+X2,X1
               MA   LFFAAA,X2
     * Push(0+X1:3)
               MA   LDFAAA,X2
               LCA  0+X1,0+X2
               MA   LQFAAA,0+X1
     * Pop(X1:3)
               LCA  0+X2,X1
               MA   LFFAAA,X2
     * Pop(0+X1:1)
               LCA  0+X2,0+X1
               MA   LSFAAA,X2
     * Assignment(value=retree.expression.ModuloExpression@2ca275d8)
     * ModuloExpression(value:exp)
     * VariableExpression(exp:14:false)
     * Push(14+X3:5)
               MA   LIFAAA,X2
               LCA  14+X3,0+X2
     * VariableExpression(value:-3:false)
     * Push(15997+X3:5)
               MA   LIFAAA,X2
               LCA  15997+X3,0+X2
               B    LHGAAA
     * Pop(5)
               MA   LOFAAA,X2
     * Push(LFFAAA:3)
               MA   LDFAAA,X2
               LCA  LFFAAA,0+X2
               MA   X3,0+X2
     * Pop(X1:3)
               LCA  0+X2,X1
               MA   LFFAAA,X2
     * Pop(0+X1:5)
               LCA  0+X2,0+X1
               MA   LOFAAA,X2
     * Assignment(exp=retree.expression.DivideExpression@5de6cecc)
     * Divide(exp/base)
     * VariableExpression(base:-11:false)
     * Push(15989+X3:5)
               MA   LIFAAA,X2
               LCA  15989+X3,0+X2
     * VariableExpression(exp:14:false)
     * Push(14+X3:5)
               MA   LIFAAA,X2
               LCA  14+X3,0+X2
               B    LHGAAA
               MCW  0+X2,15995+X2
     * Pop(5)
               MA   LOFAAA,X2
     * Push(LCFAAA:3)
               MA   LDFAAA,X2
               LCA  LCFAAA,0+X2
               MA   X3,0+X2
     * Pop(X1:3)
               LCA  0+X2,X1
               MA   LFFAAA,X2
     * Pop(0+X1:5)
               LCA  0+X2,0+X1
               MA   LOFAAA,X2
     LTAAAA    NOP  
               BCE  LQAAAA,RF,R
               B    LPGAAA
     LQGAAA    NOP  
     * Assignment(( *str )='\0')
     * ConstantExpression(0)
     * Push(@'@:1)
               MA   LQFAAA,X2
               LCA  @'@,0+X2
     * VariableExpression(str:-8:false)
     * Push(15992+X3:3)
               MA   LDFAAA,X2
               LCA  15992+X3,0+X2
     * Pop(X1:3)
               LCA  0+X2,X1
               MA   LFFAAA,X2
     * Pop(0+X1:1)
               LCA  0+X2,0+X1
               MA   LSFAAA,X2
     * VariableExpression(start:6:false)
     * Push(6+X3:3)
               MA   LDFAAA,X2
               LCA  6+X3,0+X2
     * Pop(15984+X3:3)
               LCA  0+X2,15984+X3
               MA   LFFAAA,X2
     * set the return flag, so we know do deallocate our stack
               MCW  @R@,RF
     * and branch
               B    LQAAAA
     LQAAAA    NOP  
               MA   LRGAAA,X2
               MCW  @ @,RF
               LCA  3+X3,X1
               B    0+X1
     * FunctionDefinition((36))
     LKBAAA    SBR  3+X3
               SW   1+X3
               CW   2+X3
               CW   3+X3
     * BlockStatement(LLBAAA:null:7)
               MA   LSGAAA,X2
     * Assignment(arg=((*char) (( &cformat_str ) + (15997))))
     * Addition(( &cformat_str )+(15997))
     * AddressOfExpression(cformat_str)
     * Push(LFFAAA:3)
               MA   LDFAAA,X2
               LCA  LFFAAA,0+X2
               MA   X3,0+X2
     * ConstantExpression(15997)
     * Push(LFFAAA:3)
               MA   LDFAAA,X2
               LCA  LFFAAA,0+X2
               MA   0+X2,15997+X2
     * Pop(3)
               MA   LFFAAA,X2
     * Push(LEFAAA:3)
               MA   LDFAAA,X2
               LCA  LEFAAA,0+X2
               MA   X3,0+X2
     * Pop(X1:3)
               LCA  0+X2,X1
               MA   LFFAAA,X2
     * Pop(0+X1:3)
               LCA  0+X2,0+X1
               MA   LFFAAA,X2
     LTGAAA    NOP  
     * NotEqualExpression((c = ( *(cformat_str++) )):'\0')
     * Assignment(c=( *(cformat_str++) ))
     * DereferenceExpression((cformat_str++))
     * PostIncrement(cformat_str)
     * Push(LFFAAA:3)
               MA   LDFAAA,X2
               LCA  LFFAAA,0+X2
               MA   X3,0+X2
     * Pop(X1:3)
               LCA  0+X2,X1
               MA   LFFAAA,X2
     * Push(0+X1:3)
               MA   LDFAAA,X2
               LCA  0+X1,0+X2
               MA   LQFAAA,0+X1
     * Pop(X1:3)
               LCA  0+X2,X1
               MA   LFFAAA,X2
     * Push(0+X1:1)
               MA   LQFAAA,X2
               LCA  0+X1,0+X2
     * Push(LSGAAA:3)
               MA   LDFAAA,X2
               LCA  LSGAAA,0+X2
               MA   X3,0+X2
     * Pop(X1:3)
               LCA  0+X2,X1
               MA   LFFAAA,X2
               LCA  0+X2,0+X1
     * ConstantExpression(0)
     * Push(@'@:1)
               MA   LQFAAA,X2
               LCA  @'@,0+X2
               C    0+X2,15999+X2
     * Pop(1)
               MA   LSFAAA,X2
     * Pop(1)
               MA   LSFAAA,X2
     * Push(LBFAAA:5)
               MA   LIFAAA,X2
               LCA  LBFAAA,0+X2
               BE   LVGAAA
               B    LWGAAA
     LVGAAA    MCW  LLFAAA,0+X2
     LWGAAA    NOP  
               MCS  0+X2,0+X2
     * Pop(5)
               MA   LOFAAA,X2
               BCE  LUGAAA,5+X2, 
     * BlockStatement(LMBAAA:LLBAAA:0)
     * if(retree.statement.ExpressionStatement@5c04e904:retree.statement.BlockStatement@465e34ce)
     * NotEqualExpression(c:'%')
     * VariableExpression(c:7:false)
     * Push(7+X3:1)
               MA   LQFAAA,X2
               LCA  7+X3,0+X2
     * ConstantExpression(37)
     * Push(@%@:1)
               MA   LQFAAA,X2
               LCA  @%@,0+X2
               C    0+X2,15999+X2
     * Pop(1)
               MA   LSFAAA,X2
     * Pop(1)
               MA   LSFAAA,X2
     * Push(LBFAAA:5)
               MA   LIFAAA,X2
               LCA  LBFAAA,0+X2
               BE   LZGAAA
               B    LAHAAA
     LZGAAA    MCW  LLFAAA,0+X2
     LAHAAA    NOP  
               MCS  0+X2,0+X2
     * Pop(5)
               MA   LOFAAA,X2
               BCE  LXGAAA,5+X2, 
     * FunctionCallExpr((20))
     * Push(5)
               MA   LIFAAA,X2
     * VariableExpression(c:7:false)
     * Push(7+X3:1)
               MA   LQFAAA,X2
               LCA  7+X3,0+X2
     * Push(X3:3)
               MA   LDFAAA,X2
               LCA  X3,0+X2
               MCW  X2,X3
               B    LUAAAA
     * Pop(X3:3)
               LCA  0+X2,X3
               MA   LFFAAA,X2
     * Pop(1)
               MA   LSFAAA,X2
     * Pop(5)
               MA   LOFAAA,X2
               B    LYGAAA
     LXGAAA    NOP  
     * BlockStatement(LNBAAA:LMBAAA:0)
     * Assignment(c=( *(cformat_str++) ))
     * DereferenceExpression((cformat_str++))
     * PostIncrement(cformat_str)
     * Push(LFFAAA:3)
               MA   LDFAAA,X2
               LCA  LFFAAA,0+X2
               MA   X3,0+X2
     * Pop(X1:3)
               LCA  0+X2,X1
               MA   LFFAAA,X2
     * Push(0+X1:3)
               MA   LDFAAA,X2
               LCA  0+X1,0+X2
               MA   LQFAAA,0+X1
     * Pop(X1:3)
               LCA  0+X2,X1
               MA   LFFAAA,X2
     * Push(0+X1:1)
               MA   LQFAAA,X2
               LCA  0+X1,0+X2
     * Push(LSGAAA:3)
               MA   LDFAAA,X2
               LCA  LSGAAA,0+X2
               MA   X3,0+X2
     * Pop(X1:3)
               LCA  0+X2,X1
               MA   LFFAAA,X2
     * Pop(0+X1:1)
               LCA  0+X2,0+X1
               MA   LSFAAA,X2
     * if(retree.statement.BlockStatement@52dce479:retree.statement.IfStatement@241bee6f)
     * EqualExpression(c:'%')
     * VariableExpression(c:7:false)
     * Push(7+X3:1)
               MA   LQFAAA,X2
               LCA  7+X3,0+X2
     * ConstantExpression(37)
     * Push(@%@:1)
               MA   LQFAAA,X2
               LCA  @%@,0+X2
               C    0+X2,15999+X2
     * Pop(1)
               MA   LSFAAA,X2
     * Pop(1)
               MA   LSFAAA,X2
     * Push(LLFAAA:5)
               MA   LIFAAA,X2
               LCA  LLFAAA,0+X2
               BE   LEHAAA
               B    LFHAAA
     LEHAAA    MCW  LBFAAA,0+X2
     LFHAAA    NOP  
               MCS  0+X2,0+X2
     * Pop(5)
               MA   LOFAAA,X2
               BCE  LCHAAA,5+X2, 
     * BlockStatement(LOBAAA:LNBAAA:0)
     * FunctionCallExpr((20))
     * Push(5)
               MA   LIFAAA,X2
     * ConstantExpression(37)
     * Push(@%@:1)
               MA   LQFAAA,X2
               LCA  @%@,0+X2
     * Push(X3:3)
               MA   LDFAAA,X2
               LCA  X3,0+X2
               MCW  X2,X3
               B    LUAAAA
     * Pop(X3:3)
               LCA  0+X2,X3
               MA   LFFAAA,X2
     * Pop(1)
               MA   LSFAAA,X2
     * Pop(5)
               MA   LOFAAA,X2
     LOBAAA    NOP  
               BCE  LNBAAA,RF,R
               B    LDHAAA
     LCHAAA    NOP  
     * if(retree.statement.BlockStatement@25c2cbee:retree.statement.IfStatement@17da89a0)
     * EqualExpression(c:'C')
     * VariableExpression(c:7:false)
     * Push(7+X3:1)
               MA   LQFAAA,X2
               LCA  7+X3,0+X2
     * ConstantExpression(67)
     * Push(@C@:1)
               MA   LQFAAA,X2
               LCA  @C@,0+X2
               C    0+X2,15999+X2
     * Pop(1)
               MA   LSFAAA,X2
     * Pop(1)
               MA   LSFAAA,X2
     * Push(LLFAAA:5)
               MA   LIFAAA,X2
               LCA  LLFAAA,0+X2
               BE   LIHAAA
               B    LJHAAA
     LIHAAA    MCW  LBFAAA,0+X2
     LJHAAA    NOP  
               MCS  0+X2,0+X2
     * Pop(5)
               MA   LOFAAA,X2
               BCE  LGHAAA,5+X2, 
     * BlockStatement(LPBAAA:LNBAAA:0)
     * FunctionCallExpr((20))
     * Push(5)
               MA   LIFAAA,X2
     * DereferenceExpression((arg--))
     * PostDecrement(arg)
     * Push(LEFAAA:3)
               MA   LDFAAA,X2
               LCA  LEFAAA,0+X2
               MA   X3,0+X2
     * Pop(X1:3)
               LCA  0+X2,X1
               MA   LFFAAA,X2
     * Push(0+X1:3)
               MA   LDFAAA,X2
               LCA  0+X1,0+X2
               MA   LSFAAA,0+X1
     * Pop(X1:3)
               LCA  0+X2,X1
               MA   LFFAAA,X2
     * Push(0+X1:1)
               MA   LQFAAA,X2
               LCA  0+X1,0+X2
     * Push(X3:3)
               MA   LDFAAA,X2
               LCA  X3,0+X2
               MCW  X2,X3
               B    LUAAAA
     * Pop(X3:3)
               LCA  0+X2,X3
               MA   LFFAAA,X2
     * Pop(1)
               MA   LSFAAA,X2
     * Pop(5)
               MA   LOFAAA,X2
     LPBAAA    NOP  
               BCE  LNBAAA,RF,R
               B    LHHAAA
     LGHAAA    NOP  
     * if(retree.statement.BlockStatement@c81739c:retree.statement.IfStatement@6cd0d2e)
     * EqualExpression(c:'S')
     * VariableExpression(c:7:false)
     * Push(7+X3:1)
               MA   LQFAAA,X2
               LCA  7+X3,0+X2
     * ConstantExpression(83)
     * Push(@S@:1)
               MA   LQFAAA,X2
               LCA  @S@,0+X2
               C    0+X2,15999+X2
     * Pop(1)
               MA   LSFAAA,X2
     * Pop(1)
               MA   LSFAAA,X2
     * Push(LLFAAA:5)
               MA   LIFAAA,X2
               LCA  LLFAAA,0+X2
               BE   LNHAAA
               B    LOHAAA
     LNHAAA    MCW  LBFAAA,0+X2
     LOHAAA    NOP  
               MCS  0+X2,0+X2
     * Pop(5)
               MA   LOFAAA,X2
               BCE  LLHAAA,5+X2, 
     * BlockStatement(LQBAAA:LNBAAA:0)
     * FunctionCallExpr((26))
     * Push(5)
               MA   LIFAAA,X2
     * DereferenceExpression(((**char) arg))
     * VariableExpression(arg:6:false)
     * Push(6+X3:3)
               MA   LDFAAA,X2
               LCA  6+X3,0+X2
     * Pop(X1:3)
               LCA  0+X2,X1
               MA   LFFAAA,X2
     * Push(0+X1:3)
               MA   LDFAAA,X2
               LCA  0+X1,0+X2
     * Push(X3:3)
               MA   LDFAAA,X2
               LCA  X3,0+X2
               MCW  X2,X3
               B    LABAAA
     * Pop(X3:3)
               LCA  0+X2,X3
               MA   LFFAAA,X2
     * Pop(3)
               MA   LFFAAA,X2
     * Pop(5)
               MA   LOFAAA,X2
     * Assignment(arg=(arg + (15997)))
     * Addition(arg+(15997))
     * VariableExpression(arg:6:false)
     * Push(6+X3:3)
               MA   LDFAAA,X2
               LCA  6+X3,0+X2
     * ConstantExpression(15997)
     * Push(LFFAAA:3)
               MA   LDFAAA,X2
               LCA  LFFAAA,0+X2
               MA   0+X2,15997+X2
     * Pop(3)
               MA   LFFAAA,X2
     * Push(LEFAAA:3)
               MA   LDFAAA,X2
               LCA  LEFAAA,0+X2
               MA   X3,0+X2
     * Pop(X1:3)
               LCA  0+X2,X1
               MA   LFFAAA,X2
     * Pop(0+X1:3)
               LCA  0+X2,0+X1
               MA   LFFAAA,X2
     LQBAAA    NOP  
               BCE  LNBAAA,RF,R
               B    LMHAAA
     LLHAAA    NOP  
     * if(retree.statement.BlockStatement@415ed7e7:retree.statement.ReturnStatement@39b0a038)
     * EqualExpression(c:'D')
     * VariableExpression(c:7:false)
     * Push(7+X3:1)
               MA   LQFAAA,X2
               LCA  7+X3,0+X2
     * ConstantExpression(68)
     * Push(@D@:1)
               MA   LQFAAA,X2
               LCA  @D@,0+X2
               C    0+X2,15999+X2
     * Pop(1)
               MA   LSFAAA,X2
     * Pop(1)
               MA   LSFAAA,X2
     * Push(LLFAAA:5)
               MA   LIFAAA,X2
               LCA  LLFAAA,0+X2
               BE   LSHAAA
               B    LTHAAA
     LSHAAA    MCW  LBFAAA,0+X2
     LTHAAA    NOP  
               MCS  0+X2,0+X2
     * Pop(5)
               MA   LOFAAA,X2
               BCE  LQHAAA,5+X2, 
     * BlockStatement(LRBAAA:LNBAAA:7)
               MA   LSGAAA,X2
     * FunctionCallExpr((15))
     * Push(3)
               MA   LDFAAA,X2
     * ConstantExpression(10)
     * Push(LVHAAA:5)
               MA   LIFAAA,X2
               LCA  LVHAAA,0+X2
     * ArrayNameExpresssion(a:char [7])
     * Push(LWHAAA:3)
               MA   LDFAAA,X2
               LCA  LWHAAA,0+X2
               MA   X3,0+X2
     * DereferenceExpression(((*int) arg))
     * VariableExpression(arg:6:false)
     * Push(6+X3:3)
               MA   LDFAAA,X2
               LCA  6+X3,0+X2
     * Pop(X1:3)
               LCA  0+X2,X1
               MA   LFFAAA,X2
     * Push(0+X1:5)
               MA   LIFAAA,X2
               LCA  0+X1,0+X2
     * Push(X3:3)
               MA   LDFAAA,X2
               LCA  X3,0+X2
               MCW  X2,X3
               B    LPAAAA
     * Pop(X3:3)
               LCA  0+X2,X3
               MA   LFFAAA,X2
     * Pop(5)
               MA   LOFAAA,X2
     * Pop(3)
               MA   LFFAAA,X2
     * Pop(5)
               MA   LOFAAA,X2
     * Pop(3)
               MA   LFFAAA,X2
     * FunctionCallExpr((26))
     * Push(5)
               MA   LIFAAA,X2
     * ArrayNameExpresssion(a:char [7])
     * Push(LWHAAA:3)
               MA   LDFAAA,X2
               LCA  LWHAAA,0+X2
               MA   X3,0+X2
     * Push(X3:3)
               MA   LDFAAA,X2
               LCA  X3,0+X2
               MCW  X2,X3
               B    LABAAA
     * Pop(X3:3)
               LCA  0+X2,X3
               MA   LFFAAA,X2
     * Pop(3)
               MA   LFFAAA,X2
     * Pop(5)
               MA   LOFAAA,X2
     * Assignment(arg=(arg + (15995)))
     * Addition(arg+(15995))
     * VariableExpression(arg:6:false)
     * Push(6+X3:3)
               MA   LDFAAA,X2
               LCA  6+X3,0+X2
     * ConstantExpression(15995)
     * Push(LOFAAA:3)
               MA   LDFAAA,X2
               LCA  LOFAAA,0+X2
               MA   0+X2,15997+X2
     * Pop(3)
               MA   LFFAAA,X2
     * Push(LEFAAA:3)
               MA   LDFAAA,X2
               LCA  LEFAAA,0+X2
               MA   X3,0+X2
     * Pop(X1:3)
               LCA  0+X2,X1
               MA   LFFAAA,X2
     * Pop(0+X1:3)
               LCA  0+X2,0+X1
               MA   LFFAAA,X2
     LRBAAA    NOP  
               MA   LXHAAA,X2
               BCE  LNBAAA,RF,R
               B    LRHAAA
     LQHAAA    NOP  
     * set the return flag, so we know do deallocate our stack
               MCW  @R@,RF
     * and branch
               B    LNBAAA
     LRHAAA    NOP  
     LMHAAA    NOP  
     LHHAAA    NOP  
     LDHAAA    NOP  
     LNBAAA    NOP  
               BCE  LMBAAA,RF,R
     LYGAAA    NOP  
     LMBAAA    NOP  
               BCE  LLBAAA,RF,R
               B    LTGAAA
     LUGAAA    NOP  
     LLBAAA    NOP  
               MA   LXHAAA,X2
               MCW  @ @,RF
               LCA  3+X3,X1
               B    0+X1
     * FunctionDefinition((7))
     LHAAAA    SBR  3+X3
               SW   1+X3
               CW   2+X3
               CW   3+X3
     * BlockStatement(LIAAAA:null:3)
               MA   LDFAAA,X2
     LYHAAA    NOP  
     * NotEqualExpression((( *(dest++) ) = ( *(src++) )):'\0')
     * Assignment(( *(dest++) )=( *(src++) ))
     * DereferenceExpression((src++))
     * PostIncrement(src)
     * Push(LCIAAA:3)
               MA   LDFAAA,X2
               LCA  LCIAAA,0+X2
               MA   X3,0+X2
     * Pop(X1:3)
               LCA  0+X2,X1
               MA   LFFAAA,X2
     * Push(0+X1:3)
               MA   LDFAAA,X2
               LCA  0+X1,0+X2
               MA   LQFAAA,0+X1
     * Pop(X1:3)
               LCA  0+X2,X1
               MA   LFFAAA,X2
     * Push(0+X1:1)
               MA   LQFAAA,X2
               LCA  0+X1,0+X2
     * PostIncrement(dest)
     * Push(LFFAAA:3)
               MA   LDFAAA,X2
               LCA  LFFAAA,0+X2
               MA   X3,0+X2
     * Pop(X1:3)
               LCA  0+X2,X1
               MA   LFFAAA,X2
     * Push(0+X1:3)
               MA   LDFAAA,X2
               LCA  0+X1,0+X2
               MA   LQFAAA,0+X1
     * Pop(X1:3)
               LCA  0+X2,X1
               MA   LFFAAA,X2
               LCA  0+X2,0+X1
     * ConstantExpression(0)
     * Push(@'@:1)
               MA   LQFAAA,X2
               LCA  @'@,0+X2
               C    0+X2,15999+X2
     * Pop(1)
               MA   LSFAAA,X2
     * Pop(1)
               MA   LSFAAA,X2
     * Push(LBFAAA:5)
               MA   LIFAAA,X2
               LCA  LBFAAA,0+X2
               BE   LAIAAA
               B    LBIAAA
     LAIAAA    MCW  LLFAAA,0+X2
     LBIAAA    NOP  
               MCS  0+X2,0+X2
     * Pop(5)
               MA   LOFAAA,X2
               BCE  LZHAAA,5+X2, 
               B    LYHAAA
     LZHAAA    NOP  
     LIAAAA    NOP  
               MA   LFFAAA,X2
               MCW  @ @,RF
               LCA  3+X3,X1
               B    0+X1
     * FunctionDefinition((20))
     LUAAAA    SBR  3+X3
               SW   1+X3
               CW   2+X3
               CW   3+X3
     * BlockStatement(LVAAAA:null:3)
               MA   LDFAAA,X2
     * if(retree.statement.BlockStatement@49fa269b:retree.statement.BlockStatement@45fcb00e)
     * NotEqualExpression(c:'\n')
     * VariableExpression(c:-3:false)
     * Push(15997+X3:1)
               MA   LQFAAA,X2
               LCA  15997+X3,0+X2
     * ConstantExpression(10)
     * Push(@;@:1)
               MA   LQFAAA,X2
               LCA  @;@,0+X2
               C    0+X2,15999+X2
     * Pop(1)
               MA   LSFAAA,X2
     * Pop(1)
               MA   LSFAAA,X2
     * Push(LBFAAA:5)
               MA   LIFAAA,X2
               LCA  LBFAAA,0+X2
               BE   LFIAAA
               B    LGIAAA
     LFIAAA    MCW  LLFAAA,0+X2
     LGIAAA    NOP  
               MCS  0+X2,0+X2
     * Pop(5)
               MA   LOFAAA,X2
               BCE  LDIAAA,5+X2, 
     * BlockStatement(LWAAAA:LVAAAA:0)
     * Assignment(( *(__putchar_pos++) )=c)
     * VariableExpression(c:-3:false)
     * Push(15997+X3:1)
               MA   LQFAAA,X2
               LCA  15997+X3,0+X2
     * PostIncrement(__putchar_pos)
     * Push(LIIAAA:3)
               MA   LDFAAA,X2
               LCA  LIIAAA,0+X2
     * Pop(X1:3)
               LCA  0+X2,X1
               MA   LFFAAA,X2
     * Push(0+X1:3)
               MA   LDFAAA,X2
               LCA  0+X1,0+X2
               MA   LQFAAA,0+X1
     * Pop(X1:3)
               LCA  0+X2,X1
               MA   LFFAAA,X2
     * Pop(0+X1:1)
               LCA  0+X2,0+X1
               MA   LSFAAA,X2
     LWAAAA    NOP  
               BCE  LVAAAA,RF,R
               B    LEIAAA
     LDIAAA    NOP  
     * BlockStatement(LXAAAA:LVAAAA:0)
     LJIAAA    NOP  
     * GreaterThanOrEqualExpression(((int) __putchar_last):((int) __putchar_pos))
     * VariableExpression(__putchar_last:5028:true)
     * Push(5028:3)
               MA   LDFAAA,X2
               LCA  5028,0+X2
               B    LLIAAA
               B    LJFAAA
     * VariableExpression(__putchar_pos:5025:true)
     * Push(5025:3)
               MA   LDFAAA,X2
               LCA  5025,0+X2
               B    LLIAAA
               B    LJFAAA
               C    0+X2,15995+X2
     * Pop(5)
               MA   LOFAAA,X2
               MCW  LBFAAA,0+X2
               BL   LUIAAA
               B    LVIAAA
     LUIAAA    MCW  LLFAAA,0+X2
     LVIAAA    NOP  
               MCS  0+X2,0+X2
     * Pop(5)
               MA   LOFAAA,X2
               BCE  LKIAAA,5+X2, 
     * BlockStatement(LYAAAA:LXAAAA:0)
     * Assignment(( *(__putchar_last--) )=' ')
     * ConstantExpression(32)
     * Push(@ @:1)
               MA   LQFAAA,X2
               LCA  @ @,0+X2
     * PostDecrement(__putchar_last)
     * Push(LXIAAA:3)
               MA   LDFAAA,X2
               LCA  LXIAAA,0+X2
     * Pop(X1:3)
               LCA  0+X2,X1
               MA   LFFAAA,X2
     * Push(0+X1:3)
               MA   LDFAAA,X2
               LCA  0+X1,0+X2
               MA   LSFAAA,0+X1
     * Pop(X1:3)
               LCA  0+X2,X1
               MA   LFFAAA,X2
     * Pop(0+X1:1)
               LCA  0+X2,0+X1
               MA   LSFAAA,X2
     LYAAAA    NOP  
               BCE  LXAAAA,RF,R
               B    LJIAAA
     LKIAAA    NOP  
     * Assignment(__putchar_last=__putchar_pos)
     * VariableExpression(__putchar_pos:5025:true)
     * Push(5025:3)
               MA   LDFAAA,X2
               LCA  5025,0+X2
     * Push(LXIAAA:3)
               MA   LDFAAA,X2
               LCA  LXIAAA,0+X2
     * Pop(X1:3)
               LCA  0+X2,X1
               MA   LFFAAA,X2
     * Pop(0+X1:3)
               LCA  0+X2,0+X1
               MA   LFFAAA,X2
     * Assignment(__putchar_pos=(201))
     * ConstantExpression(201)
     * Push(LICAAA:3)
               MA   LDFAAA,X2
               LCA  LICAAA,0+X2
     * Push(LIIAAA:3)
               MA   LDFAAA,X2
               LCA  LIIAAA,0+X2
     * Pop(X1:3)
               LCA  0+X2,X1
               MA   LFFAAA,X2
     * Pop(0+X1:3)
               LCA  0+X2,0+X1
               MA   LFFAAA,X2
     * Start asm block
               W    
     * End asm block
     LXAAAA    NOP  
               BCE  LVAAAA,RF,R
     LEIAAA    NOP  
     * if(retree.statement.BlockStatement@37ada1e0:null)
     * EqualExpression(__putchar_pos:(333))
     * VariableExpression(__putchar_pos:5025:true)
     * Push(5025:3)
               MA   LDFAAA,X2
               LCA  5025,0+X2
     * ConstantExpression(333)
     * Push(LBJAAA:3)
               MA   LDFAAA,X2
               LCA  LBJAAA,0+X2
               C    0+X2,15997+X2
     * Pop(3)
               MA   LFFAAA,X2
     * Pop(3)
               MA   LFFAAA,X2
     * Push(LLFAAA:5)
               MA   LIFAAA,X2
               LCA  LLFAAA,0+X2
               BE   LZIAAA
               B    LAJAAA
     LZIAAA    MCW  LBFAAA,0+X2
     LAJAAA    NOP  
               MCS  0+X2,0+X2
     * Pop(5)
               MA   LOFAAA,X2
               BCE  LYIAAA,5+X2, 
     * BlockStatement(LZAAAA:LVAAAA:0)
     * Assignment(__putchar_last=__putchar_pos)
     * VariableExpression(__putchar_pos:5025:true)
     * Push(5025:3)
               MA   LDFAAA,X2
               LCA  5025,0+X2
     * Push(LXIAAA:3)
               MA   LDFAAA,X2
               LCA  LXIAAA,0+X2
     * Pop(X1:3)
               LCA  0+X2,X1
               MA   LFFAAA,X2
     * Pop(0+X1:3)
               LCA  0+X2,0+X1
               MA   LFFAAA,X2
     * Assignment(__putchar_pos=(201))
     * ConstantExpression(201)
     * Push(LICAAA:3)
               MA   LDFAAA,X2
               LCA  LICAAA,0+X2
     * Push(LIIAAA:3)
               MA   LDFAAA,X2
               LCA  LIIAAA,0+X2
     * Pop(X1:3)
               LCA  0+X2,X1
               MA   LFFAAA,X2
     * Pop(0+X1:3)
               LCA  0+X2,0+X1
               MA   LFFAAA,X2
     * Start asm block
               W    
     * End asm block
     LZAAAA    NOP  
               BCE  LVAAAA,RF,R
     LYIAAA    NOP  
     LVAAAA    NOP  
               MA   LFFAAA,X2
               MCW  @ @,RF
               LCA  3+X3,X1
               B    0+X1
     * FunctionDefinition((53))
     LBCAAA    SBR  3+X3
               SW   1+X3
               CW   2+X3
               CW   3+X3
     * BlockStatement(LCCAAA:null:218)
               MA   LCJAAA,X2
     * FunctionCallExpr((36))
     * Push(5)
               MA   LIFAAA,X2
     * ConstantExpression(20)
     * Push(LDJAAA:5)
               MA   LIFAAA,X2
               LCA  LDJAAA,0+X2
     * ArrayNameExpresssion("Pascal Triangle with %d iterations\n\n":char [37])
     * Push(LEJAAA:3)
               MA   LDFAAA,X2
               LCA  LEJAAA,0+X2
     * Push(X3:3)
               MA   LDFAAA,X2
               LCA  X3,0+X2
               MCW  X2,X3
               B    LKBAAA
     * Pop(X3:3)
               LCA  0+X2,X3
               MA   LFFAAA,X2
     * Pop(3)
               MA   LFFAAA,X2
     * Pop(5)
               MA   LOFAAA,X2
     * Pop(5)
               MA   LOFAAA,X2
     * ForStatement((i = 0),(i <= 20)'(i++):retree.statement.BlockStatement@66109fbf:LECAAA:LFCAAA:LGCAAA)
     * Assignment(i=0)
     * ConstantExpression(0)
     * Push(LLFAAA:5)
               MA   LIFAAA,X2
               LCA  LLFAAA,0+X2
     * Push(LCJAAA:3)
               MA   LDFAAA,X2
               LCA  LCJAAA,0+X2
               MA   X3,0+X2
     * Pop(X1:3)
               LCA  0+X2,X1
               MA   LFFAAA,X2
     * Pop(0+X1:5)
               LCA  0+X2,0+X1
               MA   LOFAAA,X2
     LECAAA    NOP  
     * LessThanOrEqualExpression(i:20)
     * VariableExpression(i:218:false)
     * Push(218+X3:5)
               MA   LIFAAA,X2
               LCA  218+X3,0+X2
               B    LJFAAA
     * ConstantExpression(20)
     * Push(LDJAAA:5)
               MA   LIFAAA,X2
               LCA  LDJAAA,0+X2
               B    LJFAAA
               C    0+X2,15995+X2
     * Pop(5)
               MA   LOFAAA,X2
               MCW  LBFAAA,0+X2
               BH   LFJAAA
               B    LGJAAA
     LFJAAA    MCW  LLFAAA,0+X2
     LGJAAA    NOP  
               MCS  0+X2,0+X2
     * Pop(5)
               MA   LOFAAA,X2
               BCE  LFCAAA,5+X2, 
     * BlockStatement(LDCAAA:LCCAAA:0)
     * Assignment((x[i])=retree.expression.TernaryExpression@4d67e8f2)
     * TernaryExpression((i == 1):1:0)
     * EqualExpression(i:1)
     * VariableExpression(i:218:false)
     * Push(218+X3:5)
               MA   LIFAAA,X2
               LCA  218+X3,0+X2
               B    LJFAAA
     * ConstantExpression(1)
     * Push(LBFAAA:5)
               MA   LIFAAA,X2
               LCA  LBFAAA,0+X2
               B    LJFAAA
               C    0+X2,15995+X2
     * Pop(5)
               MA   LOFAAA,X2
     * Pop(5)
               MA   LOFAAA,X2
     * Push(LLFAAA:5)
               MA   LIFAAA,X2
               LCA  LLFAAA,0+X2
               BE   LJJAAA
               B    LKJAAA
     LJJAAA    MCW  LBFAAA,0+X2
     LKJAAA    NOP  
               MCS  0+X2,0+X2
     * Pop(5)
               MA   LOFAAA,X2
               BCE  LHJAAA,5+X2, 
     * ConstantExpression(1)
     * Push(LBFAAA:5)
               MA   LIFAAA,X2
               LCA  LBFAAA,0+X2
               B    LIJAAA
     LHJAAA    NOP  
     * ConstantExpression(0)
     * Push(LLFAAA:5)
               MA   LIFAAA,X2
               LCA  LLFAAA,0+X2
     LIJAAA    NOP  
     * ArrayNameExpresssion(x:int [21])
     * Push(LWHAAA:3)
               MA   LDFAAA,X2
               LCA  LWHAAA,0+X2
               MA   X3,0+X2
     * VariableExpression(i:218:false)
     * Push(218+X3:5)
               MA   LIFAAA,X2
               LCA  218+X3,0+X2
     * raw index on the stack
     * Push(LLJAAA:5)
               MA   LIFAAA,X2
               LCA  LLJAAA,0+X2
               M    15995+X2,6+X2
               SW   2+X2
               LCA  6+X2,15995+X2
     * Pop(5)
               MA   LOFAAA,X2
     * STACK TOP IS NOW ARRAY INDEX
               B    LXFAAA
               MA   0+X2,15997+X2
     * Pop(3)
               MA   LFFAAA,X2
     * STACK top is location in array now.
     * Pop(X1:3)
               LCA  0+X2,X1
               MA   LFFAAA,X2
     * Pop(0+X1:5)
               LCA  0+X2,0+X1
               MA   LOFAAA,X2
     * Assignment((y[i])=0)
     * ConstantExpression(0)
     * Push(LLFAAA:5)
               MA   LIFAAA,X2
               LCA  LLFAAA,0+X2
     * ArrayNameExpresssion(y:int [21])
     * Push(LMJAAA:3)
               MA   LDFAAA,X2
               LCA  LMJAAA,0+X2
               MA   X3,0+X2
     * VariableExpression(i:218:false)
     * Push(218+X3:5)
               MA   LIFAAA,X2
               LCA  218+X3,0+X2
     * raw index on the stack
     * Push(LLJAAA:5)
               MA   LIFAAA,X2
               LCA  LLJAAA,0+X2
               M    15995+X2,6+X2
               SW   2+X2
               LCA  6+X2,15995+X2
     * Pop(5)
               MA   LOFAAA,X2
     * STACK TOP IS NOW ARRAY INDEX
               B    LXFAAA
               MA   0+X2,15997+X2
     * Pop(3)
               MA   LFFAAA,X2
     * STACK top is location in array now.
     * Pop(X1:3)
               LCA  0+X2,X1
               MA   LFFAAA,X2
     * Pop(0+X1:5)
               LCA  0+X2,0+X1
               MA   LOFAAA,X2
     LDCAAA    NOP  
               BCE  LCCAAA,RF,R
     LGCAAA    NOP  
     * PostIncrement(i)
     * Push(LCJAAA:3)
               MA   LDFAAA,X2
               LCA  LCJAAA,0+X2
               MA   X3,0+X2
     * Pop(X1:3)
               LCA  0+X2,X1
               MA   LFFAAA,X2
               A    LBFAAA,0+X1
               B    LECAAA
     LFCAAA    NOP  
     * FunctionCallExpr((47))
     * Push(5)
               MA   LIFAAA,X2
     * ConstantExpression(0)
     * Push(LLFAAA:5)
               MA   LIFAAA,X2
               LCA  LLFAAA,0+X2
     * ArrayNameExpresssion(y:int [21])
     * Push(LMJAAA:3)
               MA   LDFAAA,X2
               LCA  LMJAAA,0+X2
               MA   X3,0+X2
     * ArrayNameExpresssion(x:int [21])
     * Push(LWHAAA:3)
               MA   LDFAAA,X2
               LCA  LWHAAA,0+X2
               MA   X3,0+X2
     * Push(X3:3)
               MA   LDFAAA,X2
               LCA  X3,0+X2
               MCW  X2,X3
               B    LVBAAA
     * Pop(X3:3)
               LCA  0+X2,X3
               MA   LFFAAA,X2
     * Pop(3)
               MA   LFFAAA,X2
     * Pop(3)
               MA   LFFAAA,X2
     * Pop(5)
               MA   LOFAAA,X2
     * Pop(5)
               MA   LOFAAA,X2
     * FunctionCallExpr((36))
     * Push(5)
               MA   LIFAAA,X2
     * ArrayNameExpresssion("\nDone.\n":char [8])
     * Push(LNJAAA:3)
               MA   LDFAAA,X2
               LCA  LNJAAA,0+X2
     * Push(X3:3)
               MA   LDFAAA,X2
               LCA  X3,0+X2
               MCW  X2,X3
               B    LKBAAA
     * Pop(X3:3)
               LCA  0+X2,X3
               MA   LFFAAA,X2
     * Pop(3)
               MA   LFFAAA,X2
     * Pop(5)
               MA   LOFAAA,X2
     LCCAAA    NOP  
               MA   LOJAAA,X2
               MCW  @ @,RF
               LCA  3+X3,X1
               B    0+X1
     * FunctionDefinition((5))
     LFAAAA    SBR  3+X3
               SW   1+X3
               CW   2+X3
               CW   3+X3
     * BlockStatement(LGAAAA:null:8)
               MA   LWHAAA,X2
     LQJAAA    NOP  
     * NotEqualExpression((str[(++len)]):'\0')
     * SubScriptEpression(str:(++len))
     * VariableExpression(str:-3:false)
     * Push(15997+X3:3)
               MA   LDFAAA,X2
               LCA  15997+X3,0+X2
     * PreIncrement(len)
     * Push(LWHAAA:3)
               MA   LDFAAA,X2
               LCA  LWHAAA,0+X2
               MA   X3,0+X2
     * Pop(X1:3)
               LCA  0+X2,X1
               MA   LFFAAA,X2
               A    LBFAAA,0+X1
     * Push(0+X1:5)
               MA   LIFAAA,X2
               LCA  0+X1,0+X2
     * raw index on the stack
     * Push(LBFAAA:5)
               MA   LIFAAA,X2
               LCA  LBFAAA,0+X2
               M    15995+X2,6+X2
               SW   2+X2
               LCA  6+X2,15995+X2
     * Pop(5)
               MA   LOFAAA,X2
     * STACK TOP IS NOW ARRAY INDEX
               B    LXFAAA
               MA   0+X2,15997+X2
     * Pop(3)
               MA   LFFAAA,X2
     * STACK top is location in array now.
     * Pop(X1:3)
               LCA  0+X2,X1
               MA   LFFAAA,X2
     * Push(0+X1:1)
               MA   LQFAAA,X2
               LCA  0+X1,0+X2
     * ConstantExpression(0)
     * Push(@'@:1)
               MA   LQFAAA,X2
               LCA  @'@,0+X2
               C    0+X2,15999+X2
     * Pop(1)
               MA   LSFAAA,X2
     * Pop(1)
               MA   LSFAAA,X2
     * Push(LBFAAA:5)
               MA   LIFAAA,X2
               LCA  LBFAAA,0+X2
               BE   LSJAAA
               B    LTJAAA
     LSJAAA    MCW  LLFAAA,0+X2
     LTJAAA    NOP  
               MCS  0+X2,0+X2
     * Pop(5)
               MA   LOFAAA,X2
               BCE  LRJAAA,5+X2, 
               B    LQJAAA
     LRJAAA    NOP  
     * VariableExpression(len:8:false)
     * Push(8+X3:5)
               MA   LIFAAA,X2
               LCA  8+X3,0+X2
     * Pop(15994+X3:5)
               LCA  0+X2,15994+X3
               MA   LOFAAA,X2
     * set the return flag, so we know do deallocate our stack
               MCW  @R@,RF
     * and branch
               B    LGAAAA
     LGAAAA    NOP  
               MA   LRFAAA,X2
               MCW  @ @,RF
               LCA  3+X3,X1
               B    0+X1
     * FunctionDefinition((47))
     LVBAAA    SBR  3+X3
               SW   1+X3
               CW   2+X3
               CW   3+X3
     * BlockStatement(LWBAAA:null:14)
               MA   LCFAAA,X2
     * ForStatement((i = 1),(i < d)'(i++):retree.statement.BlockStatement@4e13aa4e:LYBAAA:LZBAAA:LACAAA)
     * Assignment(i=1)
     * ConstantExpression(1)
     * Push(LBFAAA:5)
               MA   LIFAAA,X2
               LCA  LBFAAA,0+X2
     * Push(LWHAAA:3)
               MA   LDFAAA,X2
               LCA  LWHAAA,0+X2
               MA   X3,0+X2
     * Pop(X1:3)
               LCA  0+X2,X1
               MA   LFFAAA,X2
     * Pop(0+X1:5)
               LCA  0+X2,0+X1
               MA   LOFAAA,X2
     LYBAAA    NOP  
     * LessThanExpression(i:d)
     * VariableExpression(i:8:false)
     * Push(8+X3:5)
               MA   LIFAAA,X2
               LCA  8+X3,0+X2
               B    LJFAAA
     * VariableExpression(d:-9:false)
     * Push(15991+X3:5)
               MA   LIFAAA,X2
               LCA  15991+X3,0+X2
               B    LJFAAA
               C    0+X2,15995+X2
     * Pop(5)
               MA   LOFAAA,X2
               MCW  LLFAAA,0+X2
               BL   LUJAAA
               B    LVJAAA
     LUJAAA    MCW  LBFAAA,0+X2
     LVJAAA    NOP  
               MCS  0+X2,0+X2
     * Pop(5)
               MA   LOFAAA,X2
               BCE  LZBAAA,5+X2, 
     * BlockStatement(LXBAAA:LWBAAA:0)
     * FunctionCallExpr((36))
     * Push(5)
               MA   LIFAAA,X2
     * TernaryExpression((i < (d - 1)):' ':'\n')
     * LessThanExpression(i:(d - 1))
     * VariableExpression(i:8:false)
     * Push(8+X3:5)
               MA   LIFAAA,X2
               LCA  8+X3,0+X2
               B    LJFAAA
     * Subtraction(d-1)
     * VariableExpression(d:-9:false)
     * Push(15991+X3:5)
               MA   LIFAAA,X2
               LCA  15991+X3,0+X2
     * ConstantExpression(1)
     * Push(LBFAAA:5)
               MA   LIFAAA,X2
               LCA  LBFAAA,0+X2
               S    0+X2,15995+X2
     * Pop(5)
               MA   LOFAAA,X2
               B    LJFAAA
               C    0+X2,15995+X2
     * Pop(5)
               MA   LOFAAA,X2
               MCW  LLFAAA,0+X2
               BL   LYJAAA
               B    LZJAAA
     LYJAAA    MCW  LBFAAA,0+X2
     LZJAAA    NOP  
               MCS  0+X2,0+X2
     * Pop(5)
               MA   LOFAAA,X2
               BCE  LWJAAA,5+X2, 
     * ConstantExpression(32)
     * Push(@ @:1)
               MA   LQFAAA,X2
               LCA  @ @,0+X2
               B    LXJAAA
     LWJAAA    NOP  
     * ConstantExpression(10)
     * Push(@;@:1)
               MA   LQFAAA,X2
               LCA  @;@,0+X2
     LXJAAA    NOP  
     * Assignment((y[i])=((x[(i - 1)]) + (x[i])))
     * Addition((x[(i - 1)])+(x[i]))
     * SubScriptEpression(x:(i - 1))
     * VariableExpression(x:-3:false)
     * Push(15997+X3:3)
               MA   LDFAAA,X2
               LCA  15997+X3,0+X2
     * Subtraction(i-1)
     * VariableExpression(i:8:false)
     * Push(8+X3:5)
               MA   LIFAAA,X2
               LCA  8+X3,0+X2
     * ConstantExpression(1)
     * Push(LBFAAA:5)
               MA   LIFAAA,X2
               LCA  LBFAAA,0+X2
               S    0+X2,15995+X2
     * Pop(5)
               MA   LOFAAA,X2
     * raw index on the stack
     * Push(LLJAAA:5)
               MA   LIFAAA,X2
               LCA  LLJAAA,0+X2
               M    15995+X2,6+X2
               SW   2+X2
               LCA  6+X2,15995+X2
     * Pop(5)
               MA   LOFAAA,X2
     * STACK TOP IS NOW ARRAY INDEX
               B    LXFAAA
               MA   0+X2,15997+X2
     * Pop(3)
               MA   LFFAAA,X2
     * STACK top is location in array now.
     * Pop(X1:3)
               LCA  0+X2,X1
               MA   LFFAAA,X2
     * Push(0+X1:5)
               MA   LIFAAA,X2
               LCA  0+X1,0+X2
     * SubScriptEpression(x:i)
     * VariableExpression(x:-3:false)
     * Push(15997+X3:3)
               MA   LDFAAA,X2
               LCA  15997+X3,0+X2
     * VariableExpression(i:8:false)
     * Push(8+X3:5)
               MA   LIFAAA,X2
               LCA  8+X3,0+X2
     * raw index on the stack
     * Push(LLJAAA:5)
               MA   LIFAAA,X2
               LCA  LLJAAA,0+X2
               M    15995+X2,6+X2
               SW   2+X2
               LCA  6+X2,15995+X2
     * Pop(5)
               MA   LOFAAA,X2
     * STACK TOP IS NOW ARRAY INDEX
               B    LXFAAA
               MA   0+X2,15997+X2
     * Pop(3)
               MA   LFFAAA,X2
     * STACK top is location in array now.
     * Pop(X1:3)
               LCA  0+X2,X1
               MA   LFFAAA,X2
     * Push(0+X1:5)
               MA   LIFAAA,X2
               LCA  0+X1,0+X2
               A    0+X2,15995+X2
     * Pop(5)
               MA   LOFAAA,X2
     * VariableExpression(y:-6:false)
     * Push(15994+X3:3)
               MA   LDFAAA,X2
               LCA  15994+X3,0+X2
     * VariableExpression(i:8:false)
     * Push(8+X3:5)
               MA   LIFAAA,X2
               LCA  8+X3,0+X2
     * raw index on the stack
     * Push(LLJAAA:5)
               MA   LIFAAA,X2
               LCA  LLJAAA,0+X2
               M    15995+X2,6+X2
               SW   2+X2
               LCA  6+X2,15995+X2
     * Pop(5)
               MA   LOFAAA,X2
     * STACK TOP IS NOW ARRAY INDEX
               B    LXFAAA
               MA   0+X2,15997+X2
     * Pop(3)
               MA   LFFAAA,X2
     * STACK top is location in array now.
     * Pop(X1:3)
               LCA  0+X2,X1
               MA   LFFAAA,X2
               LCA  0+X2,0+X1
     * ArrayNameExpresssion("%d%c":char [5])
     * Push(LAKAAA:3)
               MA   LDFAAA,X2
               LCA  LAKAAA,0+X2
     * Push(X3:3)
               MA   LDFAAA,X2
               LCA  X3,0+X2
               MCW  X2,X3
               B    LKBAAA
     * Pop(X3:3)
               LCA  0+X2,X3
               MA   LFFAAA,X2
     * Pop(3)
               MA   LFFAAA,X2
     * Pop(5)
               MA   LOFAAA,X2
     * Pop(1)
               MA   LSFAAA,X2
     * Pop(5)
               MA   LOFAAA,X2
     LXBAAA    NOP  
               BCE  LWBAAA,RF,R
     LACAAA    NOP  
     * PostIncrement(i)
     * Push(LWHAAA:3)
               MA   LDFAAA,X2
               LCA  LWHAAA,0+X2
               MA   X3,0+X2
     * Pop(X1:3)
               LCA  0+X2,X1
               MA   LFFAAA,X2
               A    LBFAAA,0+X1
               B    LYBAAA
     LZBAAA    NOP  
     * TernaryExpression((20 >= d):(47( y x (d + 1))):0)
     * GreaterThanOrEqualExpression(20:d)
     * ConstantExpression(20)
     * Push(LDJAAA:5)
               MA   LIFAAA,X2
               LCA  LDJAAA,0+X2
               B    LJFAAA
     * VariableExpression(d:-9:false)
     * Push(15991+X3:5)
               MA   LIFAAA,X2
               LCA  15991+X3,0+X2
               B    LJFAAA
               C    0+X2,15995+X2
     * Pop(5)
               MA   LOFAAA,X2
               MCW  LBFAAA,0+X2
               BL   LDKAAA
               B    LEKAAA
     LDKAAA    MCW  LLFAAA,0+X2
     LEKAAA    NOP  
               MCS  0+X2,0+X2
     * Pop(5)
               MA   LOFAAA,X2
               BCE  LBKAAA,5+X2, 
     * FunctionCallExpr((47))
     * Push(5)
               MA   LIFAAA,X2
     * Addition(d+1)
     * VariableExpression(d:-9:false)
     * Push(15991+X3:5)
               MA   LIFAAA,X2
               LCA  15991+X3,0+X2
     * ConstantExpression(1)
     * Push(LBFAAA:5)
               MA   LIFAAA,X2
               LCA  LBFAAA,0+X2
               A    0+X2,15995+X2
     * Pop(5)
               MA   LOFAAA,X2
     * VariableExpression(x:-3:false)
     * Push(15997+X3:3)
               MA   LDFAAA,X2
               LCA  15997+X3,0+X2
     * VariableExpression(y:-6:false)
     * Push(15994+X3:3)
               MA   LDFAAA,X2
               LCA  15994+X3,0+X2
     * Push(X3:3)
               MA   LDFAAA,X2
               LCA  X3,0+X2
               MCW  X2,X3
               B    LVBAAA
     * Pop(X3:3)
               LCA  0+X2,X3
               MA   LFFAAA,X2
     * Pop(3)
               MA   LFFAAA,X2
     * Pop(3)
               MA   LFFAAA,X2
     * Pop(5)
               MA   LOFAAA,X2
               B    LCKAAA
     LBKAAA    NOP  
     * ConstantExpression(0)
     * Push(LLFAAA:5)
               MA   LIFAAA,X2
               LCA  LLFAAA,0+X2
     LCKAAA    NOP  
     * Pop(15986+X3:5)
               LCA  0+X2,15986+X3
               MA   LOFAAA,X2
     * set the return flag, so we know do deallocate our stack
               MCW  @R@,RF
     * and branch
               B    LWBAAA
     LWBAAA    NOP  
               MA   LRGAAA,X2
               MCW  @ @,RF
               LCA  3+X3,X1
               B    0+X1
     * FunctionDefinition((1))
     LBAAAA    SBR  3+X3
               SW   1+X3
               CW   2+X3
               CW   3+X3
     * BlockStatement(LCAAAA:null:3)
               MA   LDFAAA,X2
     * Assignment(seed=retree.expression.ModuloExpression@3c92218c)
     * ModuloExpression(((42 * seed) + 19):100000)
     * ConstantExpression(100000)
     * Push(LFKAAA:5)
               MA   LIFAAA,X2
               LCA  LFKAAA,0+X2
     * Addition((42 * seed)+19)
     * Multiplication(42*seed)
     * ConstantExpression(42)
     * Push(LGKAAA:5)
               MA   LIFAAA,X2
               LCA  LGKAAA,0+X2
     * VariableExpression(seed:5005:true)
     * Push(5005:5)
               MA   LIFAAA,X2
               LCA  5005,0+X2
               M    15995+X2,6+X2
               SW   2+X2
               LCA  6+X2,15995+X2
     * Pop(5)
               MA   LOFAAA,X2
     * ConstantExpression(19)
     * Push(LHKAAA:5)
               MA   LIFAAA,X2
               LCA  LHKAAA,0+X2
               A    0+X2,15995+X2
     * Pop(5)
               MA   LOFAAA,X2
               B    LHGAAA
     * Pop(5)
               MA   LOFAAA,X2
     * Push(LIKAAA:3)
               MA   LDFAAA,X2
               LCA  LIKAAA,0+X2
     * Pop(X1:3)
               LCA  0+X2,X1
               MA   LFFAAA,X2
     * Pop(0+X1:5)
               LCA  0+X2,0+X1
               MA   LOFAAA,X2
     * VariableExpression(seed:5005:true)
     * Push(5005:5)
               MA   LIFAAA,X2
               LCA  5005,0+X2
     * Pop(15997+X3:5)
               LCA  0+X2,15997+X3
               MA   LOFAAA,X2
     * set the return flag, so we know do deallocate our stack
               MCW  @R@,RF
     * and branch
               B    LCAAAA
     LCAAAA    NOP  
               MA   LFFAAA,X2
               MCW  @ @,RF
               LCA  3+X3,X1
               B    0+X1
     * FunctionDefinition((26))
     LABAAA    SBR  3+X3
               SW   1+X3
               CW   2+X3
               CW   3+X3
     * BlockStatement(LBBAAA:null:3)
               MA   LDFAAA,X2
     LJKAAA    NOP  
     * NotEqualExpression(( *s ):'\0')
     * DereferenceExpression(s)
     * VariableExpression(s:-3:false)
     * Push(15997+X3:3)
               MA   LDFAAA,X2
               LCA  15997+X3,0+X2
     * Pop(X1:3)
               LCA  0+X2,X1
               MA   LFFAAA,X2
     * Push(0+X1:1)
               MA   LQFAAA,X2
               LCA  0+X1,0+X2
     * ConstantExpression(0)
     * Push(@'@:1)
               MA   LQFAAA,X2
               LCA  @'@,0+X2
               C    0+X2,15999+X2
     * Pop(1)
               MA   LSFAAA,X2
     * Pop(1)
               MA   LSFAAA,X2
     * Push(LBFAAA:5)
               MA   LIFAAA,X2
               LCA  LBFAAA,0+X2
               BE   LLKAAA
               B    LMKAAA
     LLKAAA    MCW  LLFAAA,0+X2
     LMKAAA    NOP  
               MCS  0+X2,0+X2
     * Pop(5)
               MA   LOFAAA,X2
               BCE  LKKAAA,5+X2, 
     * BlockStatement(LCBAAA:LBBAAA:0)
     * FunctionCallExpr((20))
     * Push(5)
               MA   LIFAAA,X2
     * DereferenceExpression((s++))
     * PostIncrement(s)
     * Push(LFFAAA:3)
               MA   LDFAAA,X2
               LCA  LFFAAA,0+X2
               MA   X3,0+X2
     * Pop(X1:3)
               LCA  0+X2,X1
               MA   LFFAAA,X2
     * Push(0+X1:3)
               MA   LDFAAA,X2
               LCA  0+X1,0+X2
               MA   LQFAAA,0+X1
     * Pop(X1:3)
               LCA  0+X2,X1
               MA   LFFAAA,X2
     * Push(0+X1:1)
               MA   LQFAAA,X2
               LCA  0+X1,0+X2
     * Push(X3:3)
               MA   LDFAAA,X2
               LCA  X3,0+X2
               MCW  X2,X3
               B    LUAAAA
     * Pop(X3:3)
               LCA  0+X2,X3
               MA   LFFAAA,X2
     * Pop(1)
               MA   LSFAAA,X2
     * Pop(5)
               MA   LOFAAA,X2
     LCBAAA    NOP  
               BCE  LBBAAA,RF,R
               B    LJKAAA
     LKKAAA    NOP  
     LBBAAA    NOP  
               MA   LFFAAA,X2
               MCW  @ @,RF
               LCA  3+X3,X1
               B    0+X1
     LJFAAA    SBR  X1
     * Normalizes the zone bits of a number, leaving either A=0B=0
     * for a positive or A=0B=1 for a negative
     * Do nothing on either no zone bits or only a b zone bit
               BWZ  LKFAAA,0+X2,2
               BWZ  LKFAAA,0+X2,K
     * else clear the zone bits, as it is positive
               MZ   @ @,0+X2
     LKFAAA    B    0+X1
    ****************************************************************  
    ** DIVISION SNIPPET                                           **
    ****************************************************************  
     
     LHGAAA    SBR  LIGAAA+3           * SETUP RETURN ADDRESS
     * POP DIVIDEND
               MCW  0+X2, LJGAAA
               SBR  X2, 15995+X2

     * POP DIVISOR
               MCW  0+X2, LKGAAA
               SBR  X2, 15995+X2


               B    *+17
               
               DCW  @00000@                
               DC   @00000000000@        

               ZA   LJGAAA, *-7         * PUT DIVIDEND INTO WORKING BL
               D    LKGAAA, *-19        * DIVIDE
               MZ   *-22, *-21          * KILL THE ZONE BIT
               MZ   *-29, *-34          * KILL THE ZONE BIT
               MCW  *-41, LLGAAA        * PICK UP ANSWER
               SW   *-44                * SO I CAN PICKUP REMAINDER
               MCW  *-46, LMGAAA        * GET REMAINDER
               CW   *-55                * CLEAR THE WM
               MZ   LLGAAA-1, LLGAAA    * CLEANUP QUOTIENT BITZONE
               MZ   LMGAAA-1, LMGAAA    * CLEANUP REMAINDER BITZONE
               
     * PUSH REMAINDER
               SBR  X2, 5+X2
               SW   15996+X2
               MCW  LMGAAA, 0+X2
               
     * PUSH QUOTIENT
               SBR  X2, 5+X2
               SW   15996+X2
               MCW  LLGAAA, 0+X2

     LIGAAA    B    000                 * JUMP BACK
               
     LKGAAA    DCW  00000               * DIVISOR
     LJGAAA    DCW  00000               * DIVIDEND
     LLGAAA    DCW  00000               * QUOTIENT
     LMGAAA    DCW  00000               * REMAINDER
     LXFAAA    SBR  X1
     * Casts a 5-digit number to a 3-digit address
     * make a copy of the top of the stack
               SW   15998+X2
               LCA  0+X2,3+X2
               CW   15998+X2
     * zero out the zone bits of our copy
               MZ   @0@,3+X2
               MZ   @0@,2+X2
               MZ   @0@,1+X2
     * set the low-order digit's zone bits
               C    @04000@,0+X2
               BL   LAGAAA
               C    @08000@,0+X2
               BL   LZFAAA
               C    @12000@,0+X2
               BL   LYFAAA
               S    @12000@,0+X2
               MZ   @A@,3+X2
               B    LAGAAA
     LYFAAA    S    @08000@,0+X2
               MZ   @I@,3+X2
               B    LAGAAA
     LZFAAA    S    @04000@,0+X2
               MZ   @S@,3+X2
     * For some reason the zone bits get set - it still works though.
     LAGAAA    C    @01000@,0+X2
               BL   LDGAAA
               C    @02000@,0+X2
               BL   LCGAAA
               C    @03000@,0+X2
               BL   LBGAAA
               MZ   @A@,1+X2
               B    LDGAAA
     LBGAAA    MZ   @I@,1+X2
               B    LDGAAA
     LCGAAA    MZ   @S@,1+X2
     LDGAAA    LCA  3+X2,15998+X2
               SBR  X2,15998+X2
               B    0+X1
     LLIAAA    SBR  X1
     * Casts a 3-digit address to a 5-digit number
     * Make room on the stack for an int
               MA   @002@,X2
     * make a copy of the top of the stack
               LCA  15998+X2,3+X2
     * Now zero out the top of the stack
               LCA  @00000@,0+X2
     * Now copy back, shifted over 2 digits
               LCA  3+X2,0+X2
     * Now zero out the zone bits on the stack
               MZ   @0@,0+X2
               MZ   @0@,15999+X2
               MZ   @0@,15998+X2
     * check the high-order digit's zone bits
               BWZ  LMIAAA,1+X2,S
               BWZ  LNIAAA,1+X2,K
               BWZ  LOIAAA,1+X2,B
               B    LPIAAA
     LMIAAA    A    @01000@,0+X2
               B    LPIAAA
     LNIAAA    A    @02000@,0+X2
               B    LPIAAA
     LOIAAA    A    @03000@,0+X2
     LPIAAA    BWZ  LQIAAA,3+X2,S
               BWZ  LRIAAA,3+X2,K
               BWZ  LSIAAA,3+X2,B
               B    LTIAAA
     LQIAAA    A    @04000@,0+X2
               B    LTIAAA
     LRIAAA    A    @08000@,0+X2
               B    LTIAAA
     LSIAAA    A    @12000@,0+X2
     LTIAAA    B    0+X1
      
     * SET THE START POSITION OF DATA
               ORG  5019

     LLCAAA    DCW  @0@
     LMCAAA    DCW  @1@
     LNCAAA    DCW  @2@
     LOCAAA    DCW  @3@
     LPCAAA    DCW  @4@
     LQCAAA    DCW  @5@
     LRCAAA    DCW  @6@
     LSCAAA    DCW  @7@
     LTCAAA    DCW  @8@
     LUCAAA    DCW  @9@
     LVCAAA    DCW  @A@
     LWCAAA    DCW  @B@
     LXCAAA    DCW  @C@
     LYCAAA    DCW  @D@
     LZCAAA    DCW  @E@
     LADAAA    DCW  @F@
     LBDAAA    DCW  @'@
     LCDAAA    DCW  @%@
     LDDAAA    DCW  @D@
     LEDAAA    DCW  @%@
     LFDAAA    DCW  @C@
     LGDAAA    DCW  @'@
     LHDAAA    DCW  @P@
     LIDAAA    DCW  @A@
     LJDAAA    DCW  @S@
     LKDAAA    DCW  @C@
     LLDAAA    DCW  @A@
     LMDAAA    DCW  @L@
     LNDAAA    DCW  @ @
     LODAAA    DCW  @T@
     LPDAAA    DCW  @R@
     LQDAAA    DCW  @I@
     LRDAAA    DCW  @A@
     LSDAAA    DCW  @N@
     LTDAAA    DCW  @G@
     LUDAAA    DCW  @L@
     LVDAAA    DCW  @E@
     LWDAAA    DCW  @ @
     LXDAAA    DCW  @W@
     LYDAAA    DCW  @I@
     LZDAAA    DCW  @T@
     LAEAAA    DCW  @H@
     LBEAAA    DCW  @ @
     LCEAAA    DCW  @%@
     LDEAAA    DCW  @D@
     LEEAAA    DCW  @ @
     LFEAAA    DCW  @I@
     LGEAAA    DCW  @T@
     LHEAAA    DCW  @E@
     LIEAAA    DCW  @R@
     LJEAAA    DCW  @A@
     LKEAAA    DCW  @T@
     LLEAAA    DCW  @I@
     LMEAAA    DCW  @O@
     LNEAAA    DCW  @N@
     LOEAAA    DCW  @S@
     LPEAAA    DCW  @;@
     LQEAAA    DCW  @;@
     LREAAA    DCW  @'@
     LSEAAA    DCW  @;@
     LTEAAA    DCW  @D@
     LUEAAA    DCW  @O@
     LVEAAA    DCW  @N@
     LWEAAA    DCW  @E@
     LXEAAA    DCW  @.@
     LYEAAA    DCW  @;@
     LZEAAA    DCW  @'@

     LWIAAA    DCW  @ @
     LFFAAA    DCW  @I9G@
     LFKAAA    DCW  @100000@
     LPJAAA    DCW  @0000J@
     LHCAAA    DCW  @69105@
     LGKAAA    DCW  @00042@
     LOJAAA    DCW  @G8B@
     LPFAAA    DCW  @-@
     LUHAAA    DCW  @D@
     LSFAAA    DCW  @I9I@
     LNJAAA    DCW  @'7Y@
     LAFAAA    DCW  @'0W@
     LEGAAA    DCW  @'@
     LIIAAA    DCW  @'2V@
     LVHAAA    DCW  @00010@
     LBHAAA    DCW  @%@
     LMJAAA    DCW  @113@
     LEFAAA    DCW  @006@
     LICAAA    DCW  @201@
     LWHAAA    DCW  @008@
     LWFAAA    DCW  @0@
     LKCAAA    DCW  @081@
     LRFAAA    DCW  @I9B@
     LCIAAA    DCW  @I9D@
     LLFAAA    DCW  @00000@
     LPHAAA    DCW  @S@
     LQFAAA    DCW  @001@
     LBFAAA    DCW  @00001@
     LAKAAA    DCW  @'3W@
     LCJAAA    DCW  @218@
     LKHAAA    DCW  @C@
     LIKAAA    DCW  @'0V@
     LDFAAA    DCW  @003@
     LRGAAA    DCW  @I8F@
     LLJAAA    DCW  @00005@
     LIFAAA    DCW  @005@
     LXIAAA    DCW  @'2Y@
     LDJAAA    DCW  @00020@
     LSGAAA    DCW  @007@
     LEJAAA    DCW  @'4/@
     LJCAAA    DCW  @200@
     LCFAAA    DCW  @014@
     LXHAAA    DCW  @I9C@
     LHKAAA    DCW  @00019@
     LOFAAA    DCW  @I9E@
     LBJAAA    DCW  @333@
     LHIAAA    DCW  @;@
               END  START
