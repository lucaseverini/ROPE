 BOOTSTRAP FOR CLEAR ,008015,022026,030040/019,001L020100   ,047054,061068,072072)0810811022                      1
 CLEAR OR BOOTSTRAP  ,008047/047046       /000H025B022100  4/061046,054061,068072,0010401040                      2
0                                                                                                         PAGE    1
0 SEQ PG LIN  LABEL  OP    OPERANDS                                            SFX CT  LOCN  INSTRUCTION TYPE  CARD A-ADDR  B-ADDR

  101         ****************************************************************
  102         ***  TEST.S
  103         ***  GENERATED BY SMALL-C COMPILER ON 28-MAR-2015 7:25:43 PM
  104         ****************************************************************
  105         ****************************************************************
  106         *
  107         READ   EQU   001                * READ AREA                              0001
  108         PUNCH  EQU   101                * PUNCH AREA                             0101
  109         PRINT  EQU   201                * PRINT AREA                             0201
  110         *
  111         PRCPOS DCW   000                * CHAR POSITION IN PRINT AREA         3  0335                       3
  112         PUCPOS DCW   000                * CHAR POSITION IN PUNCH AREA         3  0338                       3
  113         PUNSIZ DCW   @080@              * SIZE OF PUNCH AREA                  3  0341                       3
  114         PRTSIZ DCW   @132@              * SIZE OF PRINT AREA                  3  0344                       3
  115         EOS    DCW   @'@                * END OF STRING CHAR                  1  0345                       3
  116         EOL    DCW   @;@                * END OF LINE CHAR                    1  0346                       3
  117         *
  118                ORG   87                                                                 0087
  119         X1     DSA   0                  * INDEX REGISTER 1                    3  0089  000                  4   000
  120                ORG   92                                                                 0092
  121         X2     DSA   0                  * INDEX REGISTER 2                    3  0094  000                  5   000
  122                ORG   97                                                                 0097
  123         X3     DSA   0                  * INDEX REGISTER 3                    3  0099  000                  6   000
  124         *
  125         * I NEED A SINGLE DIGIT FLAG - SHOULD I REPLACE THIS WITH A DA?
  126         RF     EQU   340                                                         0340
  127         *
  128         ****************************************************************
  129         *
  130         * GLOBAL/STATIC DATA AND VARIABLES
  131         *
  132                ORG   600                * SEED                                          0600
  133                DCW   @69105@                                                  5  0604                       7
  134         *
  135                ORG   605                * CONST_STR_LITERAL-1                           0605
  136                DCW   @0@                                                      1  0605                       7
  137                DCW   @1@                                                      1  0606                       7
  138                DCW   @2@                                                      1  0607                       7
  139                DCW   @3@                                                      1  0608                       7
  140                DCW   @4@                                                      1  0609                       7
  141                DCW   @5@                                                      1  0610                       7
  142                DCW   @6@                                                      1  0611                       8
  143                DCW   @7@                                                      1  0612                       8
  144                DCW   @8@                                                      1  0613                       8
  145                DCW   @9@                                                      1  0614                       8
  146                DCW   @A@                                                      1  0615                       8
  147                DCW   @B@                                                      1  0616                       8
1                                                                                                         PAGE    2
0 SEQ PG LIN  LABEL  OP    OPERANDS                                            SFX CT  LOCN  INSTRUCTION TYPE  CARD A-ADDR  B-ADDR

  148                DCW   @C@                                                      1  0617                       8
  149                DCW   @D@                                                      1  0618                       9
  150                DCW   @E@                                                      1  0619                       9
  151                DCW   @F@                                                      1  0620                       9
  152                DCW   @'@                                                      1  0621                       9
  153         *
  154                ORG   622                * __PUTCHAR_POS                                 0622
  155                DCW   @201@                                                    3  0624                       9
  156         *
  157                ORG   625                * __PUTCHAR_LAST                                0625
  158                DCW   @200@                                                    3  0627                       9
  159         *
  160                ORG   628                * __GETCHARPOSITION                             0628
  161                DCW   @081@                                                    3  0630                       9
  162         *
  163                ORG   631                * C1                                            0631
  164                DCW   @634@                                                    3  0633                      10
  165         *
  166                ORG   634                * CONST_STR_LITERAL-8                           0634
  167                DCW   @1@                                                      1  0634                      10
  168                DCW   @2@                                                      1  0635                      10
  169                DCW   @3@                                                      1  0636                      10
  170                DCW   @4@                                                      1  0637                      10
  171                DCW   @'@                                                      1  0638                      10
  172         *
  173                ORG   639                * A1                                            0639
  174                DCW   @00000@                                                  5  0643                      10
  175                DCW   @00000@                                                  5  0648                      11
  176                DCW   @00000@                                                  5  0653                      11
  177                DCW   @00000@                                                  5  0658                      11
  178                DCW   @00000@                                                  5  0663                      11
  179                DCW   @00000@                                                  5  0668                      11
  180                DCW   @00000@                                                  5  0673                      11
  181                DCW   @00000@                                                  5  0678                      11
  182                DCW   @00000@                                                  5  0683                      12
  183                DCW   @00000@                                                  5  0688                      12
  184         *
  185                ORG   689                * D1                                            0689
  186                DCW   @692@                                                    3  0691                      12
  187         *
  188                ORG   692                * CONST_STR_LITERAL-9                           0692
  189                DCW   @5@                                                      1  0692                      12
  190                DCW   @6@                                                      1  0693                      12
  191                DCW   @7@                                                      1  0694                      12
  192                DCW   @8@                                                      1  0695                      12
  193                DCW   @'@                                                      1  0696                      13
  194         *
  195                ORG   697                * B1                                            0697
  196                DCW   @'@                                                      1  0697                      13
  197                DCW   @'@                                                      1  0698                      13
1                                                                                                         PAGE    3
0 SEQ PG LIN  LABEL  OP    OPERANDS                                            SFX CT  LOCN  INSTRUCTION TYPE  CARD A-ADDR  B-ADDR

  198                DCW   @'@                                                      1  0699                      13
  199                DCW   @'@                                                      1  0700                      13
  200                DCW   @'@                                                      1  0701                      13
  201                DCW   @'@                                                      1  0702                      13
  202                DCW   @'@                                                      1  0703                      14
  203                DCW   @'@                                                      1  0704                      14
  204                DCW   @'@                                                      1  0705                      14
  205                DCW   @'@                                                      1  0706                      14
  206         *
  207                ORG   707                * E1                                            0707
  208                DCW   @710@                                                    3  0709                      14
  209         *
  210                ORG   710                * CONST_STR_LITERAL-10                          0710
  211                DCW   @9@                                                      1  0710                      14
  212                DCW   @9@                                                      1  0711                      14
  213                DCW   @9@                                                      1  0712                      15
  214                DCW   @9@                                                      1  0713                      15
  215                DCW   @'@                                                      1  0714                      15
  216         *
  217                ORG   715                * F1                                            0715
  218                DCW   @00000@                                                  5  0719                      15
  219         *
  220                ORG   720                * G1                                            0720
  221                DCW   @723@                                                    3  0722                      15
  222         *
  223                ORG   723                * CONST_STR_LITERAL-11                          0723
  224                DCW   @A@                                                      1  0723                      15
  225                DCW   @A@                                                      1  0724                      15
  226                DCW   @A@                                                      1  0725                      16
  227                DCW   @A@                                                      1  0726                      16
  228                DCW   @'@                                                      1  0727                      16
  229         *
  230                ORG   728                * H1                                            0728
  231                DCW   @'@                                                      1  0728                      16
  232         *
  233                ORG   729                * I1                                            0729
  234                DCW   @732@                                                    3  0731                      16
  235         *
  236                ORG   732                * CONST_STR_LITERAL-12                          0732
  237                DCW   @B@                                                      1  0732                      16
  238                DCW   @B@                                                      1  0733                      16
  239                DCW   @B@                                                      1  0734                      17
  240                DCW   @B@                                                      1  0735                      17
  241                DCW   @'@                                                      1  0736                      17
  242         *
  243                ORG   737                * P1                                            0737
  244                DCW   @000@                                                    3  0739                      17
  245         *
  246                ORG   740                * Q1                                            0740
  247                DCW   @743@                                                    3  0742                      17
1                                                                                                         PAGE    4
0 SEQ PG LIN  LABEL  OP    OPERANDS                                            SFX CT  LOCN  INSTRUCTION TYPE  CARD A-ADDR  B-ADDR

  248         *
  249                ORG   743                * CONST_STR_LITERAL-13                          0743
  250                DCW   @C@                                                      1  0743                      17
  251                DCW   @C@                                                      1  0744                      17
  252                DCW   @C@                                                      1  0745                      18
  253                DCW   @C@                                                      1  0746                      18
  254                DCW   @'@                                                      1  0747                      18
  255         *
  256                ORG   748                * R1                                            0748
  257                DCW   @000@                                                    3  0750                      18
  258         *
  259                ORG   751                * S1                                            0751
  260                DCW   @754@                                                    3  0753                      18
  261         *
  262                ORG   754                * CONST_STR_LITERAL-14                          0754
  263                DCW   @Z@                                                      1  0754                      18
  264                DCW   @Z@                                                      1  0755                      18
  265                DCW   @Z@                                                      1  0756                      19
  266                DCW   @Z@                                                      1  0757                      19
  267                DCW   @'@                                                      1  0758                      19
  268         *
  269                ORG   759                * CONST_STR_LITERAL-15                          0759
  270                DCW   @C@                                                      1  0759                      19
  271                DCW   @1@                                                      1  0760                      19
  272                DCW   @:@                                                      1  0761                      19
  273                DCW   @ @                                                      1  0762                      19
  274                DCW   @%@                                                      1  0763                      20
  275                DCW   @D@                                                      1  0764                      20
  276                DCW   @;@                                                      1  0765                      20
  277                DCW   @'@                                                      1  0766                      20
  278         *
  279                ORG   767                * CONST_STR_LITERAL-16                          0767
  280                DCW   @A@                                                      1  0767                      20
  281                DCW   @1@                                                      1  0768                      20
  282                DCW   @:@                                                      1  0769                      20
  283                DCW   @ @                                                      1  0770                      21
  284                DCW   @%@                                                      1  0771                      21
  285                DCW   @D@                                                      1  0772                      21
  286                DCW   @;@                                                      1  0773                      21
  287                DCW   @'@                                                      1  0774                      21
  288         *
  289                ORG   775                * CONST_STR_LITERAL-17                          0775
  290                DCW   @P@                                                      1  0775                      21
  291                DCW   @1@                                                      1  0776                      21
  292                DCW   @:@                                                      1  0777                      22
  293                DCW   @ @                                                      1  0778                      22
  294                DCW   @%@                                                      1  0779                      22
  295                DCW   @D@                                                      1  0780                      22
  296                DCW   @;@                                                      1  0781                      22
  297                DCW   @'@                                                      1  0782                      22
1                                                                                                         PAGE    5
0 SEQ PG LIN  LABEL  OP    OPERANDS                                            SFX CT  LOCN  INSTRUCTION TYPE  CARD A-ADDR  B-ADDR

  298         *
  299                ORG   783                * CONST_STR_LITERAL-18                          0783
  300                DCW   @R@                                                      1  0783                      22
  301                DCW   @1@                                                      1  0784                      23
  302                DCW   @:@                                                      1  0785                      23
  303                DCW   @ @                                                      1  0786                      23
  304                DCW   @%@                                                      1  0787                      23
  305                DCW   @D@                                                      1  0788                      23
  306                DCW   @;@                                                      1  0789                      23
  307                DCW   @'@                                                      1  0790                      23
  308         *
  309                ORG   791                * CONST_STR_LITERAL-19                          0791
  310                DCW   @D@                                                      1  0791                      24
  311                DCW   @:@                                                      1  0792                      24
  312                DCW   @ @                                                      1  0793                      24
  313                DCW   @%@                                                      1  0794                      24
  314                DCW   @D@                                                      1  0795                      24
  315                DCW   @;@                                                      1  0796                      24
  316                DCW   @'@                                                      1  0797                      24
  317         *
  318                ORG   798                * CONST_STR_LITERAL-20                          0798
  319                DCW   @*@                                                      1  0798                      25
  320                DCW   @D@                                                      1  0799                      25
  321                DCW   @:@                                                      1  0800                      25
  322                DCW   @ @                                                      1  0801                      25
  323                DCW   @%@                                                      1  0802                      25
  324                DCW   @D@                                                      1  0803                      25
  325                DCW   @;@                                                      1  0804                      25
  326                DCW   @'@                                                      1  0805                      26
  327         *
  328         * START POSITION OF PROGRAM CODE
  329                ORG   806                                                                0806
  330         START  NOP                      * PROGRAM STARTS HERE                 1  0806  N                   26
  331         *
  332         * SETTING OF STACK POINTER (STACK GROWS UPWARD)
  333                SBR   X2,399             * X2 IS THE STACK POINTER             7  0807  H 094 399           26   094     399
  334                MCW   X2,X3              * COPY X2 TO X3                       7  0814  M 094 099           26   094     099
  335         *
  336                B     LUDAAA             * JUMP TO FUNCTION MAIN               4  0821  B D31               26  3431
  337                H                        * PROGRAM EXECUTED. SYSTEM HALTED     1  0825  .                   26
  338         *
  339         ***************************************************************************
  340         * FUNCTION : ITOA
  341         ***************************************************************************
  342         LYAAAA SBR   3&X3               * SAVE RETURN ADDRESS IN REGISTER     4  0826  H 0?3               26   003+3
  343                SW    1&X3               * SET THE WM                          4  0830  , 0?1               27   001+3
  344                CW    2&X3               * CLEAN WM                            4  0834  ) 0?2               27   002+3
  345                CW    3&X3               * CLEAN WM                            4  0838  ) 0?3               27   003+3
  346         *
  347         ***************************************
1                                                                                                         PAGE    6
0 SEQ PG LIN  LABEL  OP    OPERANDS                                            SFX CT  LOCN  INSTRUCTION TYPE  CARD A-ADDR  B-ADDR

  348         * BEGINBLOCK [BLOCK LZAAAA:NULL]
  349                LCA   LWDAAA,9&X3        * LOAD *CHAR 605 INTO MEMORY 9&X3     7  0842  L 23L 0?9           27  8233     009+3
  350                LCA   LXDAAA,14&X3       * LOAD INT 1 INTO MEMORY 14&X3        7  0849  L 23Q 0A4           27  8238     014+3
  351                MA    LYDAAA,X2          * RESERVE 14 BYTES OF SPACE ON ST     7  0856  # 24K 094           27  8242     094
  352         * ASSIGNMENT (START = STR)
  353         * PARAMETER VARIABLE (STR : 15992+X3)
  354         * PUSH (15992+X3:3)
  355                MA    LZDAAA,X2          * ADD 3 TO X2                         7  0863  # 24Q 094           28  8248     094
  356                LCA   15992&X3,0&X2      * LOAD DATA 15992&X3 INTO STACK       7  0870  L IIB 0!0           28 15992+3   000+2
  357         * PUSH (LAEAAA:3)
  358                MA    LZDAAA,X2          * ADD 3 TO X2                         7  0877  # 24Q 094           28  8248     094
  359                LCA   LAEAAA,0&X2        * LOAD DATA 006 INTO STACK            7  0884  L 10M 0!0           28  8104     000+2
  360                MA    X3,0&X2                                                  7  0891  # 099 0!0           28   099     000+2
  361         * POP (X1:3)
  362                LCA   0&X2,X1            * LOAD DATA IN STACK INTO MEMORY      7  0898  L 0!0 089           29   000+2   089
  363                MA    LBEAAA,X2          * ADD -3 TO X2                        7  0905  # 10P 094           29  8107     094
  364         * POP (0+X1:3)
  365                LCA   0&X2,0&X1          * LOAD DATA IN STACK INTO MEMORY      7  0912  L 0!0 0'0           29   000+2   000+1
  366                MA    LBEAAA,X2          * ADD -3 TO X2                        7  0919  # 10P 094           29  8107     094
  367         * END ASSIGNMENT (START = STR)
  368         * IF [IF ((VALUE < 0) THEN [BLOCK LABAAA:LZAAAA] ELSE [IF ((VALUE == 0) THE
  369         * LESS (<) (VALUE < 0)
  370         * PARAMETER VARIABLE (VALUE : 15997+X3)
  371         * PUSH (15997+X3:5)
  372                MA    LCEAAA,X2          * ADD 5 TO X2                         7  0926  # 11! 094           29  8110     094
  373                LCA   15997&X3,0&X2      * LOAD DATA 15997&X3 INTO STACK       7  0933  L IIG 0!0           30 15997+3   000+2
  374                B     LDEAAA             * JUMP TO SNIPPET CLEAN_NUMBER        4  0940  B E1V               30  7515
  375         * CONSTANT (0 : LFEAAA)
  376         * PUSH (LFEAAA:5)
  377                MA    LCEAAA,X2          * ADD 5 TO X2                         7  0944  # 11! 094           30  8110     094
  378                LCA   LFEAAA,0&X2        * LOAD DATA 00000 INTO STACK          7  0951  L 12N 0!0           30  8125     000+2
  379                B     LDEAAA             * JUMP TO SNIPPET CLEAN_NUMBER        4  0958  B E1V               30  7515
  380                C     0&X2,15995&X2      * COMPARE                             7  0962  C 0!0 IRE           30   000+2 15995+2
  381         * POP (5)
  382                MA    LIEAAA,X2          * ADD -5 TO X2                        7  0969  # 15J 094           31  8151     094
  383                MCW   LFEAAA,0&X2        * SET STACK LOCATION TO 0             7  0976  M 12N 0!0           31  8125     000+2
  384                BL    LGEAAA             * JUMP IF LESS                        5  0983  B 992 T             31   992
  385                B     LHEAAA             * JUMP TO END                         4  0988  B 999               31   999
  386         LGEAAA MCW   LXDAAA,0&X2        * LESS: SET STACK LOCATION TO 1       7  0992  M 23Q 0!0           31  8238     000+2
  387         LHEAAA NOP                      * END OF LESS                         1  0999  N                   31
  388                MCS   0&X2,0&X2          * CLEAR WM                            7  1000  Z 0!0 0!0           31   000+2   000+2
  389         * POP (5)
  390                MA    LIEAAA,X2          * ADD -5 TO X2                        7  1007  # 15J 094           32  8151     094
  391                BCE   LDBAAA,5&X2,       * JUMP WHEN FALSE                     8  1014  B S04 0!5           32  1204     005+2
  392         *
  393         ***************************************
  394         * BEGINBLOCK [BLOCK LABAAA:LZAAAA]
  395         * ASSIGNMENT ((*(STR++)) = '-')
  396         * CONSTANT ('-' : @-@)
  397         * PUSH (@-@:1)
1                                                                                                         PAGE    7
0 SEQ PG LIN  LABEL  OP    OPERANDS                                            SFX CT  LOCN  INSTRUCTION TYPE  CARD A-ADDR  B-ADDR

  398                MA    LKEAAA,X2          * ADD 1 TO X2                         7  1022  # 16P 094           32  8167     094
  399                LCA   @-@,0&X2           * LOAD DATA - INTO STACK              7  1029  L 25L 0!0           32  8253     000+2
  400         * POSTINCREMENT (STR++)
  401         * PUSH (LLEAAA:3)
  402                MA    LZDAAA,X2          * ADD 3 TO X2                         7  1036  # 24Q 094           32  8248     094
  403                LCA   LLEAAA,0&X2        * LOAD DATA I9B INTO STACK            7  1043  L 17L 0!0           33  8173     000+2
  404                MA    X3,0&X2                                                  7  1050  # 099 0!0           33   099     000+2
  405         * POP (X1:3)
  406                LCA   0&X2,X1            * LOAD DATA IN STACK INTO MEMORY      7  1057  L 0!0 089           33   000+2   089
  407                MA    LBEAAA,X2          * ADD -3 TO X2                        7  1064  # 10P 094           33  8107     094
  408         * PUSH (0+X1:3)
  409                MA    LZDAAA,X2          * ADD 3 TO X2                         7  1071  # 24Q 094           33  8248     094
  410                LCA   0&X1,0&X2          * LOAD DATA 0&X1 INTO STACK           7  1078  L 0'0 0!0           34   000+1   000+2
  411                MA    LKEAAA,0&X1        * POSTINCREMENT POINTER POINTED B     7  1085  # 16P 0'0           34  8167     000+1
  412         * POP (X1:3)
  413                LCA   0&X2,X1            * LOAD DATA IN STACK INTO MEMORY      7  1092  L 0!0 089           34   000+2   089
  414                MA    LBEAAA,X2          * ADD -3 TO X2                        7  1099  # 10P 094           34  8107     094
  415         * POP (0+X1:1)
  416                LCA   0&X2,0&X1          * LOAD DATA IN STACK INTO MEMORY      7  1106  L 0!0 0'0           34   000+2   000+1
  417                MA    LMEAAA,X2          * ADD -1 TO X2                        7  1113  # 18L 094           35  8183     094
  418         * END ASSIGNMENT ((*(STR++)) = '-')
  419         * ASSIGNMENT (VALUE = (-VALUE))
  420         * NEGATE (-VALUE)
  421         * PARAMETER VARIABLE (VALUE : 15997+X3)
  422         * PUSH (15997+X3:5)
  423                MA    LCEAAA,X2          * ADD 5 TO X2                         7  1120  # 11! 094           35  8110     094
  424                LCA   15997&X3,0&X2      * LOAD DATA 15997&X3 INTO STACK       7  1127  L IIG 0!0           35 15997+3   000+2
  425                ZS    0&X2                                                     4  1134  ! 0!0               35   000+2
  426                B     LDEAAA             * JUMP TO SNIPPET CLEAN_NUMBER        4  1138  B E1V               35  7515
  427         * PUSH (LBEAAA:3)
  428                MA    LZDAAA,X2          * ADD 3 TO X2                         7  1142  # 24Q 094           35  8248     094
  429                LCA   LBEAAA,0&X2        * LOAD DATA I9G INTO STACK            7  1149  L 10P 0!0           36  8107     000+2
  430                MA    X3,0&X2                                                  7  1156  # 099 0!0           36   099     000+2
  431         * POP (X1:3)
  432                LCA   0&X2,X1            * LOAD DATA IN STACK INTO MEMORY      7  1163  L 0!0 089           36   000+2   089
  433                MA    LBEAAA,X2          * ADD -3 TO X2                        7  1170  # 10P 094           36  8107     094
  434         * POP (0+X1:5)
  435                LCA   0&X2,0&X1          * LOAD DATA IN STACK INTO MEMORY      7  1177  L 0!0 0'0           36   000+2   000+1
  436                MA    LIEAAA,X2          * ADD -5 TO X2                        7  1184  # 15J 094           37  8151     094
  437         * END ASSIGNMENT (VALUE = (-VALUE))
  438         LABAAA NOP                      * RETURN                              1  1191  N                   37
  439                BCE   LZAAAA,RF,R        * JUMP BACK TO CALLER                 8  1192  B K87 340 R         37  2287     340
  440         * ENDBLOCK [BLOCK LABAAA:LZAAAA]
  441         ***************************************
  442         *
  443                B     LEBAAA             * JUMP WHEN TRUE                      4  1200  B U83               37  1483
  444         LDBAAA NOP                      * EXECUTED WHEN FALSE                 1  1204  N                   37
  445         * IF [IF ((VALUE == 0) THEN [BLOCK LBBAAA:LZAAAA]]
  446         * EQUAL (==) (VALUE == 0)
  447         * PARAMETER VARIABLE (VALUE : 15997+X3)
1                                                                                                         PAGE    8
0 SEQ PG LIN  LABEL  OP    OPERANDS                                            SFX CT  LOCN  INSTRUCTION TYPE  CARD A-ADDR  B-ADDR

  448         * PUSH (15997+X3:5)
  449                MA    LCEAAA,X2          * ADD 5 TO X2                         7  1205  # 11! 094           37  8110     094
  450                LCA   15997&X3,0&X2      * LOAD DATA 15997&X3 INTO STACK       7  1212  L IIG 0!0           37 15997+3   000+2
  451                B     LDEAAA             * JUMP TO SNIPPET CLEAN_NUMBER        4  1219  B E1V               38  7515
  452         * CONSTANT (0 : LFEAAA)
  453         * PUSH (LFEAAA:5)
  454                MA    LCEAAA,X2          * ADD 5 TO X2                         7  1223  # 11! 094           38  8110     094
  455                LCA   LFEAAA,0&X2        * LOAD DATA 00000 INTO STACK          7  1230  L 12N 0!0           38  8125     000+2
  456                B     LDEAAA             * JUMP TO SNIPPET CLEAN_NUMBER        4  1237  B E1V               38  7515
  457                C     0&X2,15995&X2      * COMPARE                             7  1241  C 0!0 IRE           38   000+2 15995+2
  458         * POP (5)
  459                MA    LIEAAA,X2          * ADD -5 TO X2                        7  1248  # 15J 094           38  8151     094
  460         * POP (5)
  461                MA    LIEAAA,X2          * ADD -5 TO X2                        7  1255  # 15J 094           39  8151     094
  462         * PUSH (LFEAAA:5)
  463                MA    LCEAAA,X2          * ADD 5 TO X2                         7  1262  # 11! 094           39  8110     094
  464                LCA   LFEAAA,0&X2        * LOAD DATA 00000 INTO STACK          7  1269  L 12N 0!0           39  8125     000+2
  465                BE    LNEAAA             * JUMP IF EQUAL                       5  1276  B S85 S             39  1285
  466                B     LOEAAA             * JUMP TO END                         4  1281  B S92               39  1292
  467         LNEAAA MCW   LXDAAA,0&X2        * EQUAL                               7  1285  M 23Q 0!0           39  8238     000+2
  468         LOEAAA NOP                      * END OF EQUAL                        1  1292  N                   39
  469                MCS   0&X2,0&X2          * CLEAR WM                            7  1293  Z 0!0 0!0           40   000+2   000+2
  470         * POP (5)
  471                MA    LIEAAA,X2          * ADD -5 TO X2                        7  1300  # 15J 094           40  8151     094
  472                BCE   LCBAAA,5&X2,       * JUMP WHEN FALSE                     8  1307  B U82 0!5           40  1482     005+2
  473         *
  474         ***************************************
  475         * BEGINBLOCK [BLOCK LBBAAA:LZAAAA]
  476         * ASSIGNMENT ((STR[0]) = '0')
  477         * CONSTANT ('0' : @0@)
  478         * PUSH (@0@:1)
  479                MA    LKEAAA,X2          * ADD 1 TO X2                         7  1315  # 16P 094           40  8167     094
  480                LCA   @0@,0&X2           * LOAD DATA 0 INTO STACK              7  1322  L 25M 0!0           40  8254     000+2
  481         * SUBSCRIPT (STR[0])
  482         * PARAMETER VARIABLE (STR : 15992+X3)
  483         * PUSH (15992+X3:3)
  484                MA    LZDAAA,X2          * ADD 3 TO X2                         7  1329  # 24Q 094           41  8248     094
  485                LCA   15992&X3,0&X2      * LOAD DATA 15992&X3 INTO STACK       7  1336  L IIB 0!0           41 15992+3   000+2
  486         * END SUBSCRIPT (STR[0])
  487         * POP (X1:3)
  488                LCA   0&X2,X1            * LOAD DATA IN STACK INTO MEMORY      7  1343  L 0!0 089           41   000+2   089
  489                MA    LBEAAA,X2          * ADD -3 TO X2                        7  1350  # 10P 094           41  8107     094
  490         * POP (0+X1:1)
  491                LCA   0&X2,0&X1          * LOAD DATA IN STACK INTO MEMORY      7  1357  L 0!0 0'0           41   000+2   000+1
  492                MA    LMEAAA,X2          * ADD -1 TO X2                        7  1364  # 18L 094           42  8183     094
  493         * END ASSIGNMENT ((STR[0]) = '0')
  494         * ASSIGNMENT ((STR[1]) = '\0')
  495         * CONSTANT ('\0' : EOS)
  496         * PUSH (EOS:1)
  497                MA    LKEAAA,X2          * ADD 1 TO X2                         7  1371  # 16P 094           42  8167     094
1                                                                                                         PAGE    9
0 SEQ PG LIN  LABEL  OP    OPERANDS                                            SFX CT  LOCN  INSTRUCTION TYPE  CARD A-ADDR  B-ADDR

  498                LCA   EOS,0&X2           * LOAD DATA EOS INTO STACK            7  1378  L 345 0!0           42   345     000+2
  499         * SUBSCRIPT (STR[1])
  500         * PARAMETER VARIABLE (STR : 15992+X3)
  501         * PUSH (15992+X3:3)
  502                MA    LZDAAA,X2          * ADD 3 TO X2                         7  1385  # 24Q 094           42  8248     094
  503                LCA   15992&X3,0&X2      * LOAD DATA 15992&X3 INTO STACK       7  1392  L IIB 0!0           42 15992+3   000+2
  504                A     LXDAAA,0&X2        * ADD OFFSET 1 TO POINT ELEMENT 1     7  1399  A 23Q 0!0           43  8238     000+2
  505         * END SUBSCRIPT (STR[1])
  506         * POP (X1:3)
  507                LCA   0&X2,X1            * LOAD DATA IN STACK INTO MEMORY      7  1406  L 0!0 089           43   000+2   089
  508                MA    LBEAAA,X2          * ADD -3 TO X2                        7  1413  # 10P 094           43  8107     094
  509         * POP (0+X1:1)
  510                LCA   0&X2,0&X1          * LOAD DATA IN STACK INTO MEMORY      7  1420  L 0!0 0'0           43   000+2   000+1
  511                MA    LMEAAA,X2          * ADD -1 TO X2                        7  1427  # 18L 094           43  8183     094
  512         * END ASSIGNMENT ((STR[1]) = '\0')
  513         * LOCAL VARIABLE (START : 6+X3)
  514         * PUSH (6+X3:3)
  515                MA    LZDAAA,X2          * ADD 3 TO X2                         7  1434  # 24Q 094           44  8248     094
  516                LCA   6&X3,0&X2          * LOAD DATA 6&X3 INTO STACK           7  1441  L 0?6 0!0           44   006+3   000+2
  517         * POP (15984+X3:3)
  518                LCA   0&X2,15984&X3      * LOAD DATA IN STACK INTO MEMORY      7  1448  L 0!0 IHD           44   000+2 15984+3
  519                MA    LBEAAA,X2          * ADD -3 TO X2                        7  1455  # 10P 094           44  8107     094
  520         * SET THE RETURN FLAG, SO WE KNOW DO DEALLOCATE OUR STACK
  521                MCW   @R@,RF             * PUT R INTO LOCATION RF              7  1462  M 25N 340           44  8255     340
  522                B     LBBAAA             * JUMP BACK TO CALLER                 4  1469  B U73               44  1473
  523         LBBAAA NOP                      * RETURN                              1  1473  N                   45
  524                BCE   LZAAAA,RF,R        * JUMP BACK TO CALLER                 8  1474  B K87 340 R         45  2287     340
  525         * ENDBLOCK [BLOCK LBBAAA:LZAAAA]
  526         ***************************************
  527         *
  528         LCBAAA NOP                      * EXECUTED WHEN FALSE                 1  1482  N                   45
  529         LEBAAA NOP                      * EXECUTED WHEN TRUE                  1  1483  N                   45
  530         * WHILE [WHILE ((EXP <= (VALUE / BASE))) [BLOCK LFBAAA:LZAAAA] TOP:LGBAAA B
  531         LGBAAA NOP                      * TOP OF THE LOOP                     1  1484  N                   45
  532         * LESSOREQUAL (<=) (EXP <= (VALUE / BASE))
  533         * LOCAL VARIABLE (EXP : 14+X3)
  534         * PUSH (14+X3:5)
  535                MA    LCEAAA,X2          * ADD 5 TO X2                         7  1485  # 11! 094           45  8110     094
  536                LCA   14&X3,0&X2         * LOAD DATA 14&X3 INTO STACK          7  1492  L 0A4 0!0           45   014+3   000+2
  537                B     LDEAAA             * JUMP TO SNIPPET CLEAN_NUMBER        4  1499  B E1V               46  7515
  538         * DIVIDE (VALUE / BASE)
  539         * PARAMETER VARIABLE (BASE : 15989+X3)
  540         * PUSH (15989+X3:5)
  541                MA    LCEAAA,X2          * ADD 5 TO X2                         7  1503  # 11! 094           46  8110     094
  542                LCA   15989&X3,0&X2      * LOAD DATA 15989&X3 INTO STACK       7  1510  L IHI 0!0           46 15989+3   000+2
  543         * PARAMETER VARIABLE (VALUE : 15997+X3)
  544         * PUSH (15997+X3:5)
  545                MA    LCEAAA,X2          * ADD 5 TO X2                         7  1517  # 11! 094           46  8110     094
  546                LCA   15997&X3,0&X2      * LOAD DATA 15997&X3 INTO STACK       7  1524  L IIG 0!0           46 15997+3   000+2
  547                B     LQEAAA             * JUMP TO SNIPPET SNIP_DIV            4  1531  B E4W               46  7546
1                                                                                                         PAGE   10
0 SEQ PG LIN  LABEL  OP    OPERANDS                                            SFX CT  LOCN  INSTRUCTION TYPE  CARD A-ADDR  B-ADDR

  548                MCW   0&X2,15995&X2      * COPY STACK LOCATION TO STACK LO     7  1535  M 0!0 IRE           47   000+2 15995+2
  549         * POP (5)
  550                MA    LIEAAA,X2          * ADD -5 TO X2                        7  1542  # 15J 094           47  8151     094
  551                B     LDEAAA             * JUMP TO SNIPPET CLEAN_NUMBER        4  1549  B E1V               47  7515
  552                C     0&X2,15995&X2      * COMPARE                             7  1553  C 0!0 IRE           47   000+2 15995+2
  553         * POP (5)
  554                MA    LIEAAA,X2          * ADD -5 TO X2                        7  1560  # 15J 094           47  8151     094
  555                MCW   LXDAAA,0&X2        * SET STACK LOCATION TO 1             7  1567  M 23Q 0!0           47  8238     000+2
  556                BH    LWEAAA             * JUMP IF LESS OR EQUAL               5  1574  B V83 U             48  1583
  557                B     LXEAAA             * JUMP TO END                         4  1579  B V90               48  1590
  558         LWEAAA MCW   LFEAAA,0&X2        * LESS OR EQUAL: SET STACK LOCATI     7  1583  M 12N 0!0           48  8125     000+2
  559         LXEAAA NOP                      * END OF LESSOREQUAL                  1  1590  N                   48
  560                MCS   0&X2,0&X2          * CLEAR WM                            7  1591  Z 0!0 0!0           48   000+2   000+2
  561         * POP (5)
  562                MA    LIEAAA,X2          * ADD -5 TO X2                        7  1598  # 15J 094           48  8151     094
  563                BCE   LHBAAA,5&X2,       * JUMP TO BOTTOM                      8  1605  B X28 0!5           48  1728     005+2
  564         *
  565         ***************************************
  566         * BEGINBLOCK [BLOCK LFBAAA:LZAAAA]
  567         * ASSIGNMENT (EXP = (EXP * BASE))
  568         * MULTIPLY (EXP * BASE)
  569         * LOCAL VARIABLE (EXP : 14+X3)
  570         * PUSH (14+X3:5)
  571                MA    LCEAAA,X2          * ADD 5 TO X2                         7  1613  # 11! 094           49  8110     094
  572                LCA   14&X3,0&X2         * LOAD DATA 14&X3 INTO STACK          7  1620  L 0A4 0!0           49   014+3   000+2
  573         * PARAMETER VARIABLE (BASE : 15989+X3)
  574         * PUSH (15989+X3:5)
  575                MA    LCEAAA,X2          * ADD 5 TO X2                         7  1627  # 11! 094           49  8110     094
  576                LCA   15989&X3,0&X2      * LOAD DATA 15989&X3 INTO STACK       7  1634  L IHI 0!0           49 15989+3   000+2
  577                M     15995&X2,6&X2      * MULTIPLY                            7  1641  @ IRE 0!6           49 15995+2   006+2
  578                SW    2&X2                                                     4  1648  , 0!2               49   002+2
  579                LCA   6&X2,15995&X2                                            7  1652  L 0!6 IRE           50   006+2 15995+2
  580         * POP (5)
  581                MA    LIEAAA,X2          * ADD -5 TO X2                        7  1659  # 15J 094           50  8151     094
  582         * PUSH (LYDAAA:3)
  583                MA    LZDAAA,X2          * ADD 3 TO X2                         7  1666  # 24Q 094           50  8248     094
  584                LCA   LYDAAA,0&X2        * LOAD DATA 014 INTO STACK            7  1673  L 24K 0!0           50  8242     000+2
  585                MA    X3,0&X2                                                  7  1680  # 099 0!0           50   099     000+2
  586         * POP (X1:3)
  587                LCA   0&X2,X1            * LOAD DATA IN STACK INTO MEMORY      7  1687  L 0!0 089           51   000+2   089
  588                MA    LBEAAA,X2          * ADD -3 TO X2                        7  1694  # 10P 094           51  8107     094
  589         * POP (0+X1:5)
  590                LCA   0&X2,0&X1          * LOAD DATA IN STACK INTO MEMORY      7  1701  L 0!0 0'0           51   000+2   000+1
  591                MA    LIEAAA,X2          * ADD -5 TO X2                        7  1708  # 15J 094           51  8151     094
  592         * END ASSIGNMENT (EXP = (EXP * BASE))
  593         LFBAAA NOP                      * RETURN                              1  1715  N                   51
  594                BCE   LZAAAA,RF,R        * JUMP BACK TO CALLER                 8  1716  B K87 340 R         51  2287     340
  595         * ENDBLOCK [BLOCK LFBAAA:LZAAAA]
  596         ***************************************
  597         *
1                                                                                                         PAGE   11
0 SEQ PG LIN  LABEL  OP    OPERANDS                                            SFX CT  LOCN  INSTRUCTION TYPE  CARD A-ADDR  B-ADDR

  598                B     LGBAAA             * JUMP TO TOP                         4  1724  B U84               52  1484
  599         LHBAAA NOP                      * BOTTOM OF THE WHILE LOOP            1  1728  N                   52
  600         *
  601         * WHILE [WHILE (EXP) [BLOCK LIBAAA:LZAAAA] TOP:LJBAAA BOTTOM:LKBAAA]
  602         LJBAAA NOP                      * TOP OF THE LOOP                     1  1729  N                   52
  603         * LOCAL VARIABLE (EXP : 14+X3)
  604         * PUSH (14+X3:5)
  605                MA    LCEAAA,X2          * ADD 5 TO X2                         7  1730  # 11! 094           52  8110     094
  606                LCA   14&X3,0&X2         * LOAD DATA 14&X3 INTO STACK          7  1737  L 0A4 0!0           52   014+3   000+2
  607                MCS   0&X2,0&X2          * CLEAR WM                            7  1744  Z 0!0 0!0           52   000+2   000+2
  608         * POP (5)
  609                MA    LIEAAA,X2          * ADD -5 TO X2                        7  1751  # 15J 094           52  8151     094
  610                BCE   LKBAAA,5&X2,       * JUMP TO BOTTOM                      8  1758  B J91 0!5           53  2191     005+2
  611         *
  612         ***************************************
  613         * BEGINBLOCK [BLOCK LIBAAA:LZAAAA]
  614         * ASSIGNMENT ((*(STR++)) = (DIGITS[(VALUE / EXP)]))
  615         * SUBSCRIPT (DIGITS[(VALUE / EXP)])
  616         * LOCAL VARIABLE (DIGITS : 9+X3)
  617         * PUSH (9+X3:3)
  618                MA    LZDAAA,X2          * ADD 3 TO X2                         7  1766  # 24Q 094           53  8248     094
  619                LCA   9&X3,0&X2          * LOAD DATA 9&X3 INTO STACK           7  1773  L 0?9 0!0           53   009+3   000+2
  620         * DIVIDE (VALUE / EXP)
  621         * LOCAL VARIABLE (EXP : 14+X3)
  622         * PUSH (14+X3:5)
  623                MA    LCEAAA,X2          * ADD 5 TO X2                         7  1780  # 11! 094           53  8110     094
  624                LCA   14&X3,0&X2         * LOAD DATA 14&X3 INTO STACK          7  1787  L 0A4 0!0           53   014+3   000+2
  625         * PARAMETER VARIABLE (VALUE : 15997+X3)
  626         * PUSH (15997+X3:5)
  627                MA    LCEAAA,X2          * ADD 5 TO X2                         7  1794  # 11! 094           54  8110     094
  628                LCA   15997&X3,0&X2      * LOAD DATA 15997&X3 INTO STACK       7  1801  L IIG 0!0           54 15997+3   000+2
  629                B     LQEAAA             * JUMP TO SNIPPET SNIP_DIV            4  1808  B E4W               54  7546
  630                MCW   0&X2,15995&X2      * COPY STACK LOCATION TO STACK LO     7  1812  M 0!0 IRE           54   000+2 15995+2
  631         * POP (5)
  632                MA    LIEAAA,X2          * ADD -5 TO X2                        7  1819  # 15J 094           54  8151     094
  633         * PUT RAW INDEX ON THE STACK
  634         * PUSH (LXDAAA:5)
  635                MA    LCEAAA,X2          * ADD 5 TO X2                         7  1826  # 11! 094           54  8110     094
  636                LCA   LXDAAA,0&X2        * LOAD DATA 00001 INTO STACK          7  1833  L 23Q 0!0           55  8238     000+2
  637                M     15995&X2,6&X2                                            7  1840  @ IRE 0!6           55 15995+2   006+2
  638                SW    2&X2                                                     4  1847  , 0!2               55   002+2
  639                LCA   6&X2,15995&X2                                            7  1851  L 0!6 IRE           55   006+2 15995+2
  640         * POP (5)
  641                MA    LIEAAA,X2          * ADD -5 TO X2                        7  1858  # 15J 094           55  8151     094
  642         * STACK TOP IS NOW ARRAY INDEX
  643                B     LYEAAA             * JUMP TO SNIPPET NUMBER_TO_POINT     4  1865  B G2S               55  7722
  644                MA    0&X2,15997&X2                                            7  1869  # 0!0 IRG           56   000+2 15997+2
  645         * POP (3)
  646                MA    LBEAAA,X2          * ADD -3 TO X2                        7  1876  # 10P 094           56  8107     094
  647         * STACK TOP IS LOCATION IN ARRAY NOW
1                                                                                                         PAGE   12
0 SEQ PG LIN  LABEL  OP    OPERANDS                                            SFX CT  LOCN  INSTRUCTION TYPE  CARD A-ADDR  B-ADDR

  648         * END SUBSCRIPT (DIGITS[(VALUE / EXP)])
  649         * POP (X1:3)
  650                LCA   0&X2,X1            * LOAD DATA IN STACK INTO MEMORY      7  1883  L 0!0 089           56   000+2   089
  651                MA    LBEAAA,X2          * ADD -3 TO X2                        7  1890  # 10P 094           56  8107     094
  652         * PUSH (0+X1:1)
  653                MA    LKEAAA,X2          * ADD 1 TO X2                         7  1897  # 16P 094           56  8167     094
  654                LCA   0&X1,0&X2          * LOAD DATA 0&X1 INTO STACK           7  1904  L 0'0 0!0           57   000+1   000+2
  655         * POSTINCREMENT (STR++)
  656         * PUSH (LLEAAA:3)
  657                MA    LZDAAA,X2          * ADD 3 TO X2                         7  1911  # 24Q 094           57  8248     094
  658                LCA   LLEAAA,0&X2        * LOAD DATA I9B INTO STACK            7  1918  L 17L 0!0           57  8173     000+2
  659                MA    X3,0&X2                                                  7  1925  # 099 0!0           57   099     000+2
  660         * POP (X1:3)
  661                LCA   0&X2,X1            * LOAD DATA IN STACK INTO MEMORY      7  1932  L 0!0 089           57   000+2   089
  662                MA    LBEAAA,X2          * ADD -3 TO X2                        7  1939  # 10P 094           58  8107     094
  663         * PUSH (0+X1:3)
  664                MA    LZDAAA,X2          * ADD 3 TO X2                         7  1946  # 24Q 094           58  8248     094
  665                LCA   0&X1,0&X2          * LOAD DATA 0&X1 INTO STACK           7  1953  L 0'0 0!0           58   000+1   000+2
  666                MA    LKEAAA,0&X1        * POSTINCREMENT POINTER POINTED B     7  1960  # 16P 0'0           58  8167     000+1
  667         * POP (X1:3)
  668                LCA   0&X2,X1            * LOAD DATA IN STACK INTO MEMORY      7  1967  L 0!0 089           58   000+2   089
  669                MA    LBEAAA,X2          * ADD -3 TO X2                        7  1974  # 10P 094           59  8107     094
  670         * POP (0+X1:1)
  671                LCA   0&X2,0&X1          * LOAD DATA IN STACK INTO MEMORY      7  1981  L 0!0 0'0           59   000+2   000+1
  672                MA    LMEAAA,X2          * ADD -1 TO X2                        7  1988  # 18L 094           59  8183     094
  673         * END ASSIGNMENT ((*(STR++)) = (DIGITS[(VALUE / EXP)]))
  674         * ASSIGNMENT (VALUE = (VALUE % EXP))
  675         * MODULO (%) (VALUE % EXP)
  676         * LOCAL VARIABLE (EXP : 14+X3)
  677         * PUSH (14+X3:5)
  678                MA    LCEAAA,X2          * ADD 5 TO X2                         7  1995  # 11! 094           59  8110     094
  679                LCA   14&X3,0&X2         * LOAD DATA 14&X3 INTO STACK          7  2002  L 0A4 0!0           59   014+3   000+2
  680         * PARAMETER VARIABLE (VALUE : 15997+X3)
  681         * PUSH (15997+X3:5)
  682                MA    LCEAAA,X2          * ADD 5 TO X2                         7  2009  # 11! 094           60  8110     094
  683                LCA   15997&X3,0&X2      * LOAD DATA 15997&X3 INTO STACK       7  2016  L IIG 0!0           60 15997+3   000+2
  684                B     LQEAAA             * JUMP TO SNIPPET SNIP_DIV            4  2023  B E4W               60  7546
  685         * POP (5)
  686                MA    LIEAAA,X2          * ADD -5 TO X2                        7  2027  # 15J 094           60  8151     094
  687         * PUSH (LBEAAA:3)
  688                MA    LZDAAA,X2          * ADD 3 TO X2                         7  2034  # 24Q 094           60  8248     094
  689                LCA   LBEAAA,0&X2        * LOAD DATA I9G INTO STACK            7  2041  L 10P 0!0           60  8107     000+2
  690                MA    X3,0&X2                                                  7  2048  # 099 0!0           61   099     000+2
  691         * POP (X1:3)
  692                LCA   0&X2,X1            * LOAD DATA IN STACK INTO MEMORY      7  2055  L 0!0 089           61   000+2   089
  693                MA    LBEAAA,X2          * ADD -3 TO X2                        7  2062  # 10P 094           61  8107     094
  694         * POP (0+X1:5)
  695                LCA   0&X2,0&X1          * LOAD DATA IN STACK INTO MEMORY      7  2069  L 0!0 0'0           61   000+2   000+1
  696                MA    LIEAAA,X2          * ADD -5 TO X2                        7  2076  # 15J 094           61  8151     094
  697         * END ASSIGNMENT (VALUE = (VALUE % EXP))
1                                                                                                         PAGE   13
0 SEQ PG LIN  LABEL  OP    OPERANDS                                            SFX CT  LOCN  INSTRUCTION TYPE  CARD A-ADDR  B-ADDR

  698         * ASSIGNMENT (EXP = (EXP / BASE))
  699         * DIVIDE (EXP / BASE)
  700         * PARAMETER VARIABLE (BASE : 15989+X3)
  701         * PUSH (15989+X3:5)
  702                MA    LCEAAA,X2          * ADD 5 TO X2                         7  2083  # 11! 094           62  8110     094
  703                LCA   15989&X3,0&X2      * LOAD DATA 15989&X3 INTO STACK       7  2090  L IHI 0!0           62 15989+3   000+2
  704         * LOCAL VARIABLE (EXP : 14+X3)
  705         * PUSH (14+X3:5)
  706                MA    LCEAAA,X2          * ADD 5 TO X2                         7  2097  # 11! 094           62  8110     094
  707                LCA   14&X3,0&X2         * LOAD DATA 14&X3 INTO STACK          7  2104  L 0A4 0!0           62   014+3   000+2
  708                B     LQEAAA             * JUMP TO SNIPPET SNIP_DIV            4  2111  B E4W               62  7546
  709                MCW   0&X2,15995&X2      * COPY STACK LOCATION TO STACK LO     7  2115  M 0!0 IRE           62   000+2 15995+2
  710         * POP (5)
  711                MA    LIEAAA,X2          * ADD -5 TO X2                        7  2122  # 15J 094           63  8151     094
  712         * PUSH (LYDAAA:3)
  713                MA    LZDAAA,X2          * ADD 3 TO X2                         7  2129  # 24Q 094           63  8248     094
  714                LCA   LYDAAA,0&X2        * LOAD DATA 014 INTO STACK            7  2136  L 24K 0!0           63  8242     000+2
  715                MA    X3,0&X2                                                  7  2143  # 099 0!0           63   099     000+2
  716         * POP (X1:3)
  717                LCA   0&X2,X1            * LOAD DATA IN STACK INTO MEMORY      7  2150  L 0!0 089           63   000+2   089
  718                MA    LBEAAA,X2          * ADD -3 TO X2                        7  2157  # 10P 094           64  8107     094
  719         * POP (0+X1:5)
  720                LCA   0&X2,0&X1          * LOAD DATA IN STACK INTO MEMORY      7  2164  L 0!0 0'0           64   000+2   000+1
  721                MA    LIEAAA,X2          * ADD -5 TO X2                        7  2171  # 15J 094           64  8151     094
  722         * END ASSIGNMENT (EXP = (EXP / BASE))
  723         LIBAAA NOP                      * RETURN                              1  2178  N                   64
  724                BCE   LZAAAA,RF,R        * JUMP BACK TO CALLER                 8  2179  B K87 340 R         64  2287     340
  725         * ENDBLOCK [BLOCK LIBAAA:LZAAAA]
  726         ***************************************
  727         *
  728                B     LJBAAA             * JUMP TO TOP                         4  2187  B X29               64  1729
  729         LKBAAA NOP                      * BOTTOM OF THE WHILE LOOP            1  2191  N                   64
  730         *
  731         * ASSIGNMENT ((*STR) = '\0')
  732         * CONSTANT ('\0' : EOS)
  733         * PUSH (EOS:1)
  734                MA    LKEAAA,X2          * ADD 1 TO X2                         7  2192  # 16P 094           65  8167     094
  735                LCA   EOS,0&X2           * LOAD DATA EOS INTO STACK            7  2199  L 345 0!0           65   345     000+2
  736         * PARAMETER VARIABLE (STR : 15992+X3)
  737         * PUSH (15992+X3:3)
  738                MA    LZDAAA,X2          * ADD 3 TO X2                         7  2206  # 24Q 094           65  8248     094
  739                LCA   15992&X3,0&X2      * LOAD DATA 15992&X3 INTO STACK       7  2213  L IIB 0!0           65 15992+3   000+2
  740         * POP (X1:3)
  741                LCA   0&X2,X1            * LOAD DATA IN STACK INTO MEMORY      7  2220  L 0!0 089           65   000+2   089
  742                MA    LBEAAA,X2          * ADD -3 TO X2                        7  2227  # 10P 094           66  8107     094
  743         * POP (0+X1:1)
  744                LCA   0&X2,0&X1          * LOAD DATA IN STACK INTO MEMORY      7  2234  L 0!0 0'0           66   000+2   000+1
  745                MA    LMEAAA,X2          * ADD -1 TO X2                        7  2241  # 18L 094           66  8183     094
  746         * END ASSIGNMENT ((*STR) = '\0')
  747         * LOCAL VARIABLE (START : 6+X3)
1                                                                                                         PAGE   14
0 SEQ PG LIN  LABEL  OP    OPERANDS                                            SFX CT  LOCN  INSTRUCTION TYPE  CARD A-ADDR  B-ADDR

  748         * PUSH (6+X3:3)
  749                MA    LZDAAA,X2          * ADD 3 TO X2                         7  2248  # 24Q 094           66  8248     094
  750                LCA   6&X3,0&X2          * LOAD DATA 6&X3 INTO STACK           7  2255  L 0?6 0!0           66   006+3   000+2
  751         * POP (15984+X3:3)
  752                LCA   0&X2,15984&X3      * LOAD DATA IN STACK INTO MEMORY      7  2262  L 0!0 IHD           67   000+2 15984+3
  753                MA    LBEAAA,X2          * ADD -3 TO X2                        7  2269  # 10P 094           67  8107     094
  754         * SET THE RETURN FLAG, SO WE KNOW DO DEALLOCATE OUR STACK
  755                MCW   @R@,RF             * PUT R INTO LOCATION RF              7  2276  M 25N 340           67  8255     340
  756                B     LZAAAA             * JUMP BACK TO CALLER                 4  2283  B K87               67  2287
  757         LZAAAA NOP                      * RETURN                              1  2287  N                   67
  758                MA    LFFAAA,X2          * RESERVE 14 BYTES OF SPACE ON ST     7  2288  # 12Q 094           67  8128     094
  759                MCW   @ @,RF             * CLEAR THE RETURN FLAG               7  2295  M 25O 340           68  8256     340
  760         * ENDBLOCK [BLOCK LZAAAA:NULL]
  761         ***************************************
  762         *
  763                LCA   3&X3,X1            * LOAD RETURN ADDRESS TO X1           7  2302  L 0?3 089           68   003+3   089
  764                B     0&X1               * JUMP BACK TO CALLER                 4  2309  B 0'0               68   000+1
  765         *
  766         ***************************************************************************
  767         * END FUNCTION : ITOA
  768         ***************************************************************************
  769         *
  770         ***************************************************************************
  771         * FUNCTION : STRCPY
  772         ***************************************************************************
  773         LJAAAA SBR   3&X3               * SAVE RETURN ADDRESS IN REGISTER     4  2313  H 0?3               68   003+3
  774                SW    1&X3               * SET THE WM                          4  2317  , 0?1               68   001+3
  775                CW    2&X3               * CLEAN WM                            4  2321  ) 0?2               68   002+3
  776                CW    3&X3               * CLEAN WM                            4  2325  ) 0?3               68   003+3
  777         *
  778         ***************************************
  779         * BEGINBLOCK [BLOCK LKAAAA:NULL]
  780                MA    LZDAAA,X2          * RESERVE 3 BYTES OF SPACE ON STA     7  2329  # 24Q 094           69  8248     094
  781         * WHILE [WHILE ((((*(DEST++)) = (*(SRC++))) != '\0')) [] TOP:LLAAAA BOTTOM:
  782         LLAAAA NOP                      * TOP OF THE LOOP                     1  2336  N                   69
  783         * NOTEQUAL (!=) (((*(DEST++)) = (*(SRC++))) != '\0')
  784         * ASSIGNMENT ((*(DEST++)) = (*(SRC++)))
  785         * DEREFERENCEEXPRESSION (*(SRC++))
  786         * POSTINCREMENT (SRC++)
  787         * PUSH (LIFAAA:3)
  788                MA    LZDAAA,X2          * ADD 3 TO X2                         7  2337  # 24Q 094           69  8248     094
  789                LCA   LIFAAA,0&X2        * LOAD DATA I9D INTO STACK            7  2344  L 15M 0!0           69  8154     000+2
  790                MA    X3,0&X2                                                  7  2351  # 099 0!0           69   099     000+2
  791         * POP (X1:3)
  792                LCA   0&X2,X1            * LOAD DATA IN STACK INTO MEMORY      7  2358  L 0!0 089           69   000+2   089
  793                MA    LBEAAA,X2          * ADD -3 TO X2                        7  2365  # 10P 094           70  8107     094
  794         * PUSH (0+X1:3)
  795                MA    LZDAAA,X2          * ADD 3 TO X2                         7  2372  # 24Q 094           70  8248     094
  796                LCA   0&X1,0&X2          * LOAD DATA 0&X1 INTO STACK           7  2379  L 0'0 0!0           70   000+1   000+2
  797                MA    LKEAAA,0&X1        * POSTINCREMENT POINTER POINTED B     7  2386  # 16P 0'0           70  8167     000+1
1                                                                                                         PAGE   15
0 SEQ PG LIN  LABEL  OP    OPERANDS                                            SFX CT  LOCN  INSTRUCTION TYPE  CARD A-ADDR  B-ADDR

  798         * POP (X1:3)
  799                LCA   0&X2,X1            * LOAD DATA IN STACK INTO MEMORY      7  2393  L 0!0 089           70   000+2   089
  800                MA    LBEAAA,X2          * ADD -3 TO X2                        7  2400  # 10P 094           71  8107     094
  801         * PUSH (0+X1:1)
  802                MA    LKEAAA,X2          * ADD 1 TO X2                         7  2407  # 16P 094           71  8167     094
  803                LCA   0&X1,0&X2          * LOAD DATA 0&X1 INTO STACK           7  2414  L 0'0 0!0           71   000+1   000+2
  804         * END DEREFERENCEEXPRESSION (*(SRC++))
  805         * POSTINCREMENT (DEST++)
  806         * PUSH (LBEAAA:3)
  807                MA    LZDAAA,X2          * ADD 3 TO X2                         7  2421  # 24Q 094           71  8248     094
  808                LCA   LBEAAA,0&X2        * LOAD DATA I9G INTO STACK            7  2428  L 10P 0!0           71  8107     000+2
  809                MA    X3,0&X2                                                  7  2435  # 099 0!0           72   099     000+2
  810         * POP (X1:3)
  811                LCA   0&X2,X1            * LOAD DATA IN STACK INTO MEMORY      7  2442  L 0!0 089           72   000+2   089
  812                MA    LBEAAA,X2          * ADD -3 TO X2                        7  2449  # 10P 094           72  8107     094
  813         * PUSH (0+X1:3)
  814                MA    LZDAAA,X2          * ADD 3 TO X2                         7  2456  # 24Q 094           72  8248     094
  815                LCA   0&X1,0&X2          * LOAD DATA 0&X1 INTO STACK           7  2463  L 0'0 0!0           72   000+1   000+2
  816                MA    LKEAAA,0&X1        * POSTINCREMENT POINTER POINTED B     7  2470  # 16P 0'0           73  8167     000+1
  817         * POP (X1:3)
  818                LCA   0&X2,X1            * LOAD DATA IN STACK INTO MEMORY      7  2477  L 0!0 089           73   000+2   089
  819                MA    LBEAAA,X2          * ADD -3 TO X2                        7  2484  # 10P 094           73  8107     094
  820                LCA   0&X2,0&X1          * LOAD DATA IN STACK INTO X1          7  2491  L 0!0 0'0           73   000+2   000+1
  821         * END ASSIGNMENT ((*(DEST++)) = (*(SRC++)))
  822         * CONSTANT ('\0' : EOS)
  823         * PUSH (EOS:1)
  824                MA    LKEAAA,X2          * ADD 1 TO X2                         7  2498  # 16P 094           73  8167     094
  825                LCA   EOS,0&X2           * LOAD DATA EOS INTO STACK            7  2505  L 345 0!0           74   345     000+2
  826                C     0&X2,15999&X2      * COMPARE                             7  2512  C 0!0 IRI           74   000+2 15999+2
  827         * POP (1)
  828                MA    LMEAAA,X2          * ADD -1 TO X2                        7  2519  # 18L 094           74  8183     094
  829         * POP (1)
  830                MA    LMEAAA,X2          * ADD -1 TO X2                        7  2526  # 18L 094           74  8183     094
  831         * PUSH (LXDAAA:5)
  832                MA    LCEAAA,X2          * ADD 5 TO X2                         7  2533  # 11! 094           74  8110     094
  833                LCA   LXDAAA,0&X2        * LOAD DATA 00001 INTO STACK          7  2540  L 23Q 0!0           75  8238     000+2
  834                BE    LGFAAA             * JUMP IF EQUAL                       5  2547  B N56 S             75  2556
  835                B     LHFAAA             * JUMP TO END                         4  2552  B N63               75  2563
  836         LGFAAA MCW   LFEAAA,0&X2        * EQUAL: SET STACK LOCATION TO 0      7  2556  M 12N 0!0           75  8125     000+2
  837         LHFAAA NOP                      * END OF NOTEQUAL                     1  2563  N                   75
  838                MCS   0&X2,0&X2          * CLEAR WM                            7  2564  Z 0!0 0!0           75   000+2   000+2
  839         * POP (5)
  840                MA    LIEAAA,X2          * ADD -5 TO X2                        7  2571  # 15J 094           75  8151     094
  841                BCE   LMAAAA,5&X2,       * JUMP TO BOTTOM                      8  2578  B N90 0!5           76  2590     005+2
  842                B     LLAAAA             * JUMP TO TOP                         4  2586  B L36               76  2336
  843         LMAAAA NOP                      * BOTTOM OF THE WHILE LOOP            1  2590  N                   76
  844         *
  845         LKAAAA NOP                      * RETURN                              1  2591  N                   76
  846                MA    LBEAAA,X2          * RESERVE 3 BYTES OF SPACE ON STA     7  2592  # 10P 094           76  8107     094
  847                MCW   @ @,RF             * CLEAR THE RETURN FLAG               7  2599  M 25O 340           76  8256     340
1                                                                                                         PAGE   16
0 SEQ PG LIN  LABEL  OP    OPERANDS                                            SFX CT  LOCN  INSTRUCTION TYPE  CARD A-ADDR  B-ADDR

  848         * ENDBLOCK [BLOCK LKAAAA:NULL]
  849         ***************************************
  850         *
  851                LCA   3&X3,X1            * LOAD RETURN ADDRESS TO X1           7  2606  L 0?3 089           76   003+3   089
  852                B     0&X1               * JUMP BACK TO CALLER                 4  2613  B 0'0               77   000+1
  853         *
  854         ***************************************************************************
  855         * END FUNCTION : STRCPY
  856         ***************************************************************************
  857         *
  858         ***************************************************************************
  859         * FUNCTION : PUTCHAR
  860         ***************************************************************************
  861         LLBAAA SBR   3&X3               * SAVE RETURN ADDRESS IN REGISTER     4  2617  H 0?3               77   003+3
  862                SW    1&X3               * SET THE WM                          4  2621  , 0?1               77   001+3
  863                CW    2&X3               * CLEAN WM                            4  2625  ) 0?2               77   002+3
  864                CW    3&X3               * CLEAN WM                            4  2629  ) 0?3               77   003+3
  865         *
  866         ***************************************
  867         * BEGINBLOCK [BLOCK LMBAAA:NULL]
  868                MA    LZDAAA,X2          * RESERVE 3 BYTES OF SPACE ON STA     7  2633  # 24Q 094           77  8248     094
  869         * IF [IF ((C != '\N') THEN [BLOCK LNBAAA:LMBAAA] ELSE [BLOCK LOBAAA:LMBAAA]
  870         * NOTEQUAL (!=) (C != '\N')
  871         * PARAMETER VARIABLE (C : 15997+X3)
  872         * PUSH (15997+X3:1)
  873                MA    LKEAAA,X2          * ADD 1 TO X2                         7  2640  # 16P 094           77  8167     094
  874                LCA   15997&X3,0&X2      * LOAD DATA 15997&X3 INTO STACK       7  2647  L IIG 0!0           78 15997+3   000+2
  875         * CONSTANT ('\N' : EOL)
  876         * PUSH (EOL:1)
  877                MA    LKEAAA,X2          * ADD 1 TO X2                         7  2654  # 16P 094           78  8167     094
  878                LCA   EOL,0&X2           * LOAD DATA EOL INTO STACK            7  2661  L 346 0!0           78   346     000+2
  879                C     0&X2,15999&X2      * COMPARE                             7  2668  C 0!0 IRI           78   000+2 15999+2
  880         * POP (1)
  881                MA    LMEAAA,X2          * ADD -1 TO X2                        7  2675  # 18L 094           78  8183     094
  882         * POP (1)
  883                MA    LMEAAA,X2          * ADD -1 TO X2                        7  2682  # 18L 094           79  8183     094
  884         * PUSH (LXDAAA:5)
  885                MA    LCEAAA,X2          * ADD 5 TO X2                         7  2689  # 11! 094           79  8110     094
  886                LCA   LXDAAA,0&X2        * LOAD DATA 00001 INTO STACK          7  2696  L 23Q 0!0           79  8238     000+2
  887                BE    LJFAAA             * JUMP IF EQUAL                       5  2703  B P12 S             79  2712
  888                B     LKFAAA             * JUMP TO END                         4  2708  B P19               79  2719
  889         LJFAAA MCW   LFEAAA,0&X2        * EQUAL: SET STACK LOCATION TO 0      7  2712  M 12N 0!0           79  8125     000+2
  890         LKFAAA NOP                      * END OF NOTEQUAL                     1  2719  N                   79
  891                MCS   0&X2,0&X2          * CLEAR WM                            7  2720  Z 0!0 0!0           80   000+2   000+2
  892         * POP (5)
  893                MA    LIEAAA,X2          * ADD -5 TO X2                        7  2727  # 15J 094           80  8151     094
  894                BCE   LSBAAA,5&X2,       * JUMP WHEN FALSE                     8  2734  B Q46 0!5           80  2846     005+2
  895         *
  896         ***************************************
  897         * BEGINBLOCK [BLOCK LNBAAA:LMBAAA]
1                                                                                                         PAGE   17
0 SEQ PG LIN  LABEL  OP    OPERANDS                                            SFX CT  LOCN  INSTRUCTION TYPE  CARD A-ADDR  B-ADDR

  898         * ASSIGNMENT ((*(__PUTCHAR_POS++)) = C)
  899         * PARAMETER VARIABLE (C : 15997+X3)
  900         * PUSH (15997+X3:1)
  901                MA    LKEAAA,X2          * ADD 1 TO X2                         7  2742  # 16P 094           80  8167     094
  902                LCA   15997&X3,0&X2      * LOAD DATA 15997&X3 INTO STACK       7  2749  L IIG 0!0           80 15997+3   000+2
  903         * POSTINCREMENT (__PUTCHAR_POS++)
  904         * PUSH (LLFAAA:3)
  905                MA    LZDAAA,X2          * ADD 3 TO X2                         7  2756  # 24Q 094           81  8248     094
  906                LCA   LLFAAA,0&X2        * LOAD DATA 624 INTO STACK            7  2763  L 17O 0!0           81  8176     000+2
  907         * POP (X1:3)
  908                LCA   0&X2,X1            * LOAD DATA IN STACK INTO MEMORY      7  2770  L 0!0 089           81   000+2   089
  909                MA    LBEAAA,X2          * ADD -3 TO X2                        7  2777  # 10P 094           81  8107     094
  910         * PUSH (0+X1:3)
  911                MA    LZDAAA,X2          * ADD 3 TO X2                         7  2784  # 24Q 094           81  8248     094
  912                LCA   0&X1,0&X2          * LOAD DATA 0&X1 INTO STACK           7  2791  L 0'0 0!0           82   000+1   000+2
  913                MA    LKEAAA,0&X1        * POSTINCREMENT POINTER POINTED B     7  2798  # 16P 0'0           82  8167     000+1
  914         * POP (X1:3)
  915                LCA   0&X2,X1            * LOAD DATA IN STACK INTO MEMORY      7  2805  L 0!0 089           82   000+2   089
  916                MA    LBEAAA,X2          * ADD -3 TO X2                        7  2812  # 10P 094           82  8107     094
  917         * POP (0+X1:1)
  918                LCA   0&X2,0&X1          * LOAD DATA IN STACK INTO MEMORY      7  2819  L 0!0 0'0           82   000+2   000+1
  919                MA    LMEAAA,X2          * ADD -1 TO X2                        7  2826  # 18L 094           83  8183     094
  920         * END ASSIGNMENT ((*(__PUTCHAR_POS++)) = C)
  921         LNBAAA NOP                      * RETURN                              1  2833  N                   83
  922                BCE   LMBAAA,RF,R        * JUMP BACK TO CALLER                 8  2834  B D05 340 R         83  3405     340
  923         * ENDBLOCK [BLOCK LNBAAA:LMBAAA]
  924         ***************************************
  925         *
  926                B     LTBAAA             * JUMP WHEN TRUE                      4  2842  B A79               83  3179
  927         LSBAAA NOP                      * EXECUTED WHEN FALSE                 1  2846  N                   83
  928         *
  929         ***************************************
  930         * BEGINBLOCK [BLOCK LOBAAA:LMBAAA]
  931         * WHILE [WHILE ((((INT) __PUTCHAR_LAST) >= ((INT) __PUTCHAR_POS))) [BLOCK L
  932         LQBAAA NOP                      * TOP OF THE LOOP                     1  2847  N                   83
  933         * GREATEROREQUAL (>=) ((((INT) __PUTCHAR_LAST) >= ((INT) __PUTCHAR_POS))
  934         * STATIC VARIABLE (__PUTCHAR_LAST : 627)
  935         * PUSH (627:3)
  936                MA    LZDAAA,X2          * ADD 3 TO X2                         7  2848  # 24Q 094           83  8248     094
  937                LCA   627,0&X2           * LOAD DATA 627 INTO STACK            7  2855  L 627 0!0           84   627     000+2
  938         * CAST POINTER(__PUTCHAR_LAST) TO NUMBER
  939                B     LMFAAA             * JUMP TO SNIPPET POINTER_TO_NUMB     4  2862  B I3/               84  7931
  940                B     LDEAAA             * JUMP TO SNIPPET CLEAN_NUMBER        4  2866  B E1V               84  7515
  941         * STATIC VARIABLE (__PUTCHAR_POS : 624)
  942         * PUSH (624:3)
  943                MA    LZDAAA,X2          * ADD 3 TO X2                         7  2870  # 24Q 094           84  8248     094
  944                LCA   624,0&X2           * LOAD DATA 624 INTO STACK            7  2877  L 624 0!0           84   624     000+2
  945         * CAST POINTER(__PUTCHAR_POS) TO NUMBER
  946                B     LMFAAA             * JUMP TO SNIPPET POINTER_TO_NUMB     4  2884  B I3/               84  7931
  947                B     LDEAAA             * JUMP TO SNIPPET CLEAN_NUMBER        4  2888  B E1V               84  7515
1                                                                                                         PAGE   18
0 SEQ PG LIN  LABEL  OP    OPERANDS                                            SFX CT  LOCN  INSTRUCTION TYPE  CARD A-ADDR  B-ADDR

  948                C     0&X2,15995&X2      * COMPARE                             7  2892  C 0!0 IRE           85   000+2 15995+2
  949         * POP (5)
  950                MA    LIEAAA,X2          * ADD -5 TO X2                        7  2899  # 15J 094           85  8151     094
  951                MCW   LXDAAA,0&X2        * SET STACK LOCATION TO 1             7  2906  M 23Q 0!0           85  8238     000+2
  952                BL    LVFAAA             * JUMP IF GREATER OR EQUAL            5  2913  B R22 T             85  2922
  953                B     LWFAAA             * JUMP TO END                         4  2918  B R29               85  2929
  954         LVFAAA MCW   LFEAAA,0&X2        * GREATEROREQUAL: SET STACK LOCAT     7  2922  M 12N 0!0           85  8125     000+2
  955         LWFAAA NOP                      * END OF GREATEROREQUAL               1  2929  N                   85
  956                MCS   0&X2,0&X2          * CLEAR WM                            7  2930  Z 0!0 0!0           86   000+2   000+2
  957         * POP (5)
  958                MA    LIEAAA,X2          * ADD -5 TO X2                        7  2937  # 15J 094           86  8151     094
  959                BCE   LRBAAA,5&X2,       * JUMP TO BOTTOM                      8  2944  B ?56 0!5           86  3056     005+2
  960         *
  961         ***************************************
  962         * BEGINBLOCK [BLOCK LPBAAA:LOBAAA]
  963         * ASSIGNMENT ((*(__PUTCHAR_LAST--)) = ' ')
  964         * CONSTANT (' ' : @ @)
  965         * PUSH (@ @:1)
  966                MA    LKEAAA,X2          * ADD 1 TO X2                         7  2952  # 16P 094           86  8167     094
  967                LCA   @ @,0&X2           * LOAD DATA   INTO STACK              7  2959  L 25O 0!0           86  8256     000+2
  968         * POSTDECREMENT (__PUTCHAR_LAST--)
  969         * PUSH (LYFAAA:3)
  970                MA    LZDAAA,X2          * ADD 3 TO X2                         7  2966  # 24Q 094           87  8248     094
  971                LCA   LYFAAA,0&X2        * LOAD DATA 627 INTO STACK            7  2973  L 24N 0!0           87  8245     000+2
  972         * POP (X1:3)
  973                LCA   0&X2,X1            * LOAD DATA IN STACK INTO MEMORY      7  2980  L 0!0 089           87   000+2   089
  974                MA    LBEAAA,X2          * ADD -3 TO X2                        7  2987  # 10P 094           87  8107     094
  975         * PUSH (0+X1:3)
  976                MA    LZDAAA,X2          * ADD 3 TO X2                         7  2994  # 24Q 094           87  8248     094
  977                LCA   0&X1,0&X2          * LOAD DATA 0&X1 INTO STACK           7  3001  L 0'0 0!0           88   000+1   000+2
  978                MA    LMEAAA,0&X1        * POSTDECREMENT POINTER POINTED B     7  3008  # 18L 0'0           88  8183     000+1
  979         * POP (X1:3)
  980                LCA   0&X2,X1            * LOAD DATA IN STACK INTO MEMORY      7  3015  L 0!0 089           88   000+2   089
  981                MA    LBEAAA,X2          * ADD -3 TO X2                        7  3022  # 10P 094           88  8107     094
  982         * POP (0+X1:1)
  983                LCA   0&X2,0&X1          * LOAD DATA IN STACK INTO MEMORY      7  3029  L 0!0 0'0           88   000+2   000+1
  984                MA    LMEAAA,X2          * ADD -1 TO X2                        7  3036  # 18L 094           89  8183     094
  985         * END ASSIGNMENT ((*(__PUTCHAR_LAST--)) = ' ')
  986         LPBAAA NOP                      * RETURN                              1  3043  N                   89
  987                BCE   LOBAAA,RF,R        * JUMP BACK TO CALLER                 8  3044  B A70 340 R         89  3170     340
  988         * ENDBLOCK [BLOCK LPBAAA:LOBAAA]
  989         ***************************************
  990         *
  991                B     LQBAAA             * JUMP TO TOP                         4  3052  B Q47               89  2847
  992         LRBAAA NOP                      * BOTTOM OF THE WHILE LOOP            1  3056  N                   89
  993         *
  994         * ASSIGNMENT (__PUTCHAR_LAST = __PUTCHAR_POS)
  995         * STATIC VARIABLE (__PUTCHAR_POS : 624)
  996         * PUSH (624:3)
  997                MA    LZDAAA,X2          * ADD 3 TO X2                         7  3057  # 24Q 094           89  8248     094
1                                                                                                         PAGE   19
0 SEQ PG LIN  LABEL  OP    OPERANDS                                            SFX CT  LOCN  INSTRUCTION TYPE  CARD A-ADDR  B-ADDR

  998                LCA   624,0&X2           * LOAD DATA 624 INTO STACK            7  3064  L 624 0!0           89   624     000+2
  999         * PUSH (LYFAAA:3)
 1000                MA    LZDAAA,X2          * ADD 3 TO X2                         7  3071  # 24Q 094           90  8248     094
 1001                LCA   LYFAAA,0&X2        * LOAD DATA 627 INTO STACK            7  3078  L 24N 0!0           90  8245     000+2
 1002         * POP (X1:3)
 1003                LCA   0&X2,X1            * LOAD DATA IN STACK INTO MEMORY      7  3085  L 0!0 089           90   000+2   089
 1004                MA    LBEAAA,X2          * ADD -3 TO X2                        7  3092  # 10P 094           90  8107     094
 1005         * POP (0+X1:3)
 1006                LCA   0&X2,0&X1          * LOAD DATA IN STACK INTO MEMORY      7  3099  L 0!0 0'0           90   000+2   000+1
 1007                MA    LBEAAA,X2          * ADD -3 TO X2                        7  3106  # 10P 094           91  8107     094
 1008         * END ASSIGNMENT (__PUTCHAR_LAST = __PUTCHAR_POS)
 1009         * ASSIGNMENT (__PUTCHAR_POS = 201)
 1010         * CONSTANT (201 : LZFAAA)
 1011         * PUSH (LZFAAA:3)
 1012                MA    LZDAAA,X2          * ADD 3 TO X2                         7  3113  # 24Q 094           91  8248     094
 1013                LCA   LZFAAA,0&X2        * LOAD DATA 201 INTO STACK            7  3120  L 25J 0!0           91  8251     000+2
 1014         * PUSH (LLFAAA:3)
 1015                MA    LZDAAA,X2          * ADD 3 TO X2                         7  3127  # 24Q 094           91  8248     094
 1016                LCA   LLFAAA,0&X2        * LOAD DATA 624 INTO STACK            7  3134  L 17O 0!0           91  8176     000+2
 1017         * POP (X1:3)
 1018                LCA   0&X2,X1            * LOAD DATA IN STACK INTO MEMORY      7  3141  L 0!0 089           92   000+2   089
 1019                MA    LBEAAA,X2          * ADD -3 TO X2                        7  3148  # 10P 094           92  8107     094
 1020         * POP (0+X1:3)
 1021                LCA   0&X2,0&X1          * LOAD DATA IN STACK INTO MEMORY      7  3155  L 0!0 0'0           92   000+2   000+1
 1022                MA    LBEAAA,X2          * ADD -3 TO X2                        7  3162  # 10P 094           92  8107     094
 1023         * END ASSIGNMENT (__PUTCHAR_POS = 201)
 1024         * START ASM BLOCK
 1025                W                                                              1  3169  2                   92
 1026         * END ASM BLOCK
 1027         LOBAAA NOP                      * RETURN                              1  3170  N                   92
 1028                BCE   LMBAAA,RF,R        * JUMP BACK TO CALLER                 8  3171  B D05 340 R         92  3405     340
 1029         * ENDBLOCK [BLOCK LOBAAA:LMBAAA]
 1030         ***************************************
 1031         *
 1032         LTBAAA NOP                      * EXECUTED WHEN TRUE                  1  3179  N                   93
 1033         * IF [IF ((__PUTCHAR_POS == 333) THEN [BLOCK LUBAAA:LMBAAA]]
 1034         * EQUAL (==) (__PUTCHAR_POS == 333)
 1035         * STATIC VARIABLE (__PUTCHAR_POS : 624)
 1036         * PUSH (624:3)
 1037                MA    LZDAAA,X2          * ADD 3 TO X2                         7  3180  # 24Q 094           93  8248     094
 1038                LCA   624,0&X2           * LOAD DATA 624 INTO STACK            7  3187  L 624 0!0           93   624     000+2
 1039         * CONSTANT (333 : LCGAAA)
 1040         * PUSH (LCGAAA:3)
 1041                MA    LZDAAA,X2          * ADD 3 TO X2                         7  3194  # 24Q 094           93  8248     094
 1042                LCA   LCGAAA,0&X2        * LOAD DATA 333 INTO STACK            7  3201  L 11L 0!0           93  8113     000+2
 1043                C     0&X2,15997&X2      * COMPARE                             7  3208  C 0!0 IRG           93   000+2 15997+2
 1044         * POP (3)
 1045                MA    LBEAAA,X2          * ADD -3 TO X2                        7  3215  # 10P 094           94  8107     094
 1046         * POP (3)
 1047                MA    LBEAAA,X2          * ADD -3 TO X2                        7  3222  # 10P 094           94  8107     094
1                                                                                                         PAGE   20
0 SEQ PG LIN  LABEL  OP    OPERANDS                                            SFX CT  LOCN  INSTRUCTION TYPE  CARD A-ADDR  B-ADDR

 1048         * PUSH (LFEAAA:5)
 1049                MA    LCEAAA,X2          * ADD 5 TO X2                         7  3229  # 11! 094           94  8110     094
 1050                LCA   LFEAAA,0&X2        * LOAD DATA 00000 INTO STACK          7  3236  L 12N 0!0           94  8125     000+2
 1051                BE    LAGAAA             * JUMP IF EQUAL                       5  3243  B B52 S             94  3252
 1052                B     LBGAAA             * JUMP TO END                         4  3248  B B59               94  3259
 1053         LAGAAA MCW   LXDAAA,0&X2        * EQUAL                               7  3252  M 23Q 0!0           95  8238     000+2
 1054         LBGAAA NOP                      * END OF EQUAL                        1  3259  N                   95
 1055                MCS   0&X2,0&X2          * CLEAR WM                            7  3260  Z 0!0 0!0           95   000+2   000+2
 1056         * POP (5)
 1057                MA    LIEAAA,X2          * ADD -5 TO X2                        7  3267  # 15J 094           95  8151     094
 1058                BCE   LVBAAA,5&X2,       * JUMP WHEN FALSE                     8  3274  B D04 0!5           95  3404     005+2
 1059         *
 1060         ***************************************
 1061         * BEGINBLOCK [BLOCK LUBAAA:LMBAAA]
 1062         * ASSIGNMENT (__PUTCHAR_LAST = __PUTCHAR_POS)
 1063         * STATIC VARIABLE (__PUTCHAR_POS : 624)
 1064         * PUSH (624:3)
 1065                MA    LZDAAA,X2          * ADD 3 TO X2                         7  3282  # 24Q 094           95  8248     094
 1066                LCA   624,0&X2           * LOAD DATA 624 INTO STACK            7  3289  L 624 0!0           96   624     000+2
 1067         * PUSH (LYFAAA:3)
 1068                MA    LZDAAA,X2          * ADD 3 TO X2                         7  3296  # 24Q 094           96  8248     094
 1069                LCA   LYFAAA,0&X2        * LOAD DATA 627 INTO STACK            7  3303  L 24N 0!0           96  8245     000+2
 1070         * POP (X1:3)
 1071                LCA   0&X2,X1            * LOAD DATA IN STACK INTO MEMORY      7  3310  L 0!0 089           96   000+2   089
 1072                MA    LBEAAA,X2          * ADD -3 TO X2                        7  3317  # 10P 094           96  8107     094
 1073         * POP (0+X1:3)
 1074                LCA   0&X2,0&X1          * LOAD DATA IN STACK INTO MEMORY      7  3324  L 0!0 0'0           97   000+2   000+1
 1075                MA    LBEAAA,X2          * ADD -3 TO X2                        7  3331  # 10P 094           97  8107     094
 1076         * END ASSIGNMENT (__PUTCHAR_LAST = __PUTCHAR_POS)
 1077         * ASSIGNMENT (__PUTCHAR_POS = 201)
 1078         * CONSTANT (201 : LZFAAA)
 1079         * PUSH (LZFAAA:3)
 1080                MA    LZDAAA,X2          * ADD 3 TO X2                         7  3338  # 24Q 094           97  8248     094
 1081                LCA   LZFAAA,0&X2        * LOAD DATA 201 INTO STACK            7  3345  L 25J 0!0           97  8251     000+2
 1082         * PUSH (LLFAAA:3)
 1083                MA    LZDAAA,X2          * ADD 3 TO X2                         7  3352  # 24Q 094           97  8248     094
 1084                LCA   LLFAAA,0&X2        * LOAD DATA 624 INTO STACK            7  3359  L 17O 0!0           98  8176     000+2
 1085         * POP (X1:3)
 1086                LCA   0&X2,X1            * LOAD DATA IN STACK INTO MEMORY      7  3366  L 0!0 089           98   000+2   089
 1087                MA    LBEAAA,X2          * ADD -3 TO X2                        7  3373  # 10P 094           98  8107     094
 1088         * POP (0+X1:3)
 1089                LCA   0&X2,0&X1          * LOAD DATA IN STACK INTO MEMORY      7  3380  L 0!0 0'0           98   000+2   000+1
 1090                MA    LBEAAA,X2          * ADD -3 TO X2                        7  3387  # 10P 094           98  8107     094
 1091         * END ASSIGNMENT (__PUTCHAR_POS = 201)
 1092         * START ASM BLOCK
 1093                W                                                              1  3394  2                   98
 1094         * END ASM BLOCK
 1095         LUBAAA NOP                      * RETURN                              1  3395  N                   98
 1096                BCE   LMBAAA,RF,R        * JUMP BACK TO CALLER                 8  3396  B D05 340 R         99  3405     340
 1097         * ENDBLOCK [BLOCK LUBAAA:LMBAAA]
1                                                                                                         PAGE   21
0 SEQ PG LIN  LABEL  OP    OPERANDS                                            SFX CT  LOCN  INSTRUCTION TYPE  CARD A-ADDR  B-ADDR

 1098         ***************************************
 1099         *
 1100         LVBAAA NOP                      * EXECUTED WHEN FALSE                 1  3404  N                   99
 1101         LMBAAA NOP                      * RETURN                              1  3405  N                   99
 1102                MA    LBEAAA,X2          * RESERVE 3 BYTES OF SPACE ON STA     7  3406  # 10P 094           99  8107     094
 1103                MCW   @ @,RF             * CLEAR THE RETURN FLAG               7  3413  M 25O 340           99  8256     340
 1104         * ENDBLOCK [BLOCK LMBAAA:NULL]
 1105         ***************************************
 1106         *
 1107                LCA   3&X3,X1            * LOAD RETURN ADDRESS TO X1           7  3420  L 0?3 089           99   003+3   089
 1108                B     0&X1               * JUMP BACK TO CALLER                 4  3427  B 0'0               99   000+1
 1109         *
 1110         ***************************************************************************
 1111         * END FUNCTION : PUTCHAR
 1112         ***************************************************************************
 1113         *
 1114         ***************************************************************************
 1115         * FUNCTION : MAIN
 1116         ***************************************************************************
 1117         LUDAAA SBR   3&X3               * SAVE RETURN ADDRESS IN REGISTER     4  3431  H 0?3              100   003+3
 1118                SW    1&X3               * SET THE WM                          4  3435  , 0?1              100   001+3
 1119                CW    2&X3               * CLEAN WM                            4  3439  ) 0?2              100   002+3
 1120                CW    3&X3               * CLEAN WM                            4  3443  ) 0?3              100   003+3
 1121         *
 1122         ***************************************
 1123         * BEGINBLOCK [BLOCK LVDAAA:NULL]
 1124                LCA   LDGAAA,66&X3       * LOAD *CHAR 200 INTO MEMORY 66&X     7  3447  L 11P 0F6          100  8117     066+3
 1125                LCA   LEGAAA,69&X3       * LOAD *INT 643 INTO MEMORY 69&X3     7  3454  L 12! 0F9          100  8120     069+3
 1126                MA    LFGAAA,X2          * RESERVE 69 BYTES OF SPACE ON ST     7  3461  # 13J 094          100  8131     094
 1127         * ASSIGNMENT ((*D) = 123)
 1128         * CONSTANT (123 : LGGAAA)
 1129         * PUSH (LGGAAA:5)
 1130                MA    LCEAAA,X2          * ADD 5 TO X2                         7  3468  # 11! 094          101  8110     094
 1131                LCA   LGGAAA,0&X2        * LOAD DATA 00123 INTO STACK          7  3475  L 13P 0!0          101  8137     000+2
 1132         * LOCAL VARIABLE (D : 69+X3)
 1133         * PUSH (69+X3:3)
 1134                MA    LZDAAA,X2          * ADD 3 TO X2                         7  3482  # 24Q 094          101  8248     094
 1135                LCA   69&X3,0&X2         * LOAD DATA 69&X3 INTO STACK          7  3489  L 0F9 0!0          101   069+3   000+2
 1136         * POP (X1:3)
 1137                LCA   0&X2,X1            * LOAD DATA IN STACK INTO MEMORY      7  3496  L 0!0 089          101   000+2   089
 1138                MA    LBEAAA,X2          * ADD -3 TO X2                        7  3503  # 10P 094          102  8107     094
 1139         * POP (0+X1:5)
 1140                LCA   0&X2,0&X1          * LOAD DATA IN STACK INTO MEMORY      7  3510  L 0!0 0'0          102   000+2   000+1
 1141                MA    LIEAAA,X2          * ADD -5 TO X2                        7  3517  # 15J 094          102  8151     094
 1142         * END ASSIGNMENT ((*D) = 123)
 1143         * FUNCTION CALL PRINTF(CONST_STR_LITERAL-15, ((INT) C1))
 1144         * PUSH (5)
 1145                MA    LCEAAA,X2          * ADD 5 TO X2                         7  3524  # 11! 094          102  8110     094
 1146         * STATIC VARIABLE (C1 : 633)
 1147         * PUSH (633:3)
1                                                                                                         PAGE   22
0 SEQ PG LIN  LABEL  OP    OPERANDS                                            SFX CT  LOCN  INSTRUCTION TYPE  CARD A-ADDR  B-ADDR

 1148                MA    LZDAAA,X2          * ADD 3 TO X2                         7  3531  # 24Q 094          102  8248     094
 1149                LCA   633,0&X2           * LOAD DATA 633 INTO STACK            7  3538  L 633 0!0          103   633     000+2
 1150         * CAST POINTER(C1) TO NUMBER
 1151                B     LMFAAA             * JUMP TO SNIPPET POINTER_TO_NUMB     4  3545  B I3/              103  7931
 1152         * STATIC ARRAY (CONST_STR_LITERAL-15:CHAR [8])
 1153         * PUSH (LHGAAA:3)
 1154                MA    LZDAAA,X2          * ADD 3 TO X2                         7  3549  # 24Q 094          103  8248     094
 1155                LCA   LHGAAA,0&X2        * LOAD DATA 759 INTO STACK            7  3556  L 14N 0!0          103  8145     000+2
 1156         * PUSH (X3:3)
 1157                MA    LZDAAA,X2          * ADD 3 TO X2                         7  3563  # 24Q 094          103  8248     094
 1158                LCA   X3,0&X2            * LOAD DATA X3 INTO STACK             7  3570  L 099 0!0          103   099     000+2
 1159                MCW   X2,X3              * COPY X2 INTO X3                     7  3577  M 094 099          104   094     099
 1160                B     LPCAAA             * JUMP TO FUNCTION PRINTF             4  3584  B 16U              104  4164
 1161         * POP (X3:3)
 1162                LCA   0&X2,X3            * LOAD DATA IN STACK INTO MEMORY      7  3588  L 0!0 099          104   000+2   099
 1163                MA    LBEAAA,X2          * ADD -3 TO X2                        7  3595  # 10P 094          104  8107     094
 1164         * POP (3)
 1165                MA    LBEAAA,X2          * ADD -3 TO X2                        7  3602  # 10P 094          104  8107     094
 1166         * POP (5)
 1167                MA    LIEAAA,X2          * ADD -5 TO X2                        7  3609  # 15J 094          104  8151     094
 1168         * POP (5)
 1169                MA    LIEAAA,X2          * ADD -5 TO X2                        7  3616  # 15J 094          105  8151     094
 1170         * FUNCTION CALL PRINTF(CONST_STR_LITERAL-16, ((INT) A1))
 1171         * PUSH (5)
 1172                MA    LCEAAA,X2          * ADD 5 TO X2                         7  3623  # 11! 094          105  8110     094
 1173         * STATIC ARRAY (A1:INT [10])
 1174         * PUSH (LEGAAA:3)
 1175                MA    LZDAAA,X2          * ADD 3 TO X2                         7  3630  # 24Q 094          105  8248     094
 1176                LCA   LEGAAA,0&X2        * LOAD DATA 643 INTO STACK            7  3637  L 12! 0!0          105  8120     000+2
 1177         * CAST POINTER(A1) TO NUMBER
 1178                B     LMFAAA             * JUMP TO SNIPPET POINTER_TO_NUMB     4  3644  B I3/              105  7931
 1179         * STATIC ARRAY (CONST_STR_LITERAL-16:CHAR [8])
 1180         * PUSH (LIGAAA:3)
 1181                MA    LZDAAA,X2          * ADD 3 TO X2                         7  3648  # 24Q 094          105  8248     094
 1182                LCA   LIGAAA,0&X2        * LOAD DATA 767 INTO STACK            7  3655  L 15P 0!0          106  8157     000+2
 1183         * PUSH (X3:3)
 1184                MA    LZDAAA,X2          * ADD 3 TO X2                         7  3662  # 24Q 094          106  8248     094
 1185                LCA   X3,0&X2            * LOAD DATA X3 INTO STACK             7  3669  L 099 0!0          106   099     000+2
 1186                MCW   X2,X3              * COPY X2 INTO X3                     7  3676  M 094 099          106   094     099
 1187                B     LPCAAA             * JUMP TO FUNCTION PRINTF             4  3683  B 16U              106  4164
 1188         * POP (X3:3)
 1189                LCA   0&X2,X3            * LOAD DATA IN STACK INTO MEMORY      7  3687  L 0!0 099          106   000+2   099
 1190                MA    LBEAAA,X2          * ADD -3 TO X2                        7  3694  # 10P 094          107  8107     094
 1191         * POP (3)
 1192                MA    LBEAAA,X2          * ADD -3 TO X2                        7  3701  # 10P 094          107  8107     094
 1193         * POP (5)
 1194                MA    LIEAAA,X2          * ADD -5 TO X2                        7  3708  # 15J 094          107  8151     094
 1195         * POP (5)
 1196                MA    LIEAAA,X2          * ADD -5 TO X2                        7  3715  # 15J 094          107  8151     094
 1197         * FUNCTION CALL PRINTF(CONST_STR_LITERAL-17, ((INT) P1))
1                                                                                                         PAGE   23
0 SEQ PG LIN  LABEL  OP    OPERANDS                                            SFX CT  LOCN  INSTRUCTION TYPE  CARD A-ADDR  B-ADDR

 1198         * PUSH (5)
 1199                MA    LCEAAA,X2          * ADD 5 TO X2                         7  3722  # 11! 094          107  8110     094
 1200         * STATIC VARIABLE (P1 : 739)
 1201         * PUSH (739:3)
 1202                MA    LZDAAA,X2          * ADD 3 TO X2                         7  3729  # 24Q 094          108  8248     094
 1203                LCA   739,0&X2           * LOAD DATA 739 INTO STACK            7  3736  L 739 0!0          108   739     000+2
 1204         * CAST POINTER(P1) TO NUMBER
 1205                B     LMFAAA             * JUMP TO SNIPPET POINTER_TO_NUMB     4  3743  B I3/              108  7931
 1206         * STATIC ARRAY (CONST_STR_LITERAL-17:CHAR [8])
 1207         * PUSH (LJGAAA:3)
 1208                MA    LZDAAA,X2          * ADD 3 TO X2                         7  3747  # 24Q 094          108  8248     094
 1209                LCA   LJGAAA,0&X2        * LOAD DATA 775 INTO STACK            7  3754  L 16M 0!0          108  8164     000+2
 1210         * PUSH (X3:3)
 1211                MA    LZDAAA,X2          * ADD 3 TO X2                         7  3761  # 24Q 094          108  8248     094
 1212                LCA   X3,0&X2            * LOAD DATA X3 INTO STACK             7  3768  L 099 0!0          109   099     000+2
 1213                MCW   X2,X3              * COPY X2 INTO X3                     7  3775  M 094 099          109   094     099
 1214                B     LPCAAA             * JUMP TO FUNCTION PRINTF             4  3782  B 16U              109  4164
 1215         * POP (X3:3)
 1216                LCA   0&X2,X3            * LOAD DATA IN STACK INTO MEMORY      7  3786  L 0!0 099          109   000+2   099
 1217                MA    LBEAAA,X2          * ADD -3 TO X2                        7  3793  # 10P 094          109  8107     094
 1218         * POP (3)
 1219                MA    LBEAAA,X2          * ADD -3 TO X2                        7  3800  # 10P 094          109  8107     094
 1220         * POP (5)
 1221                MA    LIEAAA,X2          * ADD -5 TO X2                        7  3807  # 15J 094          110  8151     094
 1222         * POP (5)
 1223                MA    LIEAAA,X2          * ADD -5 TO X2                        7  3814  # 15J 094          110  8151     094
 1224         * FUNCTION CALL PRINTF(CONST_STR_LITERAL-18, ((INT) R1))
 1225         * PUSH (5)
 1226                MA    LCEAAA,X2          * ADD 5 TO X2                         7  3821  # 11! 094          110  8110     094
 1227         * STATIC VARIABLE (R1 : 750)
 1228         * PUSH (750:3)
 1229                MA    LZDAAA,X2          * ADD 3 TO X2                         7  3828  # 24Q 094          110  8248     094
 1230                LCA   750,0&X2           * LOAD DATA 750 INTO STACK            7  3835  L 750 0!0          110   750     000+2
 1231         * CAST POINTER(R1) TO NUMBER
 1232                B     LMFAAA             * JUMP TO SNIPPET POINTER_TO_NUMB     4  3842  B I3/              110  7931
 1233         * STATIC ARRAY (CONST_STR_LITERAL-18:CHAR [8])
 1234         * PUSH (LKGAAA:3)
 1235                MA    LZDAAA,X2          * ADD 3 TO X2                         7  3846  # 24Q 094          111  8248     094
 1236                LCA   LKGAAA,0&X2        * LOAD DATA 783 INTO STACK            7  3853  L 17! 0!0          111  8170     000+2
 1237         * PUSH (X3:3)
 1238                MA    LZDAAA,X2          * ADD 3 TO X2                         7  3860  # 24Q 094          111  8248     094
 1239                LCA   X3,0&X2            * LOAD DATA X3 INTO STACK             7  3867  L 099 0!0          111   099     000+2
 1240                MCW   X2,X3              * COPY X2 INTO X3                     7  3874  M 094 099          111   094     099
 1241                B     LPCAAA             * JUMP TO FUNCTION PRINTF             4  3881  B 16U              111  4164
 1242         * POP (X3:3)
 1243                LCA   0&X2,X3            * LOAD DATA IN STACK INTO MEMORY      7  3885  L 0!0 099          112   000+2   099
 1244                MA    LBEAAA,X2          * ADD -3 TO X2                        7  3892  # 10P 094          112  8107     094
 1245         * POP (3)
 1246                MA    LBEAAA,X2          * ADD -3 TO X2                        7  3899  # 10P 094          112  8107     094
 1247         * POP (5)
1                                                                                                         PAGE   24
0 SEQ PG LIN  LABEL  OP    OPERANDS                                            SFX CT  LOCN  INSTRUCTION TYPE  CARD A-ADDR  B-ADDR

 1248                MA    LIEAAA,X2          * ADD -5 TO X2                        7  3906  # 15J 094          112  8151     094
 1249         * POP (5)
 1250                MA    LIEAAA,X2          * ADD -5 TO X2                        7  3913  # 15J 094          112  8151     094
 1251         * FUNCTION CALL PRINTF(CONST_STR_LITERAL-19, D)
 1252         * PUSH (5)
 1253                MA    LCEAAA,X2          * ADD 5 TO X2                         7  3920  # 11! 094          113  8110     094
 1254         * LOCAL VARIABLE (D : 69+X3)
 1255         * PUSH (69+X3:3)
 1256                MA    LZDAAA,X2          * ADD 3 TO X2                         7  3927  # 24Q 094          113  8248     094
 1257                LCA   69&X3,0&X2         * LOAD DATA 69&X3 INTO STACK          7  3934  L 0F9 0!0          113   069+3   000+2
 1258         * STATIC ARRAY (CONST_STR_LITERAL-19:CHAR [7])
 1259         * PUSH (LLGAAA:3)
 1260                MA    LZDAAA,X2          * ADD 3 TO X2                         7  3941  # 24Q 094          113  8248     094
 1261                LCA   LLGAAA,0&X2        * LOAD DATA 791 INTO STACK            7  3948  L 17R 0!0          113  8179     000+2
 1262         * PUSH (X3:3)
 1263                MA    LZDAAA,X2          * ADD 3 TO X2                         7  3955  # 24Q 094          114  8248     094
 1264                LCA   X3,0&X2            * LOAD DATA X3 INTO STACK             7  3962  L 099 0!0          114   099     000+2
 1265                MCW   X2,X3              * COPY X2 INTO X3                     7  3969  M 094 099          114   094     099
 1266                B     LPCAAA             * JUMP TO FUNCTION PRINTF             4  3976  B 16U              114  4164
 1267         * POP (X3:3)
 1268                LCA   0&X2,X3            * LOAD DATA IN STACK INTO MEMORY      7  3980  L 0!0 099          114   000+2   099
 1269                MA    LBEAAA,X2          * ADD -3 TO X2                        7  3987  # 10P 094          114  8107     094
 1270         * POP (3)
 1271                MA    LBEAAA,X2          * ADD -3 TO X2                        7  3994  # 10P 094          115  8107     094
 1272         * POP (3)
 1273                MA    LBEAAA,X2          * ADD -3 TO X2                        7  4001  # 10P 094          115  8107     094
 1274         * POP (5)
 1275                MA    LIEAAA,X2          * ADD -5 TO X2                        7  4008  # 15J 094          115  8151     094
 1276         * FUNCTION CALL PRINTF(CONST_STR_LITERAL-20, (*D))
 1277         * PUSH (5)
 1278                MA    LCEAAA,X2          * ADD 5 TO X2                         7  4015  # 11! 094          115  8110     094
 1279         * DEREFERENCEEXPRESSION (*D)
 1280         * LOCAL VARIABLE (D : 69+X3)
 1281         * PUSH (69+X3:3)
 1282                MA    LZDAAA,X2          * ADD 3 TO X2                         7  4022  # 24Q 094          115  8248     094
 1283                LCA   69&X3,0&X2         * LOAD DATA 69&X3 INTO STACK          7  4029  L 0F9 0!0          116   069+3   000+2
 1284         * POP (X1:3)
 1285                LCA   0&X2,X1            * LOAD DATA IN STACK INTO MEMORY      7  4036  L 0!0 089          116   000+2   089
 1286                MA    LBEAAA,X2          * ADD -3 TO X2                        7  4043  # 10P 094          116  8107     094
 1287         * PUSH (0+X1:5)
 1288                MA    LCEAAA,X2          * ADD 5 TO X2                         7  4050  # 11! 094          116  8110     094
 1289                LCA   0&X1,0&X2          * LOAD DATA 0&X1 INTO STACK           7  4057  L 0'0 0!0          116   000+1   000+2
 1290         * END DEREFERENCEEXPRESSION (*D)
 1291         * STATIC ARRAY (CONST_STR_LITERAL-20:CHAR [8])
 1292         * PUSH (LMGAAA:3)
 1293                MA    LZDAAA,X2          * ADD 3 TO X2                         7  4064  # 24Q 094          117  8248     094
 1294                LCA   LMGAAA,0&X2        * LOAD DATA 798 INTO STACK            7  4071  L 18O 0!0          117  8186     000+2
 1295         * PUSH (X3:3)
 1296                MA    LZDAAA,X2          * ADD 3 TO X2                         7  4078  # 24Q 094          117  8248     094
 1297                LCA   X3,0&X2            * LOAD DATA X3 INTO STACK             7  4085  L 099 0!0          117   099     000+2
1                                                                                                         PAGE   25
0 SEQ PG LIN  LABEL  OP    OPERANDS                                            SFX CT  LOCN  INSTRUCTION TYPE  CARD A-ADDR  B-ADDR

 1298                MCW   X2,X3              * COPY X2 INTO X3                     7  4092  M 094 099          117   094     099
 1299                B     LPCAAA             * JUMP TO FUNCTION PRINTF             4  4099  B 16U              117  4164
 1300         * POP (X3:3)
 1301                LCA   0&X2,X3            * LOAD DATA IN STACK INTO MEMORY      7  4103  L 0!0 099          118   000+2   099
 1302                MA    LBEAAA,X2          * ADD -3 TO X2                        7  4110  # 10P 094          118  8107     094
 1303         * POP (3)
 1304                MA    LBEAAA,X2          * ADD -3 TO X2                        7  4117  # 10P 094          118  8107     094
 1305         * POP (5)
 1306                MA    LIEAAA,X2          * ADD -5 TO X2                        7  4124  # 15J 094          118  8151     094
 1307         * POP (5)
 1308                MA    LIEAAA,X2          * ADD -5 TO X2                        7  4131  # 15J 094          118  8151     094
 1309         LVDAAA NOP                      * RETURN                              1  4138  N                  118
 1310                MA    LNGAAA,X2          * RESERVE 69 BYTES OF SPACE ON ST     7  4139  # 19K 094          119  8192     094
 1311                MCW   @ @,RF             * CLEAR THE RETURN FLAG               7  4146  M 25O 340          119  8256     340
 1312         * ENDBLOCK [BLOCK LVDAAA:NULL]
 1313         ***************************************
 1314         *
 1315                LCA   3&X3,X1            * LOAD RETURN ADDRESS TO X1           7  4153  L 0?3 089          119   003+3   089
 1316                B     0&X1               * JUMP BACK TO CALLER                 4  4160  B 0'0              119   000+1
 1317         *
 1318         ***************************************************************************
 1319         * END FUNCTION : MAIN
 1320         ***************************************************************************
 1321         *
 1322         ***************************************************************************
 1323         * FUNCTION : PRINTF
 1324         ***************************************************************************
 1325         LPCAAA SBR   3&X3               * SAVE RETURN ADDRESS IN REGISTER     4  4164  H 0?3              119   003+3
 1326                SW    1&X3               * SET THE WM                          4  4168  , 0?1              119   001+3
 1327                CW    2&X3               * CLEAN WM                            4  4172  ) 0?2              119   002+3
 1328                CW    3&X3               * CLEAN WM                            4  4176  ) 0?3              120   003+3
 1329         *
 1330         ***************************************
 1331         * BEGINBLOCK [BLOCK LQCAAA:NULL]
 1332                MA    LOGAAA,X2          * RESERVE 11 BYTES OF SPACE ON ST     7  4180  # 19Q 094          120  8198     094
 1333         * ASSIGNMENT (ARG = ((*CHAR) (( &CFORMAT_STR ) + 15997)))
 1334         * ADDITION (( &CFORMAT_STR ) + 15997)
 1335         * ADDRESSOF ( &CFORMAT_STR )
 1336         * PUSH (LBEAAA:3)
 1337                MA    LZDAAA,X2          * ADD 3 TO X2                         7  4187  # 24Q 094          120  8248     094
 1338                LCA   LBEAAA,0&X2        * LOAD DATA I9G INTO STACK            7  4194  L 10P 0!0          120  8107     000+2
 1339                MA    X3,0&X2                                                  7  4201  # 099 0!0          120   099     000+2
 1340         * CONSTANT (15997 : LBEAAA)
 1341         * PUSH (LBEAAA:3)
 1342                MA    LZDAAA,X2          * ADD 3 TO X2                         7  4208  # 24Q 094          120  8248     094
 1343                LCA   LBEAAA,0&X2        * LOAD DATA I9G INTO STACK            7  4215  L 10P 0!0          121  8107     000+2
 1344                MA    0&X2,15997&X2      * ADD                                 7  4222  # 0!0 IRG          121   000+2 15997+2
 1345         * POP (3)
 1346                MA    LBEAAA,X2          * ADD -3 TO X2                        7  4229  # 10P 094          121  8107     094
 1347         * PUSH (LAEAAA:3)
1                                                                                                         PAGE   26
0 SEQ PG LIN  LABEL  OP    OPERANDS                                            SFX CT  LOCN  INSTRUCTION TYPE  CARD A-ADDR  B-ADDR

 1348                MA    LZDAAA,X2          * ADD 3 TO X2                         7  4236  # 24Q 094          121  8248     094
 1349                LCA   LAEAAA,0&X2        * LOAD DATA 006 INTO STACK            7  4243  L 10M 0!0          121  8104     000+2
 1350                MA    X3,0&X2                                                  7  4250  # 099 0!0          122   099     000+2
 1351         * POP (X1:3)
 1352                LCA   0&X2,X1            * LOAD DATA IN STACK INTO MEMORY      7  4257  L 0!0 089          122   000+2   089
 1353                MA    LBEAAA,X2          * ADD -3 TO X2                        7  4264  # 10P 094          122  8107     094
 1354         * POP (0+X1:3)
 1355                LCA   0&X2,0&X1          * LOAD DATA IN STACK INTO MEMORY      7  4271  L 0!0 0'0          122   000+2   000+1
 1356                MA    LBEAAA,X2          * ADD -3 TO X2                        7  4278  # 10P 094          122  8107     094
 1357         * END ASSIGNMENT (ARG = ((*CHAR) (( &CFORMAT_STR ) + 15997)))
 1358         * WHILE [WHILE (((C = (*(CFORMAT_STR++))) != '\0')) [BLOCK LRCAAA:LQCAAA] T
 1359         LMDAAA NOP                      * TOP OF THE LOOP                     1  4285  N                  122
 1360         * NOTEQUAL (!=) ((C = (*(CFORMAT_STR++))) != '\0')
 1361         * ASSIGNMENT (C = (*(CFORMAT_STR++)))
 1362         * DEREFERENCEEXPRESSION (*(CFORMAT_STR++))
 1363         * POSTINCREMENT (CFORMAT_STR++)
 1364         * PUSH (LBEAAA:3)
 1365                MA    LZDAAA,X2          * ADD 3 TO X2                         7  4286  # 24Q 094          123  8248     094
 1366                LCA   LBEAAA,0&X2        * LOAD DATA I9G INTO STACK            7  4293  L 10P 0!0          123  8107     000+2
 1367                MA    X3,0&X2                                                  7  4300  # 099 0!0          123   099     000+2
 1368         * POP (X1:3)
 1369                LCA   0&X2,X1            * LOAD DATA IN STACK INTO MEMORY      7  4307  L 0!0 089          123   000+2   089
 1370                MA    LBEAAA,X2          * ADD -3 TO X2                        7  4314  # 10P 094          123  8107     094
 1371         * PUSH (0+X1:3)
 1372                MA    LZDAAA,X2          * ADD 3 TO X2                         7  4321  # 24Q 094          124  8248     094
 1373                LCA   0&X1,0&X2          * LOAD DATA 0&X1 INTO STACK           7  4328  L 0'0 0!0          124   000+1   000+2
 1374                MA    LKEAAA,0&X1        * POSTINCREMENT POINTER POINTED B     7  4335  # 16P 0'0          124  8167     000+1
 1375         * POP (X1:3)
 1376                LCA   0&X2,X1            * LOAD DATA IN STACK INTO MEMORY      7  4342  L 0!0 089          124   000+2   089
 1377                MA    LBEAAA,X2          * ADD -3 TO X2                        7  4349  # 10P 094          124  8107     094
 1378         * PUSH (0+X1:1)
 1379                MA    LKEAAA,X2          * ADD 1 TO X2                         7  4356  # 16P 094          125  8167     094
 1380                LCA   0&X1,0&X2          * LOAD DATA 0&X1 INTO STACK           7  4363  L 0'0 0!0          125   000+1   000+2
 1381         * END DEREFERENCEEXPRESSION (*(CFORMAT_STR++))
 1382         * PUSH (LRGAAA:3)
 1383                MA    LZDAAA,X2          * ADD 3 TO X2                         7  4370  # 24Q 094          125  8248     094
 1384                LCA   LRGAAA,0&X2        * LOAD DATA 007 INTO STACK            7  4377  L 21! 0!0          125  8210     000+2
 1385                MA    X3,0&X2                                                  7  4384  # 099 0!0          125   099     000+2
 1386         * POP (X1:3)
 1387                LCA   0&X2,X1            * LOAD DATA IN STACK INTO MEMORY      7  4391  L 0!0 089          126   000+2   089
 1388                MA    LBEAAA,X2          * ADD -3 TO X2                        7  4398  # 10P 094          126  8107     094
 1389                LCA   0&X2,0&X1          * LOAD DATA IN STACK INTO X1          7  4405  L 0!0 0'0          126   000+2   000+1
 1390         * END ASSIGNMENT (C = (*(CFORMAT_STR++)))
 1391         * CONSTANT ('\0' : EOS)
 1392         * PUSH (EOS:1)
 1393                MA    LKEAAA,X2          * ADD 1 TO X2                         7  4412  # 16P 094          126  8167     094
 1394                LCA   EOS,0&X2           * LOAD DATA EOS INTO STACK            7  4419  L 345 0!0          126   345     000+2
 1395                C     0&X2,15999&X2      * COMPARE                             7  4426  C 0!0 IRI          127   000+2 15999+2
 1396         * POP (1)
 1397                MA    LMEAAA,X2          * ADD -1 TO X2                        7  4433  # 18L 094          127  8183     094
1                                                                                                         PAGE   27
0 SEQ PG LIN  LABEL  OP    OPERANDS                                            SFX CT  LOCN  INSTRUCTION TYPE  CARD A-ADDR  B-ADDR

 1398         * POP (1)
 1399                MA    LMEAAA,X2          * ADD -1 TO X2                        7  4440  # 18L 094          127  8183     094
 1400         * PUSH (LXDAAA:5)
 1401                MA    LCEAAA,X2          * ADD 5 TO X2                         7  4447  # 11! 094          127  8110     094
 1402                LCA   LXDAAA,0&X2        * LOAD DATA 00001 INTO STACK          7  4454  L 23Q 0!0          127  8238     000+2
 1403                BE    LPGAAA             * JUMP IF EQUAL                       5  4461  B 47' S            128  4470
 1404                B     LQGAAA             * JUMP TO END                         4  4466  B 47X              128  4477
 1405         LPGAAA MCW   LFEAAA,0&X2        * EQUAL: SET STACK LOCATION TO 0      7  4470  M 12N 0!0          128  8125     000+2
 1406         LQGAAA NOP                      * END OF NOTEQUAL                     1  4477  N                  128
 1407                MCS   0&X2,0&X2          * CLEAR WM                            7  4478  Z 0!0 0!0          128   000+2   000+2
 1408         * POP (5)
 1409                MA    LIEAAA,X2          * ADD -5 TO X2                        7  4485  # 15J 094          128  8151     094
 1410                BCE   LNDAAA,5&X2,       * JUMP TO BOTTOM                      8  4492  B N7' 0!5          128  6570     005+2
 1411         *
 1412         ***************************************
 1413         * BEGINBLOCK [BLOCK LRCAAA:LQCAAA]
 1414         * IF [IF ((C != '%') THEN [BLOCK LSCAAA:LRCAAA] ELSE [BLOCK LTCAAA:LRCAAA]]
 1415         * NOTEQUAL (!=) (C != '%')
 1416         * LOCAL VARIABLE (C : 7+X3)
 1417         * PUSH (7+X3:1)
 1418                MA    LKEAAA,X2          * ADD 1 TO X2                         7  4500  # 16P 094          129  8167     094
 1419                LCA   7&X3,0&X2          * LOAD DATA 7&X3 INTO STACK           7  4507  L 0?7 0!0          129   007+3   000+2
 1420         * CONSTANT ('%' : @%@)
 1421         * PUSH (@%@:1)
 1422                MA    LKEAAA,X2          * ADD 1 TO X2                         7  4514  # 16P 094          129  8167     094
 1423                LCA   @%@,0&X2           * LOAD DATA % INTO STACK              7  4521  L 25P 0!0          129  8257     000+2
 1424                C     0&X2,15999&X2      * COMPARE                             7  4528  C 0!0 IRI          129   000+2 15999+2
 1425         * POP (1)
 1426                MA    LMEAAA,X2          * ADD -1 TO X2                        7  4535  # 18L 094          130  8183     094
 1427         * POP (1)
 1428                MA    LMEAAA,X2          * ADD -1 TO X2                        7  4542  # 18L 094          130  8183     094
 1429         * PUSH (LXDAAA:5)
 1430                MA    LCEAAA,X2          * ADD 5 TO X2                         7  4549  # 11! 094          130  8110     094
 1431                LCA   LXDAAA,0&X2        * LOAD DATA 00001 INTO STACK          7  4556  L 23Q 0!0          130  8238     000+2
 1432                BE    LSGAAA             * JUMP IF EQUAL                       5  4563  B 57S S            130  4572
 1433                B     LTGAAA             * JUMP TO END                         4  4568  B 57Z              130  4579
 1434         LSGAAA MCW   LFEAAA,0&X2        * EQUAL: SET STACK LOCATION TO 0      7  4572  M 12N 0!0          131  8125     000+2
 1435         LTGAAA NOP                      * END OF NOTEQUAL                     1  4579  N                  131
 1436                MCS   0&X2,0&X2          * CLEAR WM                            7  4580  Z 0!0 0!0          131   000+2   000+2
 1437         * POP (5)
 1438                MA    LIEAAA,X2          * ADD -5 TO X2                        7  4587  # 15J 094          131  8151     094
 1439                BCE   LKDAAA,5&X2,       * JUMP WHEN FALSE                     8  4594  B 68Z 0!5          131  4689     005+2
 1440         *
 1441         ***************************************
 1442         * BEGINBLOCK [BLOCK LSCAAA:LRCAAA]
 1443         * FUNCTION CALL PUTCHAR(C)
 1444         * PUSH (5)
 1445                MA    LCEAAA,X2          * ADD 5 TO X2                         7  4602  # 11! 094          131  8110     094
 1446         * LOCAL VARIABLE (C : 7+X3)
 1447         * PUSH (7+X3:1)
1                                                                                                         PAGE   28
0 SEQ PG LIN  LABEL  OP    OPERANDS                                            SFX CT  LOCN  INSTRUCTION TYPE  CARD A-ADDR  B-ADDR

 1448                MA    LKEAAA,X2          * ADD 1 TO X2                         7  4609  # 16P 094          132  8167     094
 1449                LCA   7&X3,0&X2          * LOAD DATA 7&X3 INTO STACK           7  4616  L 0?7 0!0          132   007+3   000+2
 1450         * PUSH (X3:3)
 1451                MA    LZDAAA,X2          * ADD 3 TO X2                         7  4623  # 24Q 094          132  8248     094
 1452                LCA   X3,0&X2            * LOAD DATA X3 INTO STACK             7  4630  L 099 0!0          132   099     000+2
 1453                MCW   X2,X3              * COPY X2 INTO X3                     7  4637  M 094 099          132   094     099
 1454                B     LLBAAA             * JUMP TO FUNCTION PUTCHAR            4  4644  B O17              132  2617
 1455         * POP (X3:3)
 1456                LCA   0&X2,X3            * LOAD DATA IN STACK INTO MEMORY      7  4648  L 0!0 099          133   000+2   099
 1457                MA    LBEAAA,X2          * ADD -3 TO X2                        7  4655  # 10P 094          133  8107     094
 1458         * POP (1)
 1459                MA    LMEAAA,X2          * ADD -1 TO X2                        7  4662  # 18L 094          133  8183     094
 1460         * POP (5)
 1461                MA    LIEAAA,X2          * ADD -5 TO X2                        7  4669  # 15J 094          133  8151     094
 1462         LSCAAA NOP                      * RETURN                              1  4676  N                  133
 1463                BCE   LRCAAA,RF,R        * JUMP BACK TO CALLER                 8  4677  B N5X 340 R        133  6557     340
 1464         * ENDBLOCK [BLOCK LSCAAA:LRCAAA]
 1465         ***************************************
 1466         *
 1467                B     LLDAAA             * JUMP WHEN TRUE                      4  4685  B N5W              134  6556
 1468         LKDAAA NOP                      * EXECUTED WHEN FALSE                 1  4689  N                  134
 1469         *
 1470         ***************************************
 1471         * BEGINBLOCK [BLOCK LTCAAA:LRCAAA]
 1472         * ASSIGNMENT (C = (*(CFORMAT_STR++)))
 1473         * DEREFERENCEEXPRESSION (*(CFORMAT_STR++))
 1474         * POSTINCREMENT (CFORMAT_STR++)
 1475         * PUSH (LBEAAA:3)
 1476                MA    LZDAAA,X2          * ADD 3 TO X2                         7  4690  # 24Q 094          134  8248     094
 1477                LCA   LBEAAA,0&X2        * LOAD DATA I9G INTO STACK            7  4697  L 10P 0!0          134  8107     000+2
 1478                MA    X3,0&X2                                                  7  4704  # 099 0!0          134   099     000+2
 1479         * POP (X1:3)
 1480                LCA   0&X2,X1            * LOAD DATA IN STACK INTO MEMORY      7  4711  L 0!0 089          134   000+2   089
 1481                MA    LBEAAA,X2          * ADD -3 TO X2                        7  4718  # 10P 094          135  8107     094
 1482         * PUSH (0+X1:3)
 1483                MA    LZDAAA,X2          * ADD 3 TO X2                         7  4725  # 24Q 094          135  8248     094
 1484                LCA   0&X1,0&X2          * LOAD DATA 0&X1 INTO STACK           7  4732  L 0'0 0!0          135   000+1   000+2
 1485                MA    LKEAAA,0&X1        * POSTINCREMENT POINTER POINTED B     7  4739  # 16P 0'0          135  8167     000+1
 1486         * POP (X1:3)
 1487                LCA   0&X2,X1            * LOAD DATA IN STACK INTO MEMORY      7  4746  L 0!0 089          135   000+2   089
 1488                MA    LBEAAA,X2          * ADD -3 TO X2                        7  4753  # 10P 094          136  8107     094
 1489         * PUSH (0+X1:1)
 1490                MA    LKEAAA,X2          * ADD 1 TO X2                         7  4760  # 16P 094          136  8167     094
 1491                LCA   0&X1,0&X2          * LOAD DATA 0&X1 INTO STACK           7  4767  L 0'0 0!0          136   000+1   000+2
 1492         * END DEREFERENCEEXPRESSION (*(CFORMAT_STR++))
 1493         * PUSH (LRGAAA:3)
 1494                MA    LZDAAA,X2          * ADD 3 TO X2                         7  4774  # 24Q 094          136  8248     094
 1495                LCA   LRGAAA,0&X2        * LOAD DATA 007 INTO STACK            7  4781  L 21! 0!0          136  8210     000+2
 1496                MA    X3,0&X2                                                  7  4788  # 099 0!0          137   099     000+2
 1497         * POP (X1:3)
1                                                                                                         PAGE   29
0 SEQ PG LIN  LABEL  OP    OPERANDS                                            SFX CT  LOCN  INSTRUCTION TYPE  CARD A-ADDR  B-ADDR

 1498                LCA   0&X2,X1            * LOAD DATA IN STACK INTO MEMORY      7  4795  L 0!0 089          137   000+2   089
 1499                MA    LBEAAA,X2          * ADD -3 TO X2                        7  4802  # 10P 094          137  8107     094
 1500         * POP (0+X1:1)
 1501                LCA   0&X2,0&X1          * LOAD DATA IN STACK INTO MEMORY      7  4809  L 0!0 0'0          137   000+2   000+1
 1502                MA    LMEAAA,X2          * ADD -1 TO X2                        7  4816  # 18L 094          137  8183     094
 1503         * END ASSIGNMENT (C = (*(CFORMAT_STR++)))
 1504         * IF [IF ((C == '%') THEN [BLOCK LUCAAA:LTCAAA] ELSE [IF ((C == 'C') THEN [
 1505         * EQUAL (==) (C == '%')
 1506         * LOCAL VARIABLE (C : 7+X3)
 1507         * PUSH (7+X3:1)
 1508                MA    LKEAAA,X2          * ADD 1 TO X2                         7  4823  # 16P 094          138  8167     094
 1509                LCA   7&X3,0&X2          * LOAD DATA 7&X3 INTO STACK           7  4830  L 0?7 0!0          138   007+3   000+2
 1510         * CONSTANT ('%' : @%@)
 1511         * PUSH (@%@:1)
 1512                MA    LKEAAA,X2          * ADD 1 TO X2                         7  4837  # 16P 094          138  8167     094
 1513                LCA   @%@,0&X2           * LOAD DATA % INTO STACK              7  4844  L 25P 0!0          138  8257     000+2
 1514                C     0&X2,15999&X2      * COMPARE                             7  4851  C 0!0 IRI          138   000+2 15999+2
 1515         * POP (1)
 1516                MA    LMEAAA,X2          * ADD -1 TO X2                        7  4858  # 18L 094          139  8183     094
 1517         * POP (1)
 1518                MA    LMEAAA,X2          * ADD -1 TO X2                        7  4865  # 18L 094          139  8183     094
 1519         * PUSH (LFEAAA:5)
 1520                MA    LCEAAA,X2          * ADD 5 TO X2                         7  4872  # 11! 094          139  8110     094
 1521                LCA   LFEAAA,0&X2        * LOAD DATA 00000 INTO STACK          7  4879  L 12N 0!0          139  8125     000+2
 1522                BE    LVGAAA             * JUMP IF EQUAL                       5  4886  B 89V S            139  4895
 1523                B     LWGAAA             * JUMP TO END                         4  4891  B 90S              139  4902
 1524         LVGAAA MCW   LXDAAA,0&X2        * EQUAL                               7  4895  M 23Q 0!0          140  8238     000+2
 1525         LWGAAA NOP                      * END OF EQUAL                        1  4902  N                  140
 1526                MCS   0&X2,0&X2          * CLEAR WM                            7  4903  Z 0!0 0!0          140   000+2   000+2
 1527         * POP (5)
 1528                MA    LIEAAA,X2          * ADD -5 TO X2                        7  4910  # 15J 094          140  8151     094
 1529                BCE   LIDAAA,5&X2,       * JUMP WHEN FALSE                     8  4917  B '1S 0!5          140  5012     005+2
 1530         *
 1531         ***************************************
 1532         * BEGINBLOCK [BLOCK LUCAAA:LTCAAA]
 1533         * FUNCTION CALL PUTCHAR('%')
 1534         * PUSH (5)
 1535                MA    LCEAAA,X2          * ADD 5 TO X2                         7  4925  # 11! 094          140  8110     094
 1536         * CONSTANT ('%' : @%@)
 1537         * PUSH (@%@:1)
 1538                MA    LKEAAA,X2          * ADD 1 TO X2                         7  4932  # 16P 094          141  8167     094
 1539                LCA   @%@,0&X2           * LOAD DATA % INTO STACK              7  4939  L 25P 0!0          141  8257     000+2
 1540         * PUSH (X3:3)
 1541                MA    LZDAAA,X2          * ADD 3 TO X2                         7  4946  # 24Q 094          141  8248     094
 1542                LCA   X3,0&X2            * LOAD DATA X3 INTO STACK             7  4953  L 099 0!0          141   099     000+2
 1543                MCW   X2,X3              * COPY X2 INTO X3                     7  4960  M 094 099          141   094     099
 1544                B     LLBAAA             * JUMP TO FUNCTION PUTCHAR            4  4967  B O17              141  2617
 1545         * POP (X3:3)
 1546                LCA   0&X2,X3            * LOAD DATA IN STACK INTO MEMORY      7  4971  L 0!0 099          142   000+2   099
 1547                MA    LBEAAA,X2          * ADD -3 TO X2                        7  4978  # 10P 094          142  8107     094
1                                                                                                         PAGE   30
0 SEQ PG LIN  LABEL  OP    OPERANDS                                            SFX CT  LOCN  INSTRUCTION TYPE  CARD A-ADDR  B-ADDR

 1548         * POP (1)
 1549                MA    LMEAAA,X2          * ADD -1 TO X2                        7  4985  # 18L 094          142  8183     094
 1550         * POP (5)
 1551                MA    LIEAAA,X2          * ADD -5 TO X2                        7  4992  # 15J 094          142  8151     094
 1552         LUCAAA NOP                      * RETURN                              1  4999  N                  142
 1553                BCE   LTCAAA,RF,R        * JUMP BACK TO CALLER                 8  5000  B N4X 340 R        142  6547     340
 1554         * ENDBLOCK [BLOCK LUCAAA:LTCAAA]
 1555         ***************************************
 1556         *
 1557                B     LJDAAA             * JUMP WHEN TRUE                      4  5008  B N4W              143  6546
 1558         LIDAAA NOP                      * EXECUTED WHEN FALSE                 1  5012  N                  143
 1559         * IF [IF ((C == 'C') THEN [BLOCK LVCAAA:LTCAAA] ELSE [IF ((C == 'S') THEN [
 1560         * EQUAL (==) (C == 'C')
 1561         * LOCAL VARIABLE (C : 7+X3)
 1562         * PUSH (7+X3:1)
 1563                MA    LKEAAA,X2          * ADD 1 TO X2                         7  5013  # 16P 094          143  8167     094
 1564                LCA   7&X3,0&X2          * LOAD DATA 7&X3 INTO STACK           7  5020  L 0?7 0!0          143   007+3   000+2
 1565         * CONSTANT ('C' : @C@)
 1566         * PUSH (@C@:1)
 1567                MA    LKEAAA,X2          * ADD 1 TO X2                         7  5027  # 16P 094          143  8167     094
 1568                LCA   @C@,0&X2           * LOAD DATA C INTO STACK              7  5034  L 25Q 0!0          143  8258     000+2
 1569                C     0&X2,15999&X2      * COMPARE                             7  5041  C 0!0 IRI          144   000+2 15999+2
 1570         * POP (1)
 1571                MA    LMEAAA,X2          * ADD -1 TO X2                        7  5048  # 18L 094          144  8183     094
 1572         * POP (1)
 1573                MA    LMEAAA,X2          * ADD -1 TO X2                        7  5055  # 18L 094          144  8183     094
 1574         * PUSH (LFEAAA:5)
 1575                MA    LCEAAA,X2          * ADD 5 TO X2                         7  5062  # 11! 094          144  8110     094
 1576                LCA   LFEAAA,0&X2        * LOAD DATA 00000 INTO STACK          7  5069  L 12N 0!0          144  8125     000+2
 1577                BE    LXGAAA             * JUMP IF EQUAL                       5  5076  B '8V S            145  5085
 1578                B     LYGAAA             * JUMP TO END                         4  5081  B '9S              145  5092
 1579         LXGAAA MCW   LXDAAA,0&X2        * EQUAL                               7  5085  M 23Q 0!0          145  8238     000+2
 1580         LYGAAA NOP                      * END OF EQUAL                        1  5092  N                  145
 1581                MCS   0&X2,0&X2          * CLEAR WM                            7  5093  Z 0!0 0!0          145   000+2   000+2
 1582         * POP (5)
 1583                MA    LIEAAA,X2          * ADD -5 TO X2                        7  5100  # 15J 094          145  8151     094
 1584                BCE   LGDAAA,5&X2,       * JUMP WHEN FALSE                     8  5107  B T2/ 0!5          145  5321     005+2
 1585         *
 1586         ***************************************
 1587         * BEGINBLOCK [BLOCK LVCAAA:LTCAAA]
 1588         * FUNCTION CALL PUTCHAR((*ARG))
 1589         * PUSH (5)
 1590                MA    LCEAAA,X2          * ADD 5 TO X2                         7  5115  # 11! 094          146  8110     094
 1591         * DEREFERENCEEXPRESSION (*ARG)
 1592         * LOCAL VARIABLE (ARG : 6+X3)
 1593         * PUSH (6+X3:3)
 1594                MA    LZDAAA,X2          * ADD 3 TO X2                         7  5122  # 24Q 094          146  8248     094
 1595                LCA   6&X3,0&X2          * LOAD DATA 6&X3 INTO STACK           7  5129  L 0?6 0!0          146   006+3   000+2
 1596         * POP (X1:3)
 1597                LCA   0&X2,X1            * LOAD DATA IN STACK INTO MEMORY      7  5136  L 0!0 089          146   000+2   089
1                                                                                                         PAGE   31
0 SEQ PG LIN  LABEL  OP    OPERANDS                                            SFX CT  LOCN  INSTRUCTION TYPE  CARD A-ADDR  B-ADDR

 1598                MA    LBEAAA,X2          * ADD -3 TO X2                        7  5143  # 10P 094          146  8107     094
 1599         * PUSH (0+X1:1)
 1600                MA    LKEAAA,X2          * ADD 1 TO X2                         7  5150  # 16P 094          147  8167     094
 1601                LCA   0&X1,0&X2          * LOAD DATA 0&X1 INTO STACK           7  5157  L 0'0 0!0          147   000+1   000+2
 1602         * END DEREFERENCEEXPRESSION (*ARG)
 1603         * PUSH (X3:3)
 1604                MA    LZDAAA,X2          * ADD 3 TO X2                         7  5164  # 24Q 094          147  8248     094
 1605                LCA   X3,0&X2            * LOAD DATA X3 INTO STACK             7  5171  L 099 0!0          147   099     000+2
 1606                MCW   X2,X3              * COPY X2 INTO X3                     7  5178  M 094 099          147   094     099
 1607                B     LLBAAA             * JUMP TO FUNCTION PUTCHAR            4  5185  B O17              147  2617
 1608         * POP (X3:3)
 1609                LCA   0&X2,X3            * LOAD DATA IN STACK INTO MEMORY      7  5189  L 0!0 099          148   000+2   099
 1610                MA    LBEAAA,X2          * ADD -3 TO X2                        7  5196  # 10P 094          148  8107     094
 1611         * POP (1)
 1612                MA    LMEAAA,X2          * ADD -1 TO X2                        7  5203  # 18L 094          148  8183     094
 1613         * POP (5)
 1614                MA    LIEAAA,X2          * ADD -5 TO X2                        7  5210  # 15J 094          148  8151     094
 1615         * ASSIGNMENT (ARG = (ARG + 15999))
 1616         * ADDITION (ARG + 15999)
 1617         * LOCAL VARIABLE (ARG : 6+X3)
 1618         * PUSH (6+X3:3)
 1619                MA    LZDAAA,X2          * ADD 3 TO X2                         7  5217  # 24Q 094          148  8248     094
 1620                LCA   6&X3,0&X2          * LOAD DATA 6&X3 INTO STACK           7  5224  L 0?6 0!0          149   006+3   000+2
 1621         * CONSTANT (15999 : LMEAAA)
 1622         * PUSH (LMEAAA:3)
 1623                MA    LZDAAA,X2          * ADD 3 TO X2                         7  5231  # 24Q 094          149  8248     094
 1624                LCA   LMEAAA,0&X2        * LOAD DATA I9I INTO STACK            7  5238  L 18L 0!0          149  8183     000+2
 1625                MA    0&X2,15997&X2      * ADD                                 7  5245  # 0!0 IRG          149   000+2 15997+2
 1626         * POP (3)
 1627                MA    LBEAAA,X2          * ADD -3 TO X2                        7  5252  # 10P 094          149  8107     094
 1628         * PUSH (LAEAAA:3)
 1629                MA    LZDAAA,X2          * ADD 3 TO X2                         7  5259  # 24Q 094          150  8248     094
 1630                LCA   LAEAAA,0&X2        * LOAD DATA 006 INTO STACK            7  5266  L 10M 0!0          150  8104     000+2
 1631                MA    X3,0&X2                                                  7  5273  # 099 0!0          150   099     000+2
 1632         * POP (X1:3)
 1633                LCA   0&X2,X1            * LOAD DATA IN STACK INTO MEMORY      7  5280  L 0!0 089          150   000+2   089
 1634                MA    LBEAAA,X2          * ADD -3 TO X2                        7  5287  # 10P 094          150  8107     094
 1635         * POP (0+X1:3)
 1636                LCA   0&X2,0&X1          * LOAD DATA IN STACK INTO MEMORY      7  5294  L 0!0 0'0          151   000+2   000+1
 1637                MA    LBEAAA,X2          * ADD -3 TO X2                        7  5301  # 10P 094          151  8107     094
 1638         * END ASSIGNMENT (ARG = (ARG + 15999))
 1639         LVCAAA NOP                      * RETURN                              1  5308  N                  151
 1640                BCE   LTCAAA,RF,R        * JUMP BACK TO CALLER                 8  5309  B N4X 340 R        151  6547     340
 1641         * ENDBLOCK [BLOCK LVCAAA:LTCAAA]
 1642         ***************************************
 1643         *
 1644                B     LHDAAA             * JUMP WHEN TRUE                      4  5317  B N4V              151  6545
 1645         LGDAAA NOP                      * EXECUTED WHEN FALSE                 1  5321  N                  151
 1646         * IF [IF ((C == 'S') THEN [BLOCK LWCAAA:LTCAAA] ELSE [IF ((C == 'D') THEN [
 1647         * EQUAL (==) (C == 'S')
1                                                                                                         PAGE   32
0 SEQ PG LIN  LABEL  OP    OPERANDS                                            SFX CT  LOCN  INSTRUCTION TYPE  CARD A-ADDR  B-ADDR

 1648         * LOCAL VARIABLE (C : 7+X3)
 1649         * PUSH (7+X3:1)
 1650                MA    LKEAAA,X2          * ADD 1 TO X2                         7  5322  # 16P 094          151  8167     094
 1651                LCA   7&X3,0&X2          * LOAD DATA 7&X3 INTO STACK           7  5329  L 0?7 0!0          152   007+3   000+2
 1652         * CONSTANT ('S' : @S@)
 1653         * PUSH (@S@:1)
 1654                MA    LKEAAA,X2          * ADD 1 TO X2                         7  5336  # 16P 094          152  8167     094
 1655                LCA   @S@,0&X2           * LOAD DATA S INTO STACK              7  5343  L 25R 0!0          152  8259     000+2
 1656                C     0&X2,15999&X2      * COMPARE                             7  5350  C 0!0 IRI          152   000+2 15999+2
 1657         * POP (1)
 1658                MA    LMEAAA,X2          * ADD -1 TO X2                        7  5357  # 18L 094          152  8183     094
 1659         * POP (1)
 1660                MA    LMEAAA,X2          * ADD -1 TO X2                        7  5364  # 18L 094          153  8183     094
 1661         * PUSH (LFEAAA:5)
 1662                MA    LCEAAA,X2          * ADD 5 TO X2                         7  5371  # 11! 094          153  8110     094
 1663                LCA   LFEAAA,0&X2        * LOAD DATA 00000 INTO STACK          7  5378  L 12N 0!0          153  8125     000+2
 1664                BE    LAHAAA             * JUMP IF EQUAL                       5  5385  B T9U S            153  5394
 1665                B     LBHAAA             * JUMP TO END                         4  5390  B U0/              153  5401
 1666         LAHAAA MCW   LXDAAA,0&X2        * EQUAL                               7  5394  M 23Q 0!0          153  8238     000+2
 1667         LBHAAA NOP                      * END OF EQUAL                        1  5401  N                  153
 1668                MCS   0&X2,0&X2          * CLEAR WM                            7  5402  Z 0!0 0!0          154   000+2   000+2
 1669         * POP (5)
 1670                MA    LIEAAA,X2          * ADD -5 TO X2                        7  5409  # 15J 094          154  8151     094
 1671                BCE   LEDAAA,5&X2,       * JUMP WHEN FALSE                     8  5416  B W3' 0!5          154  5630     005+2
 1672         *
 1673         ***************************************
 1674         * BEGINBLOCK [BLOCK LWCAAA:LTCAAA]
 1675         * FUNCTION CALL PUTS((*((**CHAR) ARG)))
 1676         * PUSH (5)
 1677                MA    LCEAAA,X2          * ADD 5 TO X2                         7  5424  # 11! 094          154  8110     094
 1678         * DEREFERENCEEXPRESSION (*((**CHAR) ARG))
 1679         * LOCAL VARIABLE (ARG : 6+X3)
 1680         * PUSH (6+X3:3)
 1681                MA    LZDAAA,X2          * ADD 3 TO X2                         7  5431  # 24Q 094          154  8248     094
 1682                LCA   6&X3,0&X2          * LOAD DATA 6&X3 INTO STACK           7  5438  L 0?6 0!0          155   006+3   000+2
 1683         * POP (X1:3)
 1684                LCA   0&X2,X1            * LOAD DATA IN STACK INTO MEMORY      7  5445  L 0!0 089          155   000+2   089
 1685                MA    LBEAAA,X2          * ADD -3 TO X2                        7  5452  # 10P 094          155  8107     094
 1686         * PUSH (0+X1:3)
 1687                MA    LZDAAA,X2          * ADD 3 TO X2                         7  5459  # 24Q 094          155  8248     094
 1688                LCA   0&X1,0&X2          * LOAD DATA 0&X1 INTO STACK           7  5466  L 0'0 0!0          155   000+1   000+2
 1689         * END DEREFERENCEEXPRESSION (*((**CHAR) ARG))
 1690         * PUSH (X3:3)
 1691                MA    LZDAAA,X2          * ADD 3 TO X2                         7  5473  # 24Q 094          156  8248     094
 1692                LCA   X3,0&X2            * LOAD DATA X3 INTO STACK             7  5480  L 099 0!0          156   099     000+2
 1693                MCW   X2,X3              * COPY X2 INTO X3                     7  5487  M 094 099          156   094     099
 1694                B     LWBAAA             * JUMP TO FUNCTION PUTS               4  5494  B A7X              156  7177
 1695         * POP (X3:3)
 1696                LCA   0&X2,X3            * LOAD DATA IN STACK INTO MEMORY      7  5498  L 0!0 099          156   000+2   099
 1697                MA    LBEAAA,X2          * ADD -3 TO X2                        7  5505  # 10P 094          156  8107     094
1                                                                                                         PAGE   33
0 SEQ PG LIN  LABEL  OP    OPERANDS                                            SFX CT  LOCN  INSTRUCTION TYPE  CARD A-ADDR  B-ADDR

 1698         * POP (3)
 1699                MA    LBEAAA,X2          * ADD -3 TO X2                        7  5512  # 10P 094          157  8107     094
 1700         * POP (5)
 1701                MA    LIEAAA,X2          * ADD -5 TO X2                        7  5519  # 15J 094          157  8151     094
 1702         * ASSIGNMENT (ARG = (ARG + 15997))
 1703         * ADDITION (ARG + 15997)
 1704         * LOCAL VARIABLE (ARG : 6+X3)
 1705         * PUSH (6+X3:3)
 1706                MA    LZDAAA,X2          * ADD 3 TO X2                         7  5526  # 24Q 094          157  8248     094
 1707                LCA   6&X3,0&X2          * LOAD DATA 6&X3 INTO STACK           7  5533  L 0?6 0!0          157   006+3   000+2
 1708         * CONSTANT (15997 : LBEAAA)
 1709         * PUSH (LBEAAA:3)
 1710                MA    LZDAAA,X2          * ADD 3 TO X2                         7  5540  # 24Q 094          157  8248     094
 1711                LCA   LBEAAA,0&X2        * LOAD DATA I9G INTO STACK            7  5547  L 10P 0!0          158  8107     000+2
 1712                MA    0&X2,15997&X2      * ADD                                 7  5554  # 0!0 IRG          158   000+2 15997+2
 1713         * POP (3)
 1714                MA    LBEAAA,X2          * ADD -3 TO X2                        7  5561  # 10P 094          158  8107     094
 1715         * PUSH (LAEAAA:3)
 1716                MA    LZDAAA,X2          * ADD 3 TO X2                         7  5568  # 24Q 094          158  8248     094
 1717                LCA   LAEAAA,0&X2        * LOAD DATA 006 INTO STACK            7  5575  L 10M 0!0          158  8104     000+2
 1718                MA    X3,0&X2                                                  7  5582  # 099 0!0          159   099     000+2
 1719         * POP (X1:3)
 1720                LCA   0&X2,X1            * LOAD DATA IN STACK INTO MEMORY      7  5589  L 0!0 089          159   000+2   089
 1721                MA    LBEAAA,X2          * ADD -3 TO X2                        7  5596  # 10P 094          159  8107     094
 1722         * POP (0+X1:3)
 1723                LCA   0&X2,0&X1          * LOAD DATA IN STACK INTO MEMORY      7  5603  L 0!0 0'0          159   000+2   000+1
 1724                MA    LBEAAA,X2          * ADD -3 TO X2                        7  5610  # 10P 094          159  8107     094
 1725         * END ASSIGNMENT (ARG = (ARG + 15997))
 1726         LWCAAA NOP                      * RETURN                              1  5617  N                  159
 1727                BCE   LTCAAA,RF,R        * JUMP BACK TO CALLER                 8  5618  B N4X 340 R        160  6547     340
 1728         * ENDBLOCK [BLOCK LWCAAA:LTCAAA]
 1729         ***************************************
 1730         *
 1731                B     LFDAAA             * JUMP WHEN TRUE                      4  5626  B N4U              160  6544
 1732         LEDAAA NOP                      * EXECUTED WHEN FALSE                 1  5630  N                  160
 1733         * IF [IF ((C == 'D') THEN [BLOCK LXCAAA:LTCAAA] ELSE [IF ((C == 'P') THEN [
 1734         * EQUAL (==) (C == 'D')
 1735         * LOCAL VARIABLE (C : 7+X3)
 1736         * PUSH (7+X3:1)
 1737                MA    LKEAAA,X2          * ADD 1 TO X2                         7  5631  # 16P 094          160  8167     094
 1738                LCA   7&X3,0&X2          * LOAD DATA 7&X3 INTO STACK           7  5638  L 0?7 0!0          160   007+3   000+2
 1739         * CONSTANT ('D' : @D@)
 1740         * PUSH (@D@:1)
 1741                MA    LKEAAA,X2          * ADD 1 TO X2                         7  5645  # 16P 094          160  8167     094
 1742                LCA   @D@,0&X2           * LOAD DATA D INTO STACK              7  5652  L 26! 0!0          161  8260     000+2
 1743                C     0&X2,15999&X2      * COMPARE                             7  5659  C 0!0 IRI          161   000+2 15999+2
 1744         * POP (1)
 1745                MA    LMEAAA,X2          * ADD -1 TO X2                        7  5666  # 18L 094          161  8183     094
 1746         * POP (1)
 1747                MA    LMEAAA,X2          * ADD -1 TO X2                        7  5673  # 18L 094          161  8183     094
1                                                                                                         PAGE   34
0 SEQ PG LIN  LABEL  OP    OPERANDS                                            SFX CT  LOCN  INSTRUCTION TYPE  CARD A-ADDR  B-ADDR

 1748         * PUSH (LFEAAA:5)
 1749                MA    LCEAAA,X2          * ADD 5 TO X2                         7  5680  # 11! 094          161  8110     094
 1750                LCA   LFEAAA,0&X2        * LOAD DATA 00000 INTO STACK          7  5687  L 12N 0!0          162  8125     000+2
 1751                BE    LDHAAA             * JUMP IF EQUAL                       5  5694  B X0T S            162  5703
 1752                B     LEHAAA             * JUMP TO END                         4  5699  B X1'              162  5710
 1753         LDHAAA MCW   LXDAAA,0&X2        * EQUAL                               7  5703  M 23Q 0!0          162  8238     000+2
 1754         LEHAAA NOP                      * END OF EQUAL                        1  5710  N                  162
 1755                MCS   0&X2,0&X2          * CLEAR WM                            7  5711  Z 0!0 0!0          162   000+2   000+2
 1756         * POP (5)
 1757                MA    LIEAAA,X2          * ADD -5 TO X2                        7  5718  # 15J 094          162  8151     094
 1758                BCE   LCDAAA,5&X2,       * JUMP WHEN FALSE                     8  5725  B !8T 0!5          163  6083     005+2
 1759         *
 1760         ***************************************
 1761         * BEGINBLOCK [BLOCK LXCAAA:LTCAAA]
 1762                MA    LRGAAA,X2          * RESERVE 7 BYTES OF SPACE ON STA     7  5733  # 21! 094          163  8210     094
 1763         * FUNCTION CALL ITOA((*((*INT) ARG)), A, 10)
 1764         * PUSH (3)
 1765                MA    LZDAAA,X2          * ADD 3 TO X2                         7  5740  # 24Q 094          163  8248     094
 1766         * CONSTANT (10 : LGHAAA)
 1767         * PUSH (LGHAAA:5)
 1768                MA    LCEAAA,X2          * ADD 5 TO X2                         7  5747  # 11! 094          163  8110     094
 1769                LCA   LGHAAA,0&X2        * LOAD DATA 00010 INTO STACK          7  5754  L 14K 0!0          163  8142     000+2
 1770         * LOCAL ARRAY (A:CHAR [7])
 1771         * PUSH (LHHAAA:3)
 1772                MA    LZDAAA,X2          * ADD 3 TO X2                         7  5761  # 24Q 094          164  8248     094
 1773                LCA   LHHAAA,0&X2        * LOAD DATA 012 INTO STACK            7  5768  L 14Q 0!0          164  8148     000+2
 1774                MA    X3,0&X2                                                  7  5775  # 099 0!0          164   099     000+2
 1775         * DEREFERENCEEXPRESSION (*((*INT) ARG))
 1776         * LOCAL VARIABLE (ARG : 6+X3)
 1777         * PUSH (6+X3:3)
 1778                MA    LZDAAA,X2          * ADD 3 TO X2                         7  5782  # 24Q 094          164  8248     094
 1779                LCA   6&X3,0&X2          * LOAD DATA 6&X3 INTO STACK           7  5789  L 0?6 0!0          164   006+3   000+2
 1780         * POP (X1:3)
 1781                LCA   0&X2,X1            * LOAD DATA IN STACK INTO MEMORY      7  5796  L 0!0 089          165   000+2   089
 1782                MA    LBEAAA,X2          * ADD -3 TO X2                        7  5803  # 10P 094          165  8107     094
 1783         * PUSH (0+X1:5)
 1784                MA    LCEAAA,X2          * ADD 5 TO X2                         7  5810  # 11! 094          165  8110     094
 1785                LCA   0&X1,0&X2          * LOAD DATA 0&X1 INTO STACK           7  5817  L 0'0 0!0          165   000+1   000+2
 1786         * END DEREFERENCEEXPRESSION (*((*INT) ARG))
 1787         * PUSH (X3:3)
 1788                MA    LZDAAA,X2          * ADD 3 TO X2                         7  5824  # 24Q 094          165  8248     094
 1789                LCA   X3,0&X2            * LOAD DATA X3 INTO STACK             7  5831  L 099 0!0          166   099     000+2
 1790                MCW   X2,X3              * COPY X2 INTO X3                     7  5838  M 094 099          166   094     099
 1791                B     LYAAAA             * JUMP TO FUNCTION ITOA               4  5845  B 826              166   826
 1792         * POP (X3:3)
 1793                LCA   0&X2,X3            * LOAD DATA IN STACK INTO MEMORY      7  5849  L 0!0 099          166   000+2   099
 1794                MA    LBEAAA,X2          * ADD -3 TO X2                        7  5856  # 10P 094          166  8107     094
 1795         * POP (5)
 1796                MA    LIEAAA,X2          * ADD -5 TO X2                        7  5863  # 15J 094          166  8151     094
 1797         * POP (3)
1                                                                                                         PAGE   35
0 SEQ PG LIN  LABEL  OP    OPERANDS                                            SFX CT  LOCN  INSTRUCTION TYPE  CARD A-ADDR  B-ADDR

 1798                MA    LBEAAA,X2          * ADD -3 TO X2                        7  5870  # 10P 094          167  8107     094
 1799         * POP (5)
 1800                MA    LIEAAA,X2          * ADD -5 TO X2                        7  5877  # 15J 094          167  8151     094
 1801         * POP (3)
 1802                MA    LBEAAA,X2          * ADD -3 TO X2                        7  5884  # 10P 094          167  8107     094
 1803         * FUNCTION CALL PUTS(A)
 1804         * PUSH (5)
 1805                MA    LCEAAA,X2          * ADD 5 TO X2                         7  5891  # 11! 094          167  8110     094
 1806         * LOCAL ARRAY (A:CHAR [7])
 1807         * PUSH (LHHAAA:3)
 1808                MA    LZDAAA,X2          * ADD 3 TO X2                         7  5898  # 24Q 094          167  8248     094
 1809                LCA   LHHAAA,0&X2        * LOAD DATA 012 INTO STACK            7  5905  L 14Q 0!0          168  8148     000+2
 1810                MA    X3,0&X2                                                  7  5912  # 099 0!0          168   099     000+2
 1811         * PUSH (X3:3)
 1812                MA    LZDAAA,X2          * ADD 3 TO X2                         7  5919  # 24Q 094          168  8248     094
 1813                LCA   X3,0&X2            * LOAD DATA X3 INTO STACK             7  5926  L 099 0!0          168   099     000+2
 1814                MCW   X2,X3              * COPY X2 INTO X3                     7  5933  M 094 099          168   094     099
 1815                B     LWBAAA             * JUMP TO FUNCTION PUTS               4  5940  B A7X              168  7177
 1816         * POP (X3:3)
 1817                LCA   0&X2,X3            * LOAD DATA IN STACK INTO MEMORY      7  5944  L 0!0 099          169   000+2   099
 1818                MA    LBEAAA,X2          * ADD -3 TO X2                        7  5951  # 10P 094          169  8107     094
 1819         * POP (3)
 1820                MA    LBEAAA,X2          * ADD -3 TO X2                        7  5958  # 10P 094          169  8107     094
 1821         * POP (5)
 1822                MA    LIEAAA,X2          * ADD -5 TO X2                        7  5965  # 15J 094          169  8151     094
 1823         * ASSIGNMENT (ARG = (ARG + 15995))
 1824         * ADDITION (ARG + 15995)
 1825         * LOCAL VARIABLE (ARG : 6+X3)
 1826         * PUSH (6+X3:3)
 1827                MA    LZDAAA,X2          * ADD 3 TO X2                         7  5972  # 24Q 094          169  8248     094
 1828                LCA   6&X3,0&X2          * LOAD DATA 6&X3 INTO STACK           7  5979  L 0?6 0!0          170   006+3   000+2
 1829         * CONSTANT (15995 : LIEAAA)
 1830         * PUSH (LIEAAA:3)
 1831                MA    LZDAAA,X2          * ADD 3 TO X2                         7  5986  # 24Q 094          170  8248     094
 1832                LCA   LIEAAA,0&X2        * LOAD DATA I9E INTO STACK            7  5993  L 15J 0!0          170  8151     000+2
 1833                MA    0&X2,15997&X2      * ADD                                 7  6000  # 0!0 IRG          170   000+2 15997+2
 1834         * POP (3)
 1835                MA    LBEAAA,X2          * ADD -3 TO X2                        7  6007  # 10P 094          170  8107     094
 1836         * PUSH (LAEAAA:3)
 1837                MA    LZDAAA,X2          * ADD 3 TO X2                         7  6014  # 24Q 094          171  8248     094
 1838                LCA   LAEAAA,0&X2        * LOAD DATA 006 INTO STACK            7  6021  L 10M 0!0          171  8104     000+2
 1839                MA    X3,0&X2                                                  7  6028  # 099 0!0          171   099     000+2
 1840         * POP (X1:3)
 1841                LCA   0&X2,X1            * LOAD DATA IN STACK INTO MEMORY      7  6035  L 0!0 089          171   000+2   089
 1842                MA    LBEAAA,X2          * ADD -3 TO X2                        7  6042  # 10P 094          171  8107     094
 1843         * POP (0+X1:3)
 1844                LCA   0&X2,0&X1          * LOAD DATA IN STACK INTO MEMORY      7  6049  L 0!0 0'0          172   000+2   000+1
 1845                MA    LBEAAA,X2          * ADD -3 TO X2                        7  6056  # 10P 094          172  8107     094
 1846         * END ASSIGNMENT (ARG = (ARG + 15995))
 1847         LXCAAA NOP                      * RETURN                              1  6063  N                  172
1                                                                                                         PAGE   36
0 SEQ PG LIN  LABEL  OP    OPERANDS                                            SFX CT  LOCN  INSTRUCTION TYPE  CARD A-ADDR  B-ADDR

 1848                MA    LIHAAA,X2          * RESERVE 7 BYTES OF SPACE ON STA     7  6064  # 16! 094          172  8160     094
 1849                BCE   LTCAAA,RF,R        * JUMP BACK TO CALLER                 8  6071  B N4X 340 R        172  6547     340
 1850         * ENDBLOCK [BLOCK LXCAAA:LTCAAA]
 1851         ***************************************
 1852         *
 1853                B     LDDAAA             * JUMP WHEN TRUE                      4  6079  B N4T              172  6543
 1854         LCDAAA NOP                      * EXECUTED WHEN FALSE                 1  6083  N                  172
 1855         * IF [IF ((C == 'P') THEN [BLOCK LYCAAA:LTCAAA] ELSE [BLOCK LZCAAA:LTCAAA]]
 1856         * EQUAL (==) (C == 'P')
 1857         * LOCAL VARIABLE (C : 7+X3)
 1858         * PUSH (7+X3:1)
 1859                MA    LKEAAA,X2          * ADD 1 TO X2                         7  6084  # 16P 094          173  8167     094
 1860                LCA   7&X3,0&X2          * LOAD DATA 7&X3 INTO STACK           7  6091  L 0?7 0!0          173   007+3   000+2
 1861         * CONSTANT ('P' : @P@)
 1862         * PUSH (@P@:1)
 1863                MA    LKEAAA,X2          * ADD 1 TO X2                         7  6098  # 16P 094          173  8167     094
 1864                LCA   @P@,0&X2           * LOAD DATA P INTO STACK              7  6105  L 26J 0!0          173  8261     000+2
 1865                C     0&X2,15999&X2      * COMPARE                             7  6112  C 0!0 IRI          173   000+2 15999+2
 1866         * POP (1)
 1867                MA    LMEAAA,X2          * ADD -1 TO X2                        7  6119  # 18L 094          174  8183     094
 1868         * POP (1)
 1869                MA    LMEAAA,X2          * ADD -1 TO X2                        7  6126  # 18L 094          174  8183     094
 1870         * PUSH (LFEAAA:5)
 1871                MA    LCEAAA,X2          * ADD 5 TO X2                         7  6133  # 11! 094          174  8110     094
 1872                LCA   LFEAAA,0&X2        * LOAD DATA 00000 INTO STACK          7  6140  L 12N 0!0          174  8125     000+2
 1873                BE    LJHAAA             * JUMP IF EQUAL                       5  6147  B J5W S            174  6156
 1874                B     LKHAAA             * JUMP TO END                         4  6152  B J6T              174  6163
 1875         LJHAAA MCW   LXDAAA,0&X2        * EQUAL                               7  6156  M 23Q 0!0          175  8238     000+2
 1876         LKHAAA NOP                      * END OF EQUAL                        1  6163  N                  175
 1877                MCS   0&X2,0&X2          * CLEAR WM                            7  6164  Z 0!0 0!0          175   000+2   000+2
 1878         * POP (5)
 1879                MA    LIEAAA,X2          * ADD -5 TO X2                        7  6171  # 15J 094          175  8151     094
 1880                BCE   LADAAA,5&X2,       * JUMP WHEN FALSE                     8  6178  B N2/ 0!5          175  6521     005+2
 1881         *
 1882         ***************************************
 1883         * BEGINBLOCK [BLOCK LYCAAA:LTCAAA]
 1884         * ASSIGNMENT (ADDRP = ARG)
 1885         * LOCAL VARIABLE (ARG : 6+X3)
 1886         * PUSH (6+X3:3)
 1887                MA    LZDAAA,X2          * ADD 3 TO X2                         7  6186  # 24Q 094          175  8248     094
 1888                LCA   6&X3,0&X2          * LOAD DATA 6&X3 INTO STACK           7  6193  L 0?6 0!0          176   006+3   000+2
 1889         * PUSH (LMHAAA:3)
 1890                MA    LZDAAA,X2          * ADD 3 TO X2                         7  6200  # 24Q 094          176  8248     094
 1891                LCA   LMHAAA,0&X2        * LOAD DATA 010 INTO STACK            7  6207  L 18R 0!0          176  8189     000+2
 1892                MA    X3,0&X2                                                  7  6214  # 099 0!0          176   099     000+2
 1893         * POP (X1:3)
 1894                LCA   0&X2,X1            * LOAD DATA IN STACK INTO MEMORY      7  6221  L 0!0 089          176   000+2   089
 1895                MA    LBEAAA,X2          * ADD -3 TO X2                        7  6228  # 10P 094          177  8107     094
 1896         * POP (0+X1:3)
 1897                LCA   0&X2,0&X1          * LOAD DATA IN STACK INTO MEMORY      7  6235  L 0!0 0'0          177   000+2   000+1
1                                                                                                         PAGE   37
0 SEQ PG LIN  LABEL  OP    OPERANDS                                            SFX CT  LOCN  INSTRUCTION TYPE  CARD A-ADDR  B-ADDR

 1898                MA    LBEAAA,X2          * ADD -3 TO X2                        7  6242  # 10P 094          177  8107     094
 1899         * END ASSIGNMENT (ADDRP = ARG)
 1900         * ASSIGNMENT (ADDRC = (*ADDRP))
 1901         * DEREFERENCEEXPRESSION (*ADDRP)
 1902         * LOCAL VARIABLE (ADDRP : 10+X3)
 1903         * PUSH (10+X3:3)
 1904                MA    LZDAAA,X2          * ADD 3 TO X2                         7  6249  # 24Q 094          177  8248     094
 1905                LCA   10&X3,0&X2         * LOAD DATA 10&X3 INTO STACK          7  6256  L 0A0 0!0          177   010+3   000+2
 1906         * POP (X1:3)
 1907                LCA   0&X2,X1            * LOAD DATA IN STACK INTO MEMORY      7  6263  L 0!0 089          178   000+2   089
 1908                MA    LBEAAA,X2          * ADD -3 TO X2                        7  6270  # 10P 094          178  8107     094
 1909         * PUSH (0+X1:1)
 1910                MA    LKEAAA,X2          * ADD 1 TO X2                         7  6277  # 16P 094          178  8167     094
 1911                LCA   0&X1,0&X2          * LOAD DATA 0&X1 INTO STACK           7  6284  L 0'0 0!0          178   000+1   000+2
 1912         * END DEREFERENCEEXPRESSION (*ADDRP)
 1913         * PUSH (LOGAAA:3)
 1914                MA    LZDAAA,X2          * ADD 3 TO X2                         7  6291  # 24Q 094          178  8248     094
 1915                LCA   LOGAAA,0&X2        * LOAD DATA 011 INTO STACK            7  6298  L 19Q 0!0          179  8198     000+2
 1916                MA    X3,0&X2                                                  7  6305  # 099 0!0          179   099     000+2
 1917         * POP (X1:3)
 1918                LCA   0&X2,X1            * LOAD DATA IN STACK INTO MEMORY      7  6312  L 0!0 089          179   000+2   089
 1919                MA    LBEAAA,X2          * ADD -3 TO X2                        7  6319  # 10P 094          179  8107     094
 1920         * POP (0+X1:1)
 1921                LCA   0&X2,0&X1          * LOAD DATA IN STACK INTO MEMORY      7  6326  L 0!0 0'0          179   000+2   000+1
 1922                MA    LMEAAA,X2          * ADD -1 TO X2                        7  6333  # 18L 094          180  8183     094
 1923         * END ASSIGNMENT (ADDRC = (*ADDRP))
 1924         * FUNCTION CALL PUTCHAR(ADDRC)
 1925         * PUSH (5)
 1926                MA    LCEAAA,X2          * ADD 5 TO X2                         7  6340  # 11! 094          180  8110     094
 1927         * LOCAL VARIABLE (ADDRC : 11+X3)
 1928         * PUSH (11+X3:1)
 1929                MA    LKEAAA,X2          * ADD 1 TO X2                         7  6347  # 16P 094          180  8167     094
 1930                LCA   11&X3,0&X2         * LOAD DATA 11&X3 INTO STACK          7  6354  L 0A1 0!0          180   011+3   000+2
 1931         * PUSH (X3:3)
 1932                MA    LZDAAA,X2          * ADD 3 TO X2                         7  6361  # 24Q 094          180  8248     094
 1933                LCA   X3,0&X2            * LOAD DATA X3 INTO STACK             7  6368  L 099 0!0          181   099     000+2
 1934                MCW   X2,X3              * COPY X2 INTO X3                     7  6375  M 094 099          181   094     099
 1935                B     LLBAAA             * JUMP TO FUNCTION PUTCHAR            4  6382  B O17              181  2617
 1936         * POP (X3:3)
 1937                LCA   0&X2,X3            * LOAD DATA IN STACK INTO MEMORY      7  6386  L 0!0 099          181   000+2   099
 1938                MA    LBEAAA,X2          * ADD -3 TO X2                        7  6393  # 10P 094          181  8107     094
 1939         * POP (1)
 1940                MA    LMEAAA,X2          * ADD -1 TO X2                        7  6400  # 18L 094          181  8183     094
 1941         * POP (5)
 1942                MA    LIEAAA,X2          * ADD -5 TO X2                        7  6407  # 15J 094          182  8151     094
 1943         * START ASM BLOCK
 1944                W                                                              1  6414  2                  182
 1945         * END ASM BLOCK
 1946         * START ASM BLOCK
 1947                W                                                              1  6415  2                  182
1                                                                                                         PAGE   38
0 SEQ PG LIN  LABEL  OP    OPERANDS                                            SFX CT  LOCN  INSTRUCTION TYPE  CARD A-ADDR  B-ADDR

 1948         * END ASM BLOCK
 1949         * START ASM BLOCK
 1950                W                                                              1  6416  2                  182
 1951         * END ASM BLOCK
 1952         * ASSIGNMENT (ARG = (ARG + 15999))
 1953         * ADDITION (ARG + 15999)
 1954         * LOCAL VARIABLE (ARG : 6+X3)
 1955         * PUSH (6+X3:3)
 1956                MA    LZDAAA,X2          * ADD 3 TO X2                         7  6417  # 24Q 094          182  8248     094
 1957                LCA   6&X3,0&X2          * LOAD DATA 6&X3 INTO STACK           7  6424  L 0?6 0!0          182   006+3   000+2
 1958         * CONSTANT (15999 : LMEAAA)
 1959         * PUSH (LMEAAA:3)
 1960                MA    LZDAAA,X2          * ADD 3 TO X2                         7  6431  # 24Q 094          182  8248     094
 1961                LCA   LMEAAA,0&X2        * LOAD DATA I9I INTO STACK            7  6438  L 18L 0!0          183  8183     000+2
 1962                MA    0&X2,15997&X2      * ADD                                 7  6445  # 0!0 IRG          183   000+2 15997+2
 1963         * POP (3)
 1964                MA    LBEAAA,X2          * ADD -3 TO X2                        7  6452  # 10P 094          183  8107     094
 1965         * PUSH (LAEAAA:3)
 1966                MA    LZDAAA,X2          * ADD 3 TO X2                         7  6459  # 24Q 094          183  8248     094
 1967                LCA   LAEAAA,0&X2        * LOAD DATA 006 INTO STACK            7  6466  L 10M 0!0          183  8104     000+2
 1968                MA    X3,0&X2                                                  7  6473  # 099 0!0          184   099     000+2
 1969         * POP (X1:3)
 1970                LCA   0&X2,X1            * LOAD DATA IN STACK INTO MEMORY      7  6480  L 0!0 089          184   000+2   089
 1971                MA    LBEAAA,X2          * ADD -3 TO X2                        7  6487  # 10P 094          184  8107     094
 1972         * POP (0+X1:3)
 1973                LCA   0&X2,0&X1          * LOAD DATA IN STACK INTO MEMORY      7  6494  L 0!0 0'0          184   000+2   000+1
 1974                MA    LBEAAA,X2          * ADD -3 TO X2                        7  6501  # 10P 094          184  8107     094
 1975         * END ASSIGNMENT (ARG = (ARG + 15999))
 1976         LYCAAA NOP                      * RETURN                              1  6508  N                  184
 1977                BCE   LTCAAA,RF,R        * JUMP BACK TO CALLER                 8  6509  B N4X 340 R        185  6547     340
 1978         * ENDBLOCK [BLOCK LYCAAA:LTCAAA]
 1979         ***************************************
 1980         *
 1981                B     LBDAAA             * JUMP WHEN TRUE                      4  6517  B N4S              185  6542
 1982         LADAAA NOP                      * EXECUTED WHEN FALSE                 1  6521  N                  185
 1983         *
 1984         ***************************************
 1985         * BEGINBLOCK [BLOCK LZCAAA:LTCAAA]
 1986         * SET THE RETURN FLAG, SO WE KNOW DO DEALLOCATE OUR STACK
 1987                MCW   @R@,RF             * PUT R INTO LOCATION RF              7  6522  M 25N 340          185  8255     340
 1988                B     LZCAAA             * JUMP BACK TO CALLER                 4  6529  B N3T              185  6533
 1989         LZCAAA NOP                      * RETURN                              1  6533  N                  185
 1990                BCE   LTCAAA,RF,R        * JUMP BACK TO CALLER                 8  6534  B N4X 340 R        185  6547     340
 1991         * ENDBLOCK [BLOCK LZCAAA:LTCAAA]
 1992         ***************************************
 1993         *
 1994         LBDAAA NOP                      * EXECUTED WHEN TRUE                  1  6542  N                  186
 1995         LDDAAA NOP                      * EXECUTED WHEN TRUE                  1  6543  N                  186
 1996         LFDAAA NOP                      * EXECUTED WHEN TRUE                  1  6544  N                  186
 1997         LHDAAA NOP                      * EXECUTED WHEN TRUE                  1  6545  N                  186
1                                                                                                         PAGE   39
0 SEQ PG LIN  LABEL  OP    OPERANDS                                            SFX CT  LOCN  INSTRUCTION TYPE  CARD A-ADDR  B-ADDR

 1998         LJDAAA NOP                      * EXECUTED WHEN TRUE                  1  6546  N                  186
 1999         LTCAAA NOP                      * RETURN                              1  6547  N                  186
 2000                BCE   LRCAAA,RF,R        * JUMP BACK TO CALLER                 8  6548  B N5X 340 R        186  6557     340
 2001         * ENDBLOCK [BLOCK LTCAAA:LRCAAA]
 2002         ***************************************
 2003         *
 2004         LLDAAA NOP                      * EXECUTED WHEN TRUE                  1  6556  N                  187
 2005         LRCAAA NOP                      * RETURN                              1  6557  N                  187
 2006                BCE   LQCAAA,RF,R        * JUMP BACK TO CALLER                 8  6558  B N7/ 340 R        187  6571     340
 2007         * ENDBLOCK [BLOCK LRCAAA:LQCAAA]
 2008         ***************************************
 2009         *
 2010                B     LMDAAA             * JUMP TO TOP                         4  6566  B 28V              187  4285
 2011         LNDAAA NOP                      * BOTTOM OF THE WHILE LOOP            1  6570  N                  187
 2012         *
 2013         LQCAAA NOP                      * RETURN                              1  6571  N                  187
 2014                MA    LNHAAA,X2          * RESERVE 11 BYTES OF SPACE ON ST     7  6572  # 19N 094          187  8195     094
 2015                MCW   @ @,RF             * CLEAR THE RETURN FLAG               7  6579  M 25O 340          188  8256     340
 2016         * ENDBLOCK [BLOCK LQCAAA:NULL]
 2017         ***************************************
 2018         *
 2019                LCA   3&X3,X1            * LOAD RETURN ADDRESS TO X1           7  6586  L 0?3 089          188   003+3   089
 2020                B     0&X1               * JUMP BACK TO CALLER                 4  6593  B 0'0              188   000+1
 2021         *
 2022         ***************************************************************************
 2023         * END FUNCTION : PRINTF
 2024         ***************************************************************************
 2025         *
 2026         ***************************************************************************
 2027         * FUNCTION : STRLEN
 2028         ***************************************************************************
 2029         LFAAAA SBR   3&X3               * SAVE RETURN ADDRESS IN REGISTER     4  6597  H 0?3              188   003+3
 2030                SW    1&X3               * SET THE WM                          4  6601  , 0?1              188   001+3
 2031                CW    2&X3               * CLEAN WM                            4  6605  ) 0?2              188   002+3
 2032                CW    3&X3               * CLEAN WM                            4  6609  ) 0?3              188   003+3
 2033         *
 2034         ***************************************
 2035         * BEGINBLOCK [BLOCK LGAAAA:NULL]
 2036                LCA   LOHAAA,8&X3        * LOAD INT -1 INTO MEMORY 8&X3        7  6613  L 20L 0?8          189  8203     008+3
 2037                MA    LPHAAA,X2          * RESERVE 8 BYTES OF SPACE ON STA     7  6620  # 20P 094          189  8207     094
 2038         * WHILE [WHILE (((STR[(++LEN)]) != '\0')) [] TOP:LHAAAA BOTTOM:LIAAAA]
 2039         LHAAAA NOP                      * TOP OF THE LOOP                     1  6627  N                  189
 2040         * NOTEQUAL (!=) ((STR[(++LEN)]) != '\0')
 2041         * SUBSCRIPT (STR[(++LEN)])
 2042         * PARAMETER VARIABLE (STR : 15997+X3)
 2043         * PUSH (15997+X3:3)
 2044                MA    LZDAAA,X2          * ADD 3 TO X2                         7  6628  # 24Q 094          189  8248     094
 2045                LCA   15997&X3,0&X2      * LOAD DATA 15997&X3 INTO STACK       7  6635  L IIG 0!0          189 15997+3   000+2
 2046         * PREINCREMENT((++LEN)
 2047         * PUSH (LPHAAA:3)
1                                                                                                         PAGE   40
0 SEQ PG LIN  LABEL  OP    OPERANDS                                            SFX CT  LOCN  INSTRUCTION TYPE  CARD A-ADDR  B-ADDR

 2048                MA    LZDAAA,X2          * ADD 3 TO X2                         7  6642  # 24Q 094          189  8248     094
 2049                LCA   LPHAAA,0&X2        * LOAD DATA 008 INTO STACK            7  6649  L 20P 0!0          190  8207     000+2
 2050                MA    X3,0&X2                                                  7  6656  # 099 0!0          190   099     000+2
 2051         * POP (X1:3)
 2052                LCA   0&X2,X1            * LOAD DATA IN STACK INTO MEMORY      7  6663  L 0!0 089          190   000+2   089
 2053                MA    LBEAAA,X2          * ADD -3 TO X2                        7  6670  # 10P 094          190  8107     094
 2054                A     LXDAAA,0&X1        * PREINCREMENT VARIABLE POINTED B     7  6677  A 23Q 0'0          190  8238     000+1
 2055         * PUSH (0+X1:5)
 2056                MA    LCEAAA,X2          * ADD 5 TO X2                         7  6684  # 11! 094          191  8110     094
 2057                LCA   0&X1,0&X2          * LOAD DATA 0&X1 INTO STACK           7  6691  L 0'0 0!0          191   000+1   000+2
 2058         * PUT RAW INDEX ON THE STACK
 2059         * PUSH (LXDAAA:5)
 2060                MA    LCEAAA,X2          * ADD 5 TO X2                         7  6698  # 11! 094          191  8110     094
 2061                LCA   LXDAAA,0&X2        * LOAD DATA 00001 INTO STACK          7  6705  L 23Q 0!0          191  8238     000+2
 2062                M     15995&X2,6&X2                                            7  6712  @ IRE 0!6          191 15995+2   006+2
 2063                SW    2&X2                                                     4  6719  , 0!2              191   002+2
 2064                LCA   6&X2,15995&X2                                            7  6723  L 0!6 IRE          192   006+2 15995+2
 2065         * POP (5)
 2066                MA    LIEAAA,X2          * ADD -5 TO X2                        7  6730  # 15J 094          192  8151     094
 2067         * STACK TOP IS NOW ARRAY INDEX
 2068                B     LYEAAA             * JUMP TO SNIPPET NUMBER_TO_POINT     4  6737  B G2S              192  7722
 2069                MA    0&X2,15997&X2                                            7  6741  # 0!0 IRG          192   000+2 15997+2
 2070         * POP (3)
 2071                MA    LBEAAA,X2          * ADD -3 TO X2                        7  6748  # 10P 094          192  8107     094
 2072         * STACK TOP IS LOCATION IN ARRAY NOW
 2073         * END SUBSCRIPT (STR[(++LEN)])
 2074         * POP (X1:3)
 2075                LCA   0&X2,X1            * LOAD DATA IN STACK INTO MEMORY      7  6755  L 0!0 089          192   000+2   089
 2076                MA    LBEAAA,X2          * ADD -3 TO X2                        7  6762  # 10P 094          193  8107     094
 2077         * PUSH (0+X1:1)
 2078                MA    LKEAAA,X2          * ADD 1 TO X2                         7  6769  # 16P 094          193  8167     094
 2079                LCA   0&X1,0&X2          * LOAD DATA 0&X1 INTO STACK           7  6776  L 0'0 0!0          193   000+1   000+2
 2080         * CONSTANT ('\0' : EOS)
 2081         * PUSH (EOS:1)
 2082                MA    LKEAAA,X2          * ADD 1 TO X2                         7  6783  # 16P 094          193  8167     094
 2083                LCA   EOS,0&X2           * LOAD DATA EOS INTO STACK            7  6790  L 345 0!0          193   345     000+2
 2084                C     0&X2,15999&X2      * COMPARE                             7  6797  C 0!0 IRI          194   000+2 15999+2
 2085         * POP (1)
 2086                MA    LMEAAA,X2          * ADD -1 TO X2                        7  6804  # 18L 094          194  8183     094
 2087         * POP (1)
 2088                MA    LMEAAA,X2          * ADD -1 TO X2                        7  6811  # 18L 094          194  8183     094
 2089         * PUSH (LXDAAA:5)
 2090                MA    LCEAAA,X2          * ADD 5 TO X2                         7  6818  # 11! 094          194  8110     094
 2091                LCA   LXDAAA,0&X2        * LOAD DATA 00001 INTO STACK          7  6825  L 23Q 0!0          194  8238     000+2
 2092                BE    LQHAAA             * JUMP IF EQUAL                       5  6832  B Q4/ S            195  6841
 2093                B     LRHAAA             * JUMP TO END                         4  6837  B Q4Y              195  6848
 2094         LQHAAA MCW   LFEAAA,0&X2        * EQUAL: SET STACK LOCATION TO 0      7  6841  M 12N 0!0          195  8125     000+2
 2095         LRHAAA NOP                      * END OF NOTEQUAL                     1  6848  N                  195
 2096                MCS   0&X2,0&X2          * CLEAR WM                            7  6849  Z 0!0 0!0          195   000+2   000+2
 2097         * POP (5)
1                                                                                                         PAGE   41
0 SEQ PG LIN  LABEL  OP    OPERANDS                                            SFX CT  LOCN  INSTRUCTION TYPE  CARD A-ADDR  B-ADDR

 2098                MA    LIEAAA,X2          * ADD -5 TO X2                        7  6856  # 15J 094          195  8151     094
 2099                BCE   LIAAAA,5&X2,       * JUMP TO BOTTOM                      8  6863  B Q7V 0!5          195  6875     005+2
 2100                B     LHAAAA             * JUMP TO TOP                         4  6871  B O2X              196  6627
 2101         LIAAAA NOP                      * BOTTOM OF THE WHILE LOOP            1  6875  N                  196
 2102         *
 2103         * LOCAL VARIABLE (LEN : 8+X3)
 2104         * PUSH (8+X3:5)
 2105                MA    LCEAAA,X2          * ADD 5 TO X2                         7  6876  # 11! 094          196  8110     094
 2106                LCA   8&X3,0&X2          * LOAD DATA 8&X3 INTO STACK           7  6883  L 0?8 0!0          196   008+3   000+2
 2107         * POP (15994+X3:5)
 2108                LCA   0&X2,15994&X3      * LOAD DATA IN STACK INTO MEMORY      7  6890  L 0!0 IID          196   000+2 15994+3
 2109                MA    LIEAAA,X2          * ADD -5 TO X2                        7  6897  # 15J 094          196  8151     094
 2110         * SET THE RETURN FLAG, SO WE KNOW DO DEALLOCATE OUR STACK
 2111                MCW   @R@,RF             * PUT R INTO LOCATION RF              7  6904  M 25N 340          197  8255     340
 2112                B     LGAAAA             * JUMP BACK TO CALLER                 4  6911  B R1V              197  6915
 2113         LGAAAA NOP                      * RETURN                              1  6915  N                  197
 2114                MA    LLEAAA,X2          * RESERVE 8 BYTES OF SPACE ON STA     7  6916  # 17L 094          197  8173     094
 2115                MCW   @ @,RF             * CLEAR THE RETURN FLAG               7  6923  M 25O 340          197  8256     340
 2116         * ENDBLOCK [BLOCK LGAAAA:NULL]
 2117         ***************************************
 2118         *
 2119                LCA   3&X3,X1            * LOAD RETURN ADDRESS TO X1           7  6930  L 0?3 089          197   003+3   089
 2120                B     0&X1               * JUMP BACK TO CALLER                 4  6937  B 0'0              197   000+1
 2121         *
 2122         ***************************************************************************
 2123         * END FUNCTION : STRLEN
 2124         ***************************************************************************
 2125         *
 2126         ***************************************************************************
 2127         * FUNCTION : GENRAND
 2128         ***************************************************************************
 2129         LBAAAA SBR   3&X3               * SAVE RETURN ADDRESS IN REGISTER     4  6941  H 0?3              198   003+3
 2130                SW    1&X3               * SET THE WM                          4  6945  , 0?1              198   001+3
 2131                CW    2&X3               * CLEAN WM                            4  6949  ) 0?2              198   002+3
 2132                CW    3&X3               * CLEAN WM                            4  6953  ) 0?3              198   003+3
 2133         *
 2134         ***************************************
 2135         * BEGINBLOCK [BLOCK LCAAAA:NULL]
 2136                MA    LZDAAA,X2          * RESERVE 3 BYTES OF SPACE ON STA     7  6957  # 24Q 094          198  8248     094
 2137         * ASSIGNMENT (SEED = (((42 * SEED) + 19) % 100000))
 2138         * MODULO (%) (((42 * SEED) + 19) % 100000)
 2139         * CONSTANT (100000 : LSHAAA)
 2140         * PUSH (LSHAAA:5)
 2141                MA    LCEAAA,X2          * ADD 5 TO X2                         7  6964  # 11! 094          198  8110     094
 2142                LCA   LSHAAA,0&X2        * LOAD DATA 100000 INTO STACK         7  6971  L 21O 0!0          198  8216     000+2
 2143         * ADDITION ((42 * SEED) + 19)
 2144         * MULTIPLY (42 * SEED)
 2145         * CONSTANT (42 : LTHAAA)
 2146         * PUSH (LTHAAA:5)
 2147                MA    LCEAAA,X2          * ADD 5 TO X2                         7  6978  # 11! 094          199  8110     094
1                                                                                                         PAGE   42
0 SEQ PG LIN  LABEL  OP    OPERANDS                                            SFX CT  LOCN  INSTRUCTION TYPE  CARD A-ADDR  B-ADDR

 2148                LCA   LTHAAA,0&X2        * LOAD DATA 00042 INTO STACK          7  6985  L 22J 0!0          199  8221     000+2
 2149         * STATIC VARIABLE (SEED : 604)
 2150         * PUSH (604:5)
 2151                MA    LCEAAA,X2          * ADD 5 TO X2                         7  6992  # 11! 094          199  8110     094
 2152                LCA   604,0&X2           * LOAD DATA 604 INTO STACK            7  6999  L 604 0!0          199   604     000+2
 2153                M     15995&X2,6&X2      * MULTIPLY                            7  7006  @ IRE 0!6          199 15995+2   006+2
 2154                SW    2&X2                                                     4  7013  , 0!2              199   002+2
 2155                LCA   6&X2,15995&X2                                            7  7017  L 0!6 IRE          200   006+2 15995+2
 2156         * POP (5)
 2157                MA    LIEAAA,X2          * ADD -5 TO X2                        7  7024  # 15J 094          200  8151     094
 2158         * CONSTANT (19 : LUHAAA)
 2159         * PUSH (LUHAAA:5)
 2160                MA    LCEAAA,X2          * ADD 5 TO X2                         7  7031  # 11! 094          200  8110     094
 2161                LCA   LUHAAA,0&X2        * LOAD DATA 00019 INTO STACK          7  7038  L 22P 0!0          200  8227     000+2
 2162                A     0&X2,15995&X2      * ADD                                 7  7045  A 0!0 IRE          200   000+2 15995+2
 2163         * POP (5)
 2164                MA    LIEAAA,X2          * ADD -5 TO X2                        7  7052  # 15J 094          201  8151     094
 2165                B     LQEAAA             * JUMP TO SNIPPET SNIP_DIV            4  7059  B E4W              201  7546
 2166         * POP (5)
 2167                MA    LIEAAA,X2          * ADD -5 TO X2                        7  7063  # 15J 094          201  8151     094
 2168         * PUSH (LVHAAA:3)
 2169                MA    LZDAAA,X2          * ADD 3 TO X2                         7  7070  # 24Q 094          201  8248     094
 2170                LCA   LVHAAA,0&X2        * LOAD DATA 604 INTO STACK            7  7077  L 23! 0!0          201  8230     000+2
 2171         * POP (X1:3)
 2172                LCA   0&X2,X1            * LOAD DATA IN STACK INTO MEMORY      7  7084  L 0!0 089          201   000+2   089
 2173                MA    LBEAAA,X2          * ADD -3 TO X2                        7  7091  # 10P 094          202  8107     094
 2174         * POP (0+X1:5)
 2175                LCA   0&X2,0&X1          * LOAD DATA IN STACK INTO MEMORY      7  7098  L 0!0 0'0          202   000+2   000+1
 2176                MA    LIEAAA,X2          * ADD -5 TO X2                        7  7105  # 15J 094          202  8151     094
 2177         * END ASSIGNMENT (SEED = (((42 * SEED) + 19) % 100000))
 2178         * STATIC VARIABLE (SEED : 604)
 2179         * PUSH (604:5)
 2180                MA    LCEAAA,X2          * ADD 5 TO X2                         7  7112  # 11! 094          202  8110     094
 2181                LCA   604,0&X2           * LOAD DATA 604 INTO STACK            7  7119  L 604 0!0          202   604     000+2
 2182         * POP (15997+X3:5)
 2183                LCA   0&X2,15997&X3      * LOAD DATA IN STACK INTO MEMORY      7  7126  L 0!0 IIG          203   000+2 15997+3
 2184                MA    LIEAAA,X2          * ADD -5 TO X2                        7  7133  # 15J 094          203  8151     094
 2185         * SET THE RETURN FLAG, SO WE KNOW DO DEALLOCATE OUR STACK
 2186                MCW   @R@,RF             * PUT R INTO LOCATION RF              7  7140  M 25N 340          203  8255     340
 2187                B     LCAAAA             * JUMP BACK TO CALLER                 4  7147  B A5/              203  7151
 2188         LCAAAA NOP                      * RETURN                              1  7151  N                  203
 2189                MA    LBEAAA,X2          * RESERVE 3 BYTES OF SPACE ON STA     7  7152  # 10P 094          203  8107     094
 2190                MCW   @ @,RF             * CLEAR THE RETURN FLAG               7  7159  M 25O 340          204  8256     340
 2191         * ENDBLOCK [BLOCK LCAAAA:NULL]
 2192         ***************************************
 2193         *
 2194                LCA   3&X3,X1            * LOAD RETURN ADDRESS TO X1           7  7166  L 0?3 089          204   003+3   089
 2195                B     0&X1               * JUMP BACK TO CALLER                 4  7173  B 0'0              204   000+1
 2196         *
 2197         ***************************************************************************
1                                                                                                         PAGE   43
0 SEQ PG LIN  LABEL  OP    OPERANDS                                            SFX CT  LOCN  INSTRUCTION TYPE  CARD A-ADDR  B-ADDR

 2198         * END FUNCTION : GENRAND
 2199         ***************************************************************************
 2200         *
 2201         ***************************************************************************
 2202         * FUNCTION : PUTS
 2203         ***************************************************************************
 2204         LWBAAA SBR   3&X3               * SAVE RETURN ADDRESS IN REGISTER     4  7177  H 0?3              204   003+3
 2205                SW    1&X3               * SET THE WM                          4  7181  , 0?1              204   001+3
 2206                CW    2&X3               * CLEAN WM                            4  7185  ) 0?2              204   002+3
 2207                CW    3&X3               * CLEAN WM                            4  7189  ) 0?3              204   003+3
 2208         *
 2209         ***************************************
 2210         * BEGINBLOCK [BLOCK LXBAAA:NULL]
 2211                MA    LZDAAA,X2          * RESERVE 3 BYTES OF SPACE ON STA     7  7193  # 24Q 094          205  8248     094
 2212         * WHILE [WHILE (((*S) != '\0')) [BLOCK LYBAAA:LXBAAA] TOP:LZBAAA BOTTOM:LAC
 2213         LZBAAA NOP                      * TOP OF THE LOOP                     1  7200  N                  205
 2214         * NOTEQUAL (!=) ((*S) != '\0')
 2215         * DEREFERENCEEXPRESSION (*S)
 2216         * PARAMETER VARIABLE (S : 15997+X3)
 2217         * PUSH (15997+X3:3)
 2218                MA    LZDAAA,X2          * ADD 3 TO X2                         7  7201  # 24Q 094          205  8248     094
 2219                LCA   15997&X3,0&X2      * LOAD DATA 15997&X3 INTO STACK       7  7208  L IIG 0!0          205 15997+3   000+2
 2220         * POP (X1:3)
 2221                LCA   0&X2,X1            * LOAD DATA IN STACK INTO MEMORY      7  7215  L 0!0 089          205   000+2   089
 2222                MA    LBEAAA,X2          * ADD -3 TO X2                        7  7222  # 10P 094          205  8107     094
 2223         * PUSH (0+X1:1)
 2224                MA    LKEAAA,X2          * ADD 1 TO X2                         7  7229  # 16P 094          206  8167     094
 2225                LCA   0&X1,0&X2          * LOAD DATA 0&X1 INTO STACK           7  7236  L 0'0 0!0          206   000+1   000+2
 2226         * END DEREFERENCEEXPRESSION (*S)
 2227         * CONSTANT ('\0' : EOS)
 2228         * PUSH (EOS:1)
 2229                MA    LKEAAA,X2          * ADD 1 TO X2                         7  7243  # 16P 094          206  8167     094
 2230                LCA   EOS,0&X2           * LOAD DATA EOS INTO STACK            7  7250  L 345 0!0          206   345     000+2
 2231                C     0&X2,15999&X2      * COMPARE                             7  7257  C 0!0 IRI          206   000+2 15999+2
 2232         * POP (1)
 2233                MA    LMEAAA,X2          * ADD -1 TO X2                        7  7264  # 18L 094          207  8183     094
 2234         * POP (1)
 2235                MA    LMEAAA,X2          * ADD -1 TO X2                        7  7271  # 18L 094          207  8183     094
 2236         * PUSH (LXDAAA:5)
 2237                MA    LCEAAA,X2          * ADD 5 TO X2                         7  7278  # 11! 094          207  8110     094
 2238                LCA   LXDAAA,0&X2        * LOAD DATA 00001 INTO STACK          7  7285  L 23Q 0!0          207  8238     000+2
 2239                BE    LWHAAA             * JUMP IF EQUAL                       5  7292  B C0/ S            207  7301
 2240                B     LXHAAA             * JUMP TO END                         4  7297  B C0Y              207  7308
 2241         LWHAAA MCW   LFEAAA,0&X2        * EQUAL: SET STACK LOCATION TO 0      7  7301  M 12N 0!0          208  8125     000+2
 2242         LXHAAA NOP                      * END OF NOTEQUAL                     1  7308  N                  208
 2243                MCS   0&X2,0&X2          * CLEAR WM                            7  7309  Z 0!0 0!0          208   000+2   000+2
 2244         * POP (5)
 2245                MA    LIEAAA,X2          * ADD -5 TO X2                        7  7316  # 15J 094          208  8151     094
 2246                BCE   LACAAA,5&X2,       * JUMP TO BOTTOM                      8  7323  B D8Y 0!5          208  7488     005+2
 2247         *
1                                                                                                         PAGE   44
0 SEQ PG LIN  LABEL  OP    OPERANDS                                            SFX CT  LOCN  INSTRUCTION TYPE  CARD A-ADDR  B-ADDR

 2248         ***************************************
 2249         * BEGINBLOCK [BLOCK LYBAAA:LXBAAA]
 2250         * FUNCTION CALL PUTCHAR((*(S++)))
 2251         * PUSH (5)
 2252                MA    LCEAAA,X2          * ADD 5 TO X2                         7  7331  # 11! 094          208  8110     094
 2253         * DEREFERENCEEXPRESSION (*(S++))
 2254         * POSTINCREMENT (S++)
 2255         * PUSH (LBEAAA:3)
 2256                MA    LZDAAA,X2          * ADD 3 TO X2                         7  7338  # 24Q 094          209  8248     094
 2257                LCA   LBEAAA,0&X2        * LOAD DATA I9G INTO STACK            7  7345  L 10P 0!0          209  8107     000+2
 2258                MA    X3,0&X2                                                  7  7352  # 099 0!0          209   099     000+2
 2259         * POP (X1:3)
 2260                LCA   0&X2,X1            * LOAD DATA IN STACK INTO MEMORY      7  7359  L 0!0 089          209   000+2   089
 2261                MA    LBEAAA,X2          * ADD -3 TO X2                        7  7366  # 10P 094          209  8107     094
 2262         * PUSH (0+X1:3)
 2263                MA    LZDAAA,X2          * ADD 3 TO X2                         7  7373  # 24Q 094          210  8248     094
 2264                LCA   0&X1,0&X2          * LOAD DATA 0&X1 INTO STACK           7  7380  L 0'0 0!0          210   000+1   000+2
 2265                MA    LKEAAA,0&X1        * POSTINCREMENT POINTER POINTED B     7  7387  # 16P 0'0          210  8167     000+1
 2266         * POP (X1:3)
 2267                LCA   0&X2,X1            * LOAD DATA IN STACK INTO MEMORY      7  7394  L 0!0 089          210   000+2   089
 2268                MA    LBEAAA,X2          * ADD -3 TO X2                        7  7401  # 10P 094          210  8107     094
 2269         * PUSH (0+X1:1)
 2270                MA    LKEAAA,X2          * ADD 1 TO X2                         7  7408  # 16P 094          211  8167     094
 2271                LCA   0&X1,0&X2          * LOAD DATA 0&X1 INTO STACK           7  7415  L 0'0 0!0          211   000+1   000+2
 2272         * END DEREFERENCEEXPRESSION (*(S++))
 2273         * PUSH (X3:3)
 2274                MA    LZDAAA,X2          * ADD 3 TO X2                         7  7422  # 24Q 094          211  8248     094
 2275                LCA   X3,0&X2            * LOAD DATA X3 INTO STACK             7  7429  L 099 0!0          211   099     000+2
 2276                MCW   X2,X3              * COPY X2 INTO X3                     7  7436  M 094 099          211   094     099
 2277                B     LLBAAA             * JUMP TO FUNCTION PUTCHAR            4  7443  B O17              211  2617
 2278         * POP (X3:3)
 2279                LCA   0&X2,X3            * LOAD DATA IN STACK INTO MEMORY      7  7447  L 0!0 099          212   000+2   099
 2280                MA    LBEAAA,X2          * ADD -3 TO X2                        7  7454  # 10P 094          212  8107     094
 2281         * POP (1)
 2282                MA    LMEAAA,X2          * ADD -1 TO X2                        7  7461  # 18L 094          212  8183     094
 2283         * POP (5)
 2284                MA    LIEAAA,X2          * ADD -5 TO X2                        7  7468  # 15J 094          212  8151     094
 2285         LYBAAA NOP                      * RETURN                              1  7475  N                  212
 2286                BCE   LXBAAA,RF,R        * JUMP BACK TO CALLER                 8  7476  B D8Z 340 R        212  7489     340
 2287         * ENDBLOCK [BLOCK LYBAAA:LXBAAA]
 2288         ***************************************
 2289         *
 2290                B     LZBAAA             * JUMP TO TOP                         4  7484  B B0'              213  7200
 2291         LACAAA NOP                      * BOTTOM OF THE WHILE LOOP            1  7488  N                  213
 2292         *
 2293         LXBAAA NOP                      * RETURN                              1  7489  N                  213
 2294                MA    LBEAAA,X2          * RESERVE 3 BYTES OF SPACE ON STA     7  7490  # 10P 094          213  8107     094
 2295                MCW   @ @,RF             * CLEAR THE RETURN FLAG               7  7497  M 25O 340          213  8256     340
 2296         * ENDBLOCK [BLOCK LXBAAA:NULL]
 2297         ***************************************
1                                                                                                         PAGE   45
0 SEQ PG LIN  LABEL  OP    OPERANDS                                            SFX CT  LOCN  INSTRUCTION TYPE  CARD A-ADDR  B-ADDR

 2298         *
 2299                LCA   3&X3,X1            * LOAD RETURN ADDRESS TO X1           7  7504  L 0?3 089          213   003+3   089
 2300                B     0&X1               * JUMP BACK TO CALLER                 4  7511  B 0'0              213   000+1
 2301         *
 2302         ***************************************************************************
 2303         * END FUNCTION : PUTS
 2304         ***************************************************************************
 2305         ****************************************************************
 2306         ** CLEAN NUMBER SNIPPET                                       **
 2307         ****************************************************************
 2308         *
 2309         * NORMALIZES THE ZONE BITS OF A NUMBER, LEAVING EITHER A=0B=0
 2310         * FOR A POSITIVE OR A=0B=1 FOR A NEGATIVE
 2311         LDEAAA SBR   X1                                                       4  7515  H 089              214   089
 2312         * DO NOTHING ON EITHER NO ZONE BITS OR ONLY A B ZONE BIT
 2313                BWZ   LEEAAA,0&X2,2                                            8  7519  V E4S 0!0 2        214  7542     000+2
 2314                BWZ   LEEAAA,0&X2,K                                            8  7527  V E4S 0!0 K        214  7542     000+2
 2315         * ELSE CLEAR THE ZONE BITS, AS IT IS POSITIVE
 2316                MZ    @ @,0&X2                                                 7  7535  Y 25O 0!0          214  8256     000+2
 2317         LEEAAA B     0&X1                                                     4  7542  B 0'0              214   000+1
 2318         *
 2319         ****************************************************************
 2320         ****************************************************************
 2321         ** DIVISION SNIPPET                                           **
 2322         ****************************************************************
 2323         *
 2324         LQEAAA SBR   LREAAA&3           * SETUP RETURN ADDRESS                4  7546  H G0/              214  7701
 2325         * POP DIVIDEND
 2326                MCW   0&X2, LSEAAA                                             7  7550  M 0!0 G1/          215   000+2  7711
 2327                SBR   X2, 15995&X2                                             7  7557  H 094 IRE          215   094   15995+2
 2328         *
 2329         * POP DIVISOR
 2330                MCW   0&X2, LTEAAA                                             7  7564  M 0!0 G0W          215   000+2  7706
 2331                SBR   X2, 15995&X2                                             7  7571  H 094 IRE          215   094   15995+2
 2332         *
 2333                B     *&17                                                     4  7578  B E9Y              215  7598
 2334         *
 2335                DCW   @00000@                                                  5  7586                     215
 2336                DC    @00000000000@                                           11  7597                     216
 2337         *
 2338                ZA    LSEAAA, *-7         * PUT DIVIDEND INTO WORKING BL       7  7598  ? G1/ E9X          216  7711    7597
 2339                D     LTEAAA, *-19        * DIVIDE                             7  7605  % G0W E9S          216  7706    7592
 2340                MZ    *-22, *-21          * KILL THE ZONE BIT                  7  7612  Y E9W E9X          216  7596    7597
 2341                MZ    *-29, *-34          * KILL THE ZONE BIT                  7  7619  Y E9W E9/          216  7596    7591
 2342                MCW   *-41, LUEAAA        * PICK UP ANSWER                     7  7626  M E9/ G1W          217  7591    7716
 2343                SW    *-44                * SO I CAN PICKUP REMAINDER          4  7633  , E9S              217  7592
 2344                MCW   *-46, LVEAAA        * GET REMAINDER                      7  7637  M E9X G2/          217  7597    7721
 2345                CW    *-55                * CLEAR THE WM                       4  7644  ) E9S              217  7592
 2346                MZ    LUEAAA-1, LUEAAA    * CLEANUP QUOTIENT BITZONE           7  7648  Y G1V G1W          217  7715    7716
 2347                MZ    LVEAAA-1, LVEAAA    * CLEANUP REMAINDER BITZONE          7  7655  Y G2' G2/          217  7720    7721
1                                                                                                         PAGE   46
0 SEQ PG LIN  LABEL  OP    OPERANDS                                            SFX CT  LOCN  INSTRUCTION TYPE  CARD A-ADDR  B-ADDR

 2348         *
 2349         * PUSH REMAINDER
 2350                SBR   X2, 5&X2                                                 7  7662  H 094 0!5          218   094     005+2
 2351                SW    15996&X2                                                 4  7669  , IRF              218 15996+2
 2352                MCW   LVEAAA, 0&X2                                             7  7673  M G2/ 0!0          218  7721     000+2
 2353         *
 2354         * PUSH QUOTIENT
 2355                SBR   X2, 5&X2                                                 7  7680  H 094 0!5          218   094     005+2
 2356                SW    15996&X2                                                 4  7687  , IRF              218 15996+2
 2357                MCW   LUEAAA, 0&X2                                             7  7691  M G1W 0!0          218  7716     000+2
 2358         *
 2359         LREAAA B     000                 * JUMP BACK                          4  7698  B 000              219   000
 2360         *
 2361         LTEAAA DCW   00000               * DIVISOR                            5  7706                     219
 2362         LSEAAA DCW   00000               * DIVIDEND                           5  7711                     219
 2363         LUEAAA DCW   00000               * QUOTIENT                           5  7716                     219
 2364         LVEAAA DCW   00000               * REMAINDER                          5  7721                     219
 2365         *
 2366         ****************************************************************
 2367         *
 2368         ****************************************************************
 2369         ** CAST NUMBER TO POINTER SNIPPET                             **
 2370         ****************************************************************
 2371         *
 2372         LYEAAA SBR   X1                                                       4  7722  H 089              219   089
 2373         * CASTS A 5-DIGIT NUMBER TO A 3-DIGIT ADDRESS
 2374         * MAKE A COPY OF THE TOP OF THE STACK
 2375                SW    15998&X2                                                 4  7726  , IRH              219 15998+2
 2376                LCA   0&X2,3&X2                                                7  7730  L 0!0 0!3          220   000+2   003+2
 2377                CW    15998&X2                                                 4  7737  ) IRH              220 15998+2
 2378         * ZERO OUT THE ZONE BITS OF OUR COPY
 2379                MZ    @0@,3&X2                                                 7  7741  Y 25M 0!3          220  8254     003+2
 2380                MZ    @0@,2&X2                                                 7  7748  Y 25M 0!2          220  8254     002+2
 2381                MZ    @0@,1&X2                                                 7  7755  Y 25M 0!1          220  8254     001+2
 2382         * SET THE LOW-ORDER DIGIT'S ZONE BITS
 2383                C     @04000@,0&X2                                             7  7762  C 26O 0!0          220  8266     000+2
 2384                BL    LBFAAA                                                   5  7769  B H4Y T            221  7848
 2385                C     @08000@,0&X2                                             7  7774  C 27J 0!0          221  8271     000+2
 2386                BL    LAFAAA                                                   5  7781  B H3U T            221  7834
 2387                C     @12000@,0&X2                                             7  7786  C 27O 0!0          221  8276     000+2
 2388                BL    LZEAAA                                                   5  7793  B H1W T            221  7816
 2389                S     @12000@,0&X2                                             7  7798  S 28J 0!0          221  8281     000+2
 2390                MZ    @A@,3&X2                                                 7  7805  Y 28K 0!3          222  8282     003+2
 2391                B     LBFAAA                                                   4  7812  B H4Y              222  7848
 2392         LZEAAA S     @08000@,0&X2                                             7  7816  S 28P 0!0          222  8287     000+2
 2393                MZ    @I@,3&X2                                                 7  7823  Y 28Q 0!3          222  8288     003+2
 2394                B     LBFAAA                                                   4  7830  B H4Y              222  7848
 2395         LAFAAA S     @04000@,0&X2                                             7  7834  S 29L 0!0          222  8293     000+2
 2396                MZ    @S@,3&X2                                                 7  7841  Y 25R 0!3          223  8259     003+2
 2397         * FOR SOME REASON THE ZONE BITS GET SET - IT STILL WORKS THOUGH.
1                                                                                                         PAGE   47
0 SEQ PG LIN  LABEL  OP    OPERANDS                                            SFX CT  LOCN  INSTRUCTION TYPE  CARD A-ADDR  B-ADDR

 2398         LBFAAA C     @01000@,0&X2                                             7  7848  C 29Q 0!0          223  8298     000+2
 2399                BL    LEFAAA                                                   5  7855  B I1T T            223  7913
 2400                C     @02000@,0&X2                                             7  7860  C 30L 0!0          223  8303     000+2
 2401                BL    LDFAAA                                                   5  7867  B I0W T            223  7906
 2402                C     @03000@,0&X2                                             7  7872  C 30Q 0!0          223  8308     000+2
 2403                BL    LCFAAA                                                   5  7879  B H9V T            224  7895
 2404                MZ    @A@,1&X2                                                 7  7884  Y 28K 0!1          224  8282     001+2
 2405                B     LEFAAA                                                   4  7891  B I1T              224  7913
 2406         LCFAAA MZ    @I@,1&X2                                                 7  7895  Y 28Q 0!1          224  8288     001+2
 2407                B     LEFAAA                                                   4  7902  B I1T              224  7913
 2408         LDFAAA MZ    @S@,1&X2                                                 7  7906  Y 25R 0!1          224  8259     001+2
 2409         LEFAAA LCA   3&X2,15998&X2                                            7  7913  L 0!3 IRH          225   003+2 15998+2
 2410                SBR   X2,15998&X2                                              7  7920  H 094 IRH          225   094   15998+2
 2411                B     0&X1                                                     4  7927  B 0'0              225   000+1
 2412         *
 2413         ****************************************************************
 2414         *
 2415         ****************************************************************
 2416         ** CAST POINTER TO NUMBER SNIPPET                             **
 2417         ****************************************************************
 2418         *
 2419         LMFAAA SBR   X1                                                       4  7931  H 089              225   089
 2420         * CASTS A 3-DIGIT ADDRESS TO A 5-DIGIT NUMBER
 2421         * MAKE ROOM ON THE STACK FOR AN INT
 2422                MA    @002@,X2                                                 7  7935  # 31J 094          225  8311     094
 2423         * MAKE A COPY OF THE TOP OF THE STACK
 2424                LCA   15998&X2,3&X2                                            7  7942  L IRH 0!3          225 15998+2   003+2
 2425         * NOW ZERO OUT THE TOP OF THE STACK
 2426                LCA   @00000@,0&X2                                             7  7949  L 31O 0!0          226  8316     000+2
 2427         * NOW COPY BACK, SHIFTED OVER 2 DIGITS
 2428                MCW   3&X2,0&X2                                                7  7956  M 0!3 0!0          226   003+2   000+2
 2429         * NOW ZERO OUT THE ZONE BITS ON THE STACK
 2430                MZ    @0@,0&X2                                                 7  7963  Y 25M 0!0          226  8254     000+2
 2431                MZ    @0@,15999&X2                                             7  7970  Y 25M IRI          226  8254   15999+2
 2432                MZ    @0@,15998&X2                                             7  7977  Y 25M IRH          226  8254   15998+2
 2433         * CHECK THE HIGH-ORDER DIGIT'S ZONE BITS
 2434                BWZ   LNFAAA,1&X2,S                                            8  7984  V 01K 0!1 S        227  8012     001+2
 2435                BWZ   LOFAAA,1&X2,K                                            8  7992  V 02L 0!1 K        227  8023     001+2
 2436                BWZ   LPFAAA,1&X2,B                                            8  8000  V 03M 0!1 B        227  8034     001+2
 2437                B     LQFAAA                                                   4  8008  B 04J              227  8041
 2438         LNFAAA A     @01000@,0&X2                                             7  8012  A 32J 0!0          227  8321     000+2
 2439                B     LQFAAA                                                   4  8019  B 04J              227  8041
 2440         LOFAAA A     @02000@,0&X2                                             7  8023  A 32O 0!0          228  8326     000+2
 2441                B     LQFAAA                                                   4  8030  B 04J              228  8041
 2442         LPFAAA A     @03000@,0&X2                                             7  8034  A 33J 0!0          228  8331     000+2
 2443         LQFAAA BWZ   LRFAAA,3&X2,S                                            8  8041  V 06R 0!3 S        228  8069     003+2
 2444                BWZ   LSFAAA,3&X2,K                                            8  8049  V 08! 0!3 K        228  8080     003+2
 2445                BWZ   LTFAAA,3&X2,B                                            8  8057  V 09J 0!3 B        229  8091     003+2
 2446                B     LUFAAA                                                   4  8065  B 09Q              229  8098
 2447         LRFAAA A     @04000@,0&X2                                             7  8069  A 33O 0!0          229  8336     000+2
1                                                                                                         PAGE   48
0 SEQ PG LIN  LABEL  OP    OPERANDS                                            SFX CT  LOCN  INSTRUCTION TYPE  CARD A-ADDR  B-ADDR

 2448                B     LUFAAA                                                   4  8076  B 09Q              229  8098
 2449         LSFAAA A     @08000@,0&X2                                             7  8080  A 34J 0!0          229  8341     000+2
 2450                B     LUFAAA                                                   4  8087  B 09Q              229  8098
 2451         LTFAAA A     @12000@,0&X2                                             7  8091  A 34O 0!0          230  8346     000+2
 2452         LUFAAA B     0&X1                                                     4  8098  B 0'0              230   000+1
 2453         *
 2454         ****************************************************************
 2455         *
 2456         LAEAAA DCW   @006@              * POINTER 0                           3  8104                     230
 2457         LBEAAA DCW   @I9G@              * POINTER 0                           3  8107                     230
 2458         LCEAAA DCW   @005@              * POINTER 0                           3  8110                     230
 2459         LCGAAA DCW   @333@              * POINTER 0                           3  8113                     230
 2460         LCHAAA DCW   @S@                * VALUE S                             1  8114                     230
 2461         LDGAAA DCW   @200@              * POINTER 0                           3  8117                     231
 2462         LEGAAA DCW   @643@              * POINTER 0                           3  8120                     231
 2463         LFEAAA DCW   @00000@            * VALUE 00000                         5  8125                     231
 2464         LFFAAA DCW   @I8F@              * POINTER 0                           3  8128                     231
 2465         LFGAAA DCW   @069@              * POINTER 0                           3  8131                     231
 2466         LFHAAA DCW   @D@                * VALUE D                             1  8132                     231
 2467         LGGAAA DCW   @00123@            * VALUE 00123                         5  8137                     231
 2468         LGHAAA DCW   @00010@            * VALUE 00010                         5  8142                     232
 2469         LHGAAA DCW   @759@              * POINTER 0                           3  8145                     232
 2470         LHHAAA DCW   @012@              * POINTER 0                           3  8148                     232
 2471         LIEAAA DCW   @I9E@              * POINTER 0                           3  8151                     232
 2472         LIFAAA DCW   @I9D@              * POINTER 0                           3  8154                     232
 2473         LIGAAA DCW   @767@              * POINTER 0                           3  8157                     232
 2474         LIHAAA DCW   @I9C@              * POINTER 0                           3  8160                     232
 2475         LJEAAA DCW   @-@                * VALUE -                             1  8161                     233
 2476         LJGAAA DCW   @775@              * POINTER 0                           3  8164                     233
 2477         LKEAAA DCW   @001@              * POINTER 0                           3  8167                     233
 2478         LKGAAA DCW   @783@              * POINTER 0                           3  8170                     233
 2479         LLEAAA DCW   @I9B@              * POINTER 0                           3  8173                     233
 2480         LLFAAA DCW   @624@              * POINTER 0                           3  8176                     233
 2481         LLGAAA DCW   @791@              * POINTER 0                           3  8179                     233
 2482         LLHAAA DCW   @P@                * VALUE P                             1  8180                     234
 2483         LMEAAA DCW   @I9I@              * POINTER 0                           3  8183                     234
 2484         LMGAAA DCW   @798@              * POINTER 0                           3  8186                     234
 2485         LMHAAA DCW   @010@              * POINTER 0                           3  8189                     234
 2486         LNGAAA DCW   @I3A@              * POINTER 0                           3  8192                     234
 2487         LNHAAA DCW   @I8I@              * POINTER 0                           3  8195                     234
 2488         LOGAAA DCW   @011@              * POINTER 0                           3  8198                     234
 2489         LOHAAA DCW   @0000J@            * VALUE 0000J                         5  8203                     235
 2490         LPEAAA DCW   @0@                * VALUE 0                             1  8204                     235
 2491         LPHAAA DCW   @008@              * POINTER 0                           3  8207                     235
 2492         LRGAAA DCW   @007@              * POINTER 0                           3  8210                     235
 2493         LSHAAA DCW   @100000@           * VALUE 100000                        6  8216                     235
 2494         LTHAAA DCW   @00042@            * VALUE 00042                         5  8221                     235
 2495         LUGAAA DCW   @%@                * VALUE %                             1  8222                     235
 2496         LUHAAA DCW   @00019@            * VALUE 00019                         5  8227                     236
 2497         LVHAAA DCW   @604@              * POINTER 0                           3  8230                     236
1                                                                                                         PAGE   49
0 SEQ PG LIN  LABEL  OP    OPERANDS                                            SFX CT  LOCN  INSTRUCTION TYPE  CARD A-ADDR  B-ADDR

 2498         LWDAAA DCW   @605@              * POINTER 0                           3  8233                     236
 2499         LXDAAA DCW   @00001@            * VALUE 00001                         5  8238                     236
 2500         LXFAAA DCW   @ @                * VALUE                               1  8239                     236
 2501         LYDAAA DCW   @014@              * POINTER 0                           3  8242                     236
 2502         LYFAAA DCW   @627@              * POINTER 0                           3  8245                     236
 2503         LZDAAA DCW   @003@              * POINTER 0                           3  8248                     237
 2504         LZFAAA DCW   @201@              * POINTER 0                           3  8251                     237
 2505         LZGAAA DCW   @C@                * VALUE C                             1  8252                     237
 2506         *
                     DCW   @-@                                                      1  8253              LIT    237
                     DCW   @0@                                                      1  8254              LIT    237
                     DCW   @R@                                                      1  8255              LIT    237
                     DCW   @ @                                                      1  8256              LIT    237
                     DCW   @%@                                                      1  8257              LIT    238
                     DCW   @C@                                                      1  8258              LIT    238
                     DCW   @S@                                                      1  8259              LIT    238
                     DCW   @D@                                                      1  8260              LIT    238
                     DCW   @P@                                                      1  8261              LIT    238
                     DCW   @04000@                                                  5  8266              LIT    238
                     DCW   @08000@                                                  5  8271              LIT    238
                     DCW   @12000@                                                  5  8276              LIT    239
                     DCW   @12000@                                                  5  8281              LIT    239
                     DCW   @A@                                                      1  8282              LIT    239
                     DCW   @08000@                                                  5  8287              LIT    239
                     DCW   @I@                                                      1  8288              LIT    239
                     DCW   @04000@                                                  5  8293              LIT    239
                     DCW   @01000@                                                  5  8298              LIT    239
                     DCW   @02000@                                                  5  8303              LIT    240
                     DCW   @03000@                                                  5  8308              LIT    240
                     DCW   @002@                                                    3  8311              LIT    240
                     DCW   @00000@                                                  5  8316              LIT    240
                     DCW   @01000@                                                  5  8321              LIT    240
                     DCW   @02000@                                                  5  8326              LIT    240
                     DCW   @03000@                                                  5  8331              LIT    240
                     DCW   @04000@                                                  5  8336              LIT    241
                     DCW   @08000@                                                  5  8341              LIT    241
                     DCW   @12000@                                                  5  8346              LIT    241
 2507                END   START              * END OF PROGRAM CODE.                         / 806 080                806
1                                                                                                         PAGE   50
0SYMBOL   ADDRESS    SYMBOL   ADDRESS    SYMBOL   ADDRESS    SYMBOL   ADDRESS    SYMBOL   ADDRESS    SYMBOL   ADDRESS

 EOL      0346: 0    EOS      0345: 0    LABAAA   1191: 0    LACAAA   7488: 0    LADAAA   6521: 0    LAEAAA   8104: 0   
 LAFAAA   7834: 0    LAGAAA   3252: 0    LAHAAA   5394: 0    LBAAAA   6941: 0    LBBAAA   1473: 0    LBDAAA   6542: 0   
 LBEAAA   8107: 0    LBFAAA   7848: 0    LBGAAA   3259: 0    LBHAAA   5401: 0    LCAAAA   7151: 0    LCBAAA   1482: 0   
 LCDAAA   6083: 0    LCEAAA   8110: 0    LCFAAA   7895: 0    LCGAAA   8113: 0    LCHAAA   8114: 0    LDBAAA   1204: 0   
 LDDAAA   6543: 0    LDEAAA   7515: 0    LDFAAA   7906: 0    LDGAAA   8117: 0    LDHAAA   5703: 0    LEBAAA   1483: 0   
 LEDAAA   5630: 0    LEEAAA   7542: 0    LEFAAA   7913: 0    LEGAAA   8120: 0    LEHAAA   5710: 0    LFAAAA   6597: 0   
 LFBAAA   1715: 0    LFDAAA   6544: 0    LFEAAA   8125: 0    LFFAAA   8128: 0    LFGAAA   8131: 0    LFHAAA   8132: 0   
 LGAAAA   6915: 0    LGBAAA   1484: 0    LGDAAA   5321: 0    LGEAAA   0992: 0    LGFAAA   2556: 0    LGGAAA   8137: 0   
 LGHAAA   8142: 0    LHAAAA   6627: 0    LHBAAA   1728: 0    LHDAAA   6545: 0    LHEAAA   0999: 0    LHFAAA   2563: 0   
 LHGAAA   8145: 0    LHHAAA   8148: 0    LIAAAA   6875: 0    LIBAAA   2178: 0    LIDAAA   5012: 0    LIEAAA   8151: 0   
 LIFAAA   8154: 0    LIGAAA   8157: 0    LIHAAA   8160: 0    LJAAAA   2313: 0    LJBAAA   1729: 0    LJDAAA   6546: 0   
 LJEAAA   8161: 0    LJFAAA   2712: 0    LJGAAA   8164: 0    LJHAAA   6156: 0    LKAAAA   2591: 0    LKBAAA   2191: 0   
 LKDAAA   4689: 0    LKEAAA   8167: 0    LKFAAA   2719: 0    LKGAAA   8170: 0    LKHAAA   6163: 0    LLAAAA   2336: 0   
 LLBAAA   2617: 0    LLDAAA   6556: 0    LLEAAA   8173: 0    LLFAAA   8176: 0    LLGAAA   8179: 0    LLHAAA   8180: 0   
 LMAAAA   2590: 0    LMBAAA   3405: 0    LMDAAA   4285: 0    LMEAAA   8183: 0    LMFAAA   7931: 0    LMGAAA   8186: 0   
 LMHAAA   8189: 0    LNBAAA   2833: 0    LNDAAA   6570: 0    LNEAAA   1285: 0    LNFAAA   8012: 0    LNGAAA   8192: 0   
 LNHAAA   8195: 0    LOBAAA   3170: 0    LOEAAA   1292: 0    LOFAAA   8023: 0    LOGAAA   8198: 0    LOHAAA   8203: 0   
 LPBAAA   3043: 0    LPCAAA   4164: 0    LPEAAA   8204: 0    LPFAAA   8034: 0    LPGAAA   4470: 0    LPHAAA   8207: 0   
 LQBAAA   2847: 0    LQCAAA   6571: 0    LQEAAA   7546: 0    LQFAAA   8041: 0    LQGAAA   4477: 0    LQHAAA   6841: 0   
 LRBAAA   3056: 0    LRCAAA   6557: 0    LREAAA   7698: 0    LRFAAA   8069: 0    LRGAAA   8210: 0    LRHAAA   6848: 0   
 LSBAAA   2846: 0    LSCAAA   4676: 0    LSEAAA   7711: 0    LSFAAA   8080: 0    LSGAAA   4572: 0    LSHAAA   8216: 0   
 LTBAAA   3179: 0    LTCAAA   6547: 0    LTEAAA   7706: 0    LTFAAA   8091: 0    LTGAAA   4579: 0    LTHAAA   8221: 0   
 LUBAAA   3395: 0    LUCAAA   4999: 0    LUDAAA   3431: 0    LUEAAA   7716: 0    LUFAAA   8098: 0    LUGAAA   8222: 0   
 LUHAAA   8227: 0    LVBAAA   3404: 0    LVCAAA   5308: 0    LVDAAA   4138: 0    LVEAAA   7721: 0    LVFAAA   2922: 0   
 LVGAAA   4895: 0    LVHAAA   8230: 0    LWBAAA   7177: 0    LWCAAA   5617: 0    LWDAAA   8233: 0    LWEAAA   1583: 0   
 LWFAAA   2929: 0    LWGAAA   4902: 0    LWHAAA   7301: 0    LXBAAA   7489: 0    LXCAAA   6063: 0    LXDAAA   8238: 0   
 LXEAAA   1590: 0    LXFAAA   8239: 0    LXGAAA   5085: 0    LXHAAA   7308: 0    LYAAAA   0826: 0    LYBAAA   7475: 0   
 LYCAAA   6508: 0    LYDAAA   8242: 0    LYEAAA   7722: 0    LYFAAA   8245: 0    LYGAAA   5092: 0    LZAAAA   2287: 0   
 LZBAAA   7200: 0    LZCAAA   6533: 0    LZDAAA   8248: 0    LZEAAA   7816: 0    LZFAAA   8251: 0    LZGAAA   8252: 0   
 PRCPOS   0335: 0    PRINT    0201: 0    PRTSIZ   0344: 0    PUCPOS   0338: 0    PUNCH    0101: 0    PUNSIZ   0341: 0   
 READ     0001: 0    RF       0340: 0    START    0806: 0    X1       0089: 0    X2       0094: 0    X3       0099: 0   

0UNREFERENCED SYMBOLS

 LABAAA LBAAAA LCHAAA LFAAAA LFBAAA LFHAAA LIBAAA LJAAAA LJEAAA LKAAAA LLHAAA LNBAAA LPBAAA LPEAAA LSCAAA LUBAAA LUCAAA
 LUGAAA LVCAAA LVDAAA LWCAAA LXCAAA LXFAAA LYBAAA LYCAAA LZGAAA PRCPOS PRINT  PRTSIZ PUCPOS PUNCH  PUNSIZ READ
