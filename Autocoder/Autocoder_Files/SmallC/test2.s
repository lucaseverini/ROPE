     ****************************************************************
     ***  test.s
     ***  Generated by Small-C Compiler on 10-Mar-2015 8:15:39 PM
     ****************************************************************
     ****************************************************************

     READ      EQU  001                * Read area
     PUNCH     EQU  101                * Punch area
     PRINT     EQU  201                * Print area
     
     PRCPOS    DCW  000                * char position in print area
     PUCPOS    DCW  000                * char position in punch area
     PUNSIZ    DCW  @080@              * Size of punch area
     PRTSIZ    DCW  @132@              * Size of print area
     EOS       DCW  @'@                * End Of String char
     EOL       DCW  @;@                * End Of Line char

               ORG  87
     X1        DSA  0                  * INDEX REGISTER 1
               ORG  92
     X2        DSA  0                  * INDEX REGISTER 2
               ORG  97
     X3        DSA  0                  * INDEX REGISTER 3
     
     * I need a single digit flag - should I replace this with a DA?
     RF        EQU  340
     
     ****************************************************************  

     * SET THE START POSITION OF VARIABLES DATA
               ORG  823                * SUBTRACT TYPE LEN - 1 (2) TO POINTER VALUE TO KEEP CORRECT ALIGNMENT
     R_LAB1    DCW  @201@              * CHAR-POINTER WITH VALUE 201
               ORG  826                * SUBTRACT TYPE LEN - 1 (2) TO POINTER VALUE TO KEEP CORRECT ALIGNMENT
     R_LAB2    DCW  @200@              * CHAR-POINTER WITH VALUE 200
               ORG  833                * SUBTRACT TYPE LEN - 1 (2) TO POINTER VALUE TO KEEP CORRECT ALIGNMENT
     R_LAB5    DCW  @081@              * CHAR-POINTER WITH VALUE 081
               ORG  843                * SUBTRACT TYPE LEN - 1 (2) TO POINTER VALUE TO KEEP CORRECT ALIGNMENT
     R_LAB3    DCW  @846@              * CHAR-POINTER WITH VALUE 846
               ORG  855                * SUBTRACT TYPE LEN - 1 (2) TO POINTER VALUE TO KEEP CORRECT ALIGNMENT
     R_LAB4    DCW  @858@              * CHAR-POINTER WITH VALUE 858
     
     * STRING DATA
               ORG  806
               DCW  @0@
               DCW  @1@
               DCW  @2@
               DCW  @3@
               DCW  @4@
               DCW  @5@
               DCW  @6@
               DCW  @7@
               DCW  @8@
               DCW  @9@
               DCW  @A@
               DCW  @B@
               DCW  @C@
               DCW  @D@
               DCW  @E@
               DCW  @F@
               DCW  @'@

     * STRING DATA
               ORG  846
               DCW  @A@
               DCW  @A@
               DCW  @A@
               DCW  @A@
               DCW  @A@
               DCW  @A@
               DCW  @A@
               DCW  @A@
               DCW  @'@

     * STRING DATA
               ORG  858
               DCW  @B@
               DCW  @B@
               DCW  @B@
               DCW  @B@
               DCW  @B@
               DCW  @B@
               DCW  @B@
               DCW  @B@
               DCW  @'@

     * STRING DATA
               ORG  867
               DCW  @C@
               DCW  @C@
               DCW  @C@
               DCW  @C@
               DCW  @C@
               DCW  @C@
               DCW  @C@
               DCW  @C@
               DCW  @'@

     * STRING DATA
               ORG  911
               DCW  @;@
               DCW  @D@
               DCW  @O@
               DCW  @N@
               DCW  @E@
               DCW  @.@
               DCW  @;@
               DCW  @'@
               
     * STRING DATA
               ORG  904
               DCW  @C@
               DCW  @2@
               DCW  @:@
               DCW  @%@
               DCW  @S@
               DCW  @;@
               DCW  @'@

     * STRING DATA
               ORG  897
               DCW  @X@
               DCW  @2@
               DCW  @:@
               DCW  @%@
               DCW  @D@
               DCW  @;@
               DCW  @'@

     * STRING DATA
               ORG  890
               DCW  @C@
               DCW  @1@
               DCW  @:@
               DCW  @%@
               DCW  @S@
               DCW  @;@
               DCW  @'@

     * STRING DATA
               ORG  883
               DCW  @C@
               DCW  @0@
               DCW  @:@
               DCW  @%@
               DCW  @S@
               DCW  @;@
               DCW  @'@

     * STRING DATA
               ORG  876
               DCW  @X@
               DCW  @0@
               DCW  @:@
               DCW  @%@
               DCW  @D@
               DCW  @;@
               DCW  @'@

     * SET THE START POSITION OF CODE
               ORG  1000
     START     NOP  

     * SET THE STACK POINTER
               SBR  X2,400

               MCW  X2,X3
               
     * UNNECESSARY SET OF VALUE IN VARIABLES BECAUSE VALUE IS ALREADY SET BY DCW
     *         LCA  LPDAAA,805
     *         LCA  LQDAAA,825         * CHAR POINTER WITH VALUE 201
     *         LCA  LRDAAA,828         * CHAR POINTER WITH VALUE 200
     *         LCA  LSDAAA,835         * CHAR POINTER WITH VALUE 081 (UNUSED)
     *         LCA  LTDAAA,842         * INTEGER WITH VALUE 00100
     *         LCA  LUDAAA,845         * CHAR POINTER WITH VALUE 846
     *         LCA  LVDAAA,857         * CHAR POINTER WITH VALUE 858

               B    LNDAAA
               H    

     * **********************************************************************
     * FunctionDefinition(main)
     * **********************************************************************
     LNDAAA    SBR  3+X3
               SW   1+X3
               CW   2+X3
               CW   3+X3

     * ***********************
     * BeginBlock (LODAAA:null)
               LCA  LTEAAA,6+X3
               LCA  LUEAAA,11+X3
               MA   LVEAAA,X2
     * FunctionCallExpr printf(STR_LIT_8, x0)
     * Push (5)
               MA   LWEAAA,X2
     * StaticVariableExpression (x0 : 842)
     * Push (842:5)
               MA   LWEAAA,X2
               LCA  LTDAAA,0+X2
     * ArrayNameExpresssion(STR_LIT_8:char [7])
     * Push (LXEAAA:3)
               MA   LYEAAA,X2
               LCA  LXEAAA,0+X2
     * Push (X3:3)
               MA   LYEAAA,X2
               LCA  X3,0+X2
               MCW  X2,X3
               B    LNCAAA
     * Pop (X3:3)
               LCA  0+X2,X3
               MA   LZEAAA,X2
     * Pop (3)
               MA   LZEAAA,X2
     * Pop (5)
               MA   LAFAAA,X2
     * Pop (5)
               MA   LAFAAA,X2
     * FunctionCallExpr printf(STR_LIT_9, c0)
     * Push (5)
               MA   LWEAAA,X2
     * StaticVariableExpression (c0 : 845)
     * Push (845:3)
               MA   LYEAAA,X2
               LCA  R_LAB3,0+X2
     * ArrayNameExpresssion(STR_LIT_9:char [7])
     * Push (LBFAAA:3)
               MA   LYEAAA,X2
               LCA  LBFAAA,0+X2
     * Push (X3:3)
               MA   LYEAAA,X2
               LCA  X3,0+X2
               MCW  X2,X3
               B    LNCAAA
     * Pop (X3:3)
               LCA  0+X2,X3
               MA   LZEAAA,X2
     * Pop (3)
               MA   LZEAAA,X2
     * Pop (3)
               MA   LZEAAA,X2
     * Pop (5)
               MA   LAFAAA,X2
     * FunctionCallExpr printf(STR_LIT_10, c1)
     * Push (5)
               MA   LWEAAA,X2
     * StaticVariableExpression (c1 : 857)
     * Push (857:3)
               MA   LYEAAA,X2
               LCA  R_LAB4,0+X2
     * ArrayNameExpresssion(STR_LIT_10:char [7])
     * Push (LCFAAA:3)
               MA   LYEAAA,X2
               LCA  LCFAAA,0+X2
     * Push (X3:3)
               MA   LYEAAA,X2
               LCA  X3,0+X2
               MCW  X2,X3
               B    LNCAAA
     * Pop (X3:3)
               LCA  0+X2,X3
               MA   LZEAAA,X2
     * Pop (3)
               MA   LZEAAA,X2
     * Pop (3)
               MA   LZEAAA,X2
     * Pop (5)
               MA   LAFAAA,X2
     * FunctionCallExpr printf(STR_LIT_11, x2)
     * Push (5)
               MA   LWEAAA,X2
     * VariableExpression (x2 : 11+X3)
     * Push (11+X3:5)
               MA   LWEAAA,X2
               LCA  11+X3,0+X2
     * ArrayNameExpresssion(STR_LIT_11:char [7])
     * Push (LDFAAA:3)
               MA   LYEAAA,X2
               LCA  LDFAAA,0+X2
     * Push (X3:3)
               MA   LYEAAA,X2
               LCA  X3,0+X2
               MCW  X2,X3
               B    LNCAAA
     * Pop (X3:3)
               LCA  0+X2,X3
               MA   LZEAAA,X2
     * Pop (3)
               MA   LZEAAA,X2
     * Pop (5)
               MA   LAFAAA,X2
     * Pop (5)
               MA   LAFAAA,X2
     * FunctionCallExpr printf(STR_LIT_12, c2)
     * Push (5)
               MA   LWEAAA,X2
     * VariableExpression (c2 : 6+X3)
     * Push (6+X3:3)
               MA   LYEAAA,X2
               LCA  6+X3,0+X2
     * ArrayNameExpresssion(STR_LIT_12:char [7])
     * Push (LEFAAA:3)
               MA   LYEAAA,X2
               LCA  LEFAAA,0+X2
     * Push (X3:3)
               MA   LYEAAA,X2
               LCA  X3,0+X2
               MCW  X2,X3
               B    LNCAAA
     * Pop (X3:3)
               LCA  0+X2,X3
               MA   LZEAAA,X2
     * Pop (3)
               MA   LZEAAA,X2
     * Pop (3)
               MA   LZEAAA,X2
     * Pop (5)
               MA   LAFAAA,X2
     * FunctionCallExpr printf(STR_LIT_13)
     * Push (5)
               MA   LWEAAA,X2
     * ArrayNameExpresssion(STR_LIT_13:char [8])
     * Push (LFFAAA:3)
               MA   LYEAAA,X2
               LCA  LFFAAA,0+X2
     * Push (X3:3)
               MA   LYEAAA,X2
               LCA  X3,0+X2
               MCW  X2,X3
               B    LNCAAA
     * Pop (X3:3)
               LCA  0+X2,X3
               MA   LZEAAA,X2
     * Pop (3)
               MA   LZEAAA,X2
     * Pop (5)
               MA   LAFAAA,X2
     LODAAA    NOP  
               MA   LGFAAA,X2
               MCW  @ @,RF
     * EndBlock (LODAAA:null)
     * ***********************

               LCA  3+X3,X1
               B    0+X1

     * **********************************************************************
     * FunctionDefinition(puts)
     * **********************************************************************
     LUBAAA    SBR  3+X3
               SW   1+X3
               CW   2+X3
               CW   3+X3

     * ***********************
     * BeginBlock (LVBAAA:null)
               MA   LYEAAA,X2
     * WhileStatement ((( *s ) != '\0')) (LWBAAA:LVBAAA) top:LXBAAA bottom:LYBAAA)
     LXBAAA    NOP  
     * NotEqualExpression (( *s ) != '\0')
     * DereferenceExpression ( *s )
     * VariableExpression (s : 15997+X3)
     * Push (15997+X3:3)
               MA   LYEAAA,X2
               LCA  15997+X3,0+X2
     * Pop (X1:3)
               LCA  0+X2,X1
               MA   LZEAAA,X2
     * Push (0+X1:1)
               MA   LJFAAA,X2
               LCA  0+X1,0+X2
     * ConstantExpression ('\0' : EOS)
     * Push (EOS:1)
               MA   LJFAAA,X2
               LCA  EOS,0+X2
               C    0+X2,15999+X2
     * Pop (1)
               MA   LKFAAA,X2
     * Pop (1)
               MA   LKFAAA,X2
     * Push (LLFAAA:5)
               MA   LWEAAA,X2
               LCA  LLFAAA,0+X2
               BE   LHFAAA
               B    LIFAAA
     LHFAAA    MCW  LMFAAA,0+X2
     LIFAAA    NOP  
               MCS  0+X2,0+X2
     * Pop (5)
               MA   LAFAAA,X2
               BCE  LYBAAA,5+X2, 

     * ***********************
     * BeginBlock (LWBAAA:LVBAAA)
     * FunctionCallExpr putchar(( *(s++) ))
     * Push (5)
               MA   LWEAAA,X2
     * DereferenceExpression ( *(s++) )
     * PostIncrement (s++)
     * Push (LZEAAA:3)
               MA   LYEAAA,X2
               LCA  LZEAAA,0+X2
               MA   X3,0+X2
     * Pop (X1:3)
               LCA  0+X2,X1
               MA   LZEAAA,X2
     * Push (0+X1:3)
               MA   LYEAAA,X2
               LCA  0+X1,0+X2
               MA   LJFAAA,0+X1
     * Pop (X1:3)
               LCA  0+X2,X1
               MA   LZEAAA,X2
     * Push (0+X1:1)
               MA   LJFAAA,X2
               LCA  0+X1,0+X2
     * Push (X3:3)
               MA   LYEAAA,X2
               LCA  X3,0+X2
               MCW  X2,X3
               B    LJBAAA
     * Pop (X3:3)
               LCA  0+X2,X3
               MA   LZEAAA,X2
     * Pop (1)
               MA   LKFAAA,X2
     * Pop (5)
               MA   LAFAAA,X2
     LWBAAA    NOP  
               BCE  LVBAAA,RF,R
     * EndBlock (LWBAAA:LVBAAA)
     * ***********************

               B    LXBAAA
     LYBAAA    NOP  
     LVBAAA    NOP  
               MA   LZEAAA,X2
               MCW  @ @,RF
     * EndBlock (LVBAAA:null)
     * ***********************

               LCA  3+X3,X1
               B    0+X1

     * **********************************************************************
     * FunctionDefinition(strcpy)
     * **********************************************************************
     LJAAAA    SBR  3+X3
               SW   1+X3
               CW   2+X3
               CW   3+X3

     * ***********************
     * BeginBlock (LKAAAA:null)
               MA   LYEAAA,X2
     * WhileStatement (((( *(dest++) ) = ( *(src++) )) != '\0')) retree.statement.EmptyStatement@37ada1e0 top:LLAAAA bottom:LMAAAA)
     LLAAAA    NOP  
     * NotEqualExpression ((( *(dest++) ) = ( *(src++) )) != '\0')
     * Assignment (( *(dest++) ) = ( *(src++) ))
     * DereferenceExpression ( *(src++) )
     * PostIncrement (src++)
     * Push (LPFAAA:3)
               MA   LYEAAA,X2
               LCA  LPFAAA,0+X2
               MA   X3,0+X2
     * Pop (X1:3)
               LCA  0+X2,X1
               MA   LZEAAA,X2
     * Push (0+X1:3)
               MA   LYEAAA,X2
               LCA  0+X1,0+X2
               MA   LJFAAA,0+X1
     * Pop (X1:3)
               LCA  0+X2,X1
               MA   LZEAAA,X2
     * Push (0+X1:1)
               MA   LJFAAA,X2
               LCA  0+X1,0+X2
     * PostIncrement (dest++)
     * Push (LZEAAA:3)
               MA   LYEAAA,X2
               LCA  LZEAAA,0+X2
               MA   X3,0+X2
     * Pop (X1:3)
               LCA  0+X2,X1
               MA   LZEAAA,X2
     * Push (0+X1:3)
               MA   LYEAAA,X2
               LCA  0+X1,0+X2
               MA   LJFAAA,0+X1
     * Pop (X1:3)
               LCA  0+X2,X1
               MA   LZEAAA,X2
               LCA  0+X2,0+X1
     * ConstantExpression ('\0' : EOS)
     * Push (EOS:1)
               MA   LJFAAA,X2
               LCA  EOS,0+X2
               C    0+X2,15999+X2
     * Pop (1)
               MA   LKFAAA,X2
     * Pop (1)
               MA   LKFAAA,X2
     * Push (LLFAAA:5)
               MA   LWEAAA,X2
               LCA  LLFAAA,0+X2
               BE   LNFAAA
               B    LOFAAA
     LNFAAA    MCW  LMFAAA,0+X2
     LOFAAA    NOP  
               MCS  0+X2,0+X2
     * Pop (5)
               MA   LAFAAA,X2
               BCE  LMAAAA,5+X2, 
               B    LLAAAA
     LMAAAA    NOP  
     LKAAAA    NOP  
               MA   LZEAAA,X2
               MCW  @ @,RF
     * EndBlock (LKAAAA:null)
     * ***********************

               LCA  3+X3,X1
               B    0+X1

     * **********************************************************************
     * FunctionDefinition(genRand)
     * **********************************************************************
     LBAAAA    SBR  3+X3
               SW   1+X3
               CW   2+X3
               CW   3+X3

     * ***********************
     * BeginBlock (LCAAAA:null)
               MA   LYEAAA,X2
     * Assignment (seed = (((42 * seed) + 19) % 100000))
     * ModuloExpression (((42 * seed) + 19) % 100000)
     * ConstantExpression (100000 : LQFAAA)
     * Push (LQFAAA:5)
               MA   LWEAAA,X2
               LCA  LQFAAA,0+X2
     * Addition ((42 * seed) + 19)
     * Multiplication (42 * seed)
     * ConstantExpression (42 : LRFAAA)
     * Push (LRFAAA:5)
               MA   LWEAAA,X2
               LCA  LRFAAA,0+X2
     * StaticVariableExpression (seed : 805)
     * Push (805:5)
               MA   LWEAAA,X2
               LCA  LPDAAA,0+X2
               M    15995+X2,6+X2
               SW   2+X2
               LCA  6+X2,15995+X2
     * Pop (5)
               MA   LAFAAA,X2
     * ConstantExpression (19 : LSFAAA)
     * Push (LSFAAA:5)
               MA   LWEAAA,X2
               LCA  LSFAAA,0+X2
               A    0+X2,15995+X2
     * Pop (5)
               MA   LAFAAA,X2
               B    LTFAAA
     * Pop (5)
               MA   LAFAAA,X2
     * Push (LZFAAA:3)
               MA   LYEAAA,X2
               LCA  LZFAAA,0+X2
     * Pop (X1:3)
               LCA  0+X2,X1
               MA   LZEAAA,X2
     * Pop (0+X1:5)
               LCA  0+X2,0+X1
               MA   LAFAAA,X2
     * StaticVariableExpression (seed : 805)
     * Push (805:5)
               MA   LWEAAA,X2
               LCA  LPDAAA,0+X2
     * Pop (15997+X3:5)
               LCA  0+X2,15997+X3
               MA   LAFAAA,X2
     * set the return flag, so we know do deallocate our stack
               MCW  @R@,RF
     * and branch
               B    LCAAAA
     LCAAAA    NOP  
               MA   LZEAAA,X2
               MCW  @ @,RF
     * EndBlock (LCAAAA:null)
     * ***********************

               LCA  3+X3,X1
               B    0+X1

     * **********************************************************************
     * FunctionDefinition(printf)
     * **********************************************************************
     LNCAAA    SBR  3+X3
               SW   1+X3
               CW   2+X3
               CW   3+X3

     * ***********************
     * BeginBlock (LOCAAA:null)
               MA   LAGAAA,X2
     * Assignment (arg = ((*char) (( &cformat_str ) + 15997)))
     * Addition (( &cformat_str ) + 15997)
     * AddressOfExpression ( &cformat_str )
     * Push (LZEAAA:3)
               MA   LYEAAA,X2
               LCA  LZEAAA,0+X2
               MA   X3,0+X2
     * ConstantExpression (15997 : LZEAAA)
     * Push (LZEAAA:3)
               MA   LYEAAA,X2
               LCA  LZEAAA,0+X2
               MA   0+X2,15997+X2
     * Pop (3)
               MA   LZEAAA,X2
     * Push (LBGAAA:3)
               MA   LYEAAA,X2
               LCA  LBGAAA,0+X2
               MA   X3,0+X2
     * Pop (X1:3)
               LCA  0+X2,X1
               MA   LZEAAA,X2
     * Pop (0+X1:3)
               LCA  0+X2,0+X1
               MA   LZEAAA,X2
     * WhileStatement (((c = ( *(cformat_str++) )) != '\0')) (LPCAAA:LOCAAA) top:LHDAAA bottom:LIDAAA)
     LHDAAA    NOP  
     * NotEqualExpression ((c = ( *(cformat_str++) )) != '\0')
     * Assignment (c = ( *(cformat_str++) ))
     * DereferenceExpression ( *(cformat_str++) )
     * PostIncrement (cformat_str++)
     * Push (LZEAAA:3)
               MA   LYEAAA,X2
               LCA  LZEAAA,0+X2
               MA   X3,0+X2
     * Pop (X1:3)
               LCA  0+X2,X1
               MA   LZEAAA,X2
     * Push (0+X1:3)
               MA   LYEAAA,X2
               LCA  0+X1,0+X2
               MA   LJFAAA,0+X1
     * Pop (X1:3)
               LCA  0+X2,X1
               MA   LZEAAA,X2
     * Push (0+X1:1)
               MA   LJFAAA,X2
               LCA  0+X1,0+X2
     * Push (LAGAAA:3)
               MA   LYEAAA,X2
               LCA  LAGAAA,0+X2
               MA   X3,0+X2
     * Pop (X1:3)
               LCA  0+X2,X1
               MA   LZEAAA,X2
               LCA  0+X2,0+X1
     * ConstantExpression ('\0' : EOS)
     * Push (EOS:1)
               MA   LJFAAA,X2
               LCA  EOS,0+X2
               C    0+X2,15999+X2
     * Pop (1)
               MA   LKFAAA,X2
     * Pop (1)
               MA   LKFAAA,X2
     * Push (LLFAAA:5)
               MA   LWEAAA,X2
               LCA  LLFAAA,0+X2
               BE   LCGAAA
               B    LDGAAA
     LCGAAA    MCW  LMFAAA,0+X2
     LDGAAA    NOP  
               MCS  0+X2,0+X2
     * Pop (5)
               MA   LAFAAA,X2
               BCE  LIDAAA,5+X2, 

     * ***********************
     * BeginBlock (LPCAAA:LOCAAA)
     * IfStatement if((c != '%') then (LQCAAA:LPCAAA) else (LRCAAA:LPCAAA))
     * NotEqualExpression (c != '%')
     * VariableExpression (c : 7+X3)
     * Push (7+X3:1)
               MA   LJFAAA,X2
               LCA  7+X3,0+X2
     * ConstantExpression ('%' : @%@)
     * Push (@%@:1)
               MA   LJFAAA,X2
               LCA  @%@,0+X2
               C    0+X2,15999+X2
     * Pop (1)
               MA   LKFAAA,X2
     * Pop (1)
               MA   LKFAAA,X2
     * Push (LLFAAA:5)
               MA   LWEAAA,X2
               LCA  LLFAAA,0+X2
               BE   LEGAAA
               B    LFGAAA
     LEGAAA    MCW  LMFAAA,0+X2
     LFGAAA    NOP  
               MCS  0+X2,0+X2
     * Pop (5)
               MA   LAFAAA,X2
               BCE  LFDAAA,5+X2, 

     * ***********************
     * BeginBlock (LQCAAA:LPCAAA)
     * FunctionCallExpr putchar(c)
     * Push (5)
               MA   LWEAAA,X2
     * VariableExpression (c : 7+X3)
     * Push (7+X3:1)
               MA   LJFAAA,X2
               LCA  7+X3,0+X2
     * Push (X3:3)
               MA   LYEAAA,X2
               LCA  X3,0+X2
               MCW  X2,X3
               B    LJBAAA
     * Pop (X3:3)
               LCA  0+X2,X3
               MA   LZEAAA,X2
     * Pop (1)
               MA   LKFAAA,X2
     * Pop (5)
               MA   LAFAAA,X2
     LQCAAA    NOP  
               BCE  LPCAAA,RF,R
     * EndBlock (LQCAAA:LPCAAA)
     * ***********************

               B    LGDAAA
     LFDAAA    NOP  

     * ***********************
     * BeginBlock (LRCAAA:LPCAAA)
     * Assignment (c = ( *(cformat_str++) ))
     * DereferenceExpression ( *(cformat_str++) )
     * PostIncrement (cformat_str++)
     * Push (LZEAAA:3)
               MA   LYEAAA,X2
               LCA  LZEAAA,0+X2
               MA   X3,0+X2
     * Pop (X1:3)
               LCA  0+X2,X1
               MA   LZEAAA,X2
     * Push (0+X1:3)
               MA   LYEAAA,X2
               LCA  0+X1,0+X2
               MA   LJFAAA,0+X1
     * Pop (X1:3)
               LCA  0+X2,X1
               MA   LZEAAA,X2
     * Push (0+X1:1)
               MA   LJFAAA,X2
               LCA  0+X1,0+X2
     * Push (LAGAAA:3)
               MA   LYEAAA,X2
               LCA  LAGAAA,0+X2
               MA   X3,0+X2
     * Pop (X1:3)
               LCA  0+X2,X1
               MA   LZEAAA,X2
     * Pop (0+X1:1)
               LCA  0+X2,0+X1
               MA   LKFAAA,X2
     * IfStatement if((c == '%') then (LSCAAA:LRCAAA) else if((c == 'C') then (LTCAAA:LRCAAA) else if((c == 'S') then (LUCAAA:LRCAAA) else if((c == 'D') then (LVCAAA:LRCAAA) else (LWCAAA:LRCAAA)))))
     * EqualExpression (c == '%')
     * VariableExpression (c : 7+X3)
     * Push (7+X3:1)
               MA   LJFAAA,X2
               LCA  7+X3,0+X2
     * ConstantExpression ('%' : @%@)
     * Push (@%@:1)
               MA   LJFAAA,X2
               LCA  @%@,0+X2
               C    0+X2,15999+X2
     * Pop (1)
               MA   LKFAAA,X2
     * Pop (1)
               MA   LKFAAA,X2
     * Push (LMFAAA:5)
               MA   LWEAAA,X2
               LCA  LMFAAA,0+X2
               BE   LGGAAA
               B    LHGAAA
     LGGAAA    MCW  LLFAAA,0+X2
     LHGAAA    NOP  
               MCS  0+X2,0+X2
     * Pop (5)
               MA   LAFAAA,X2
               BCE  LDDAAA,5+X2, 

     * ***********************
     * BeginBlock (LSCAAA:LRCAAA)
     * FunctionCallExpr putchar('%')
     * Push (5)
               MA   LWEAAA,X2
     * ConstantExpression ('%' : @%@)
     * Push (@%@:1)
               MA   LJFAAA,X2
               LCA  @%@,0+X2
     * Push (X3:3)
               MA   LYEAAA,X2
               LCA  X3,0+X2
               MCW  X2,X3
               B    LJBAAA
     * Pop (X3:3)
               LCA  0+X2,X3
               MA   LZEAAA,X2
     * Pop (1)
               MA   LKFAAA,X2
     * Pop (5)
               MA   LAFAAA,X2
     LSCAAA    NOP  
               BCE  LRCAAA,RF,R
     * EndBlock (LSCAAA:LRCAAA)
     * ***********************

               B    LEDAAA
     LDDAAA    NOP  
     * IfStatement if((c == 'C') then (LTCAAA:LRCAAA) else if((c == 'S') then (LUCAAA:LRCAAA) else if((c == 'D') then (LVCAAA:LRCAAA) else (LWCAAA:LRCAAA))))
     * EqualExpression (c == 'C')
     * VariableExpression (c : 7+X3)
     * Push (7+X3:1)
               MA   LJFAAA,X2
               LCA  7+X3,0+X2
     * ConstantExpression ('C' : @C@)
     * Push (@C@:1)
               MA   LJFAAA,X2
               LCA  @C@,0+X2
               C    0+X2,15999+X2
     * Pop (1)
               MA   LKFAAA,X2
     * Pop (1)
               MA   LKFAAA,X2
     * Push (LMFAAA:5)
               MA   LWEAAA,X2
               LCA  LMFAAA,0+X2
               BE   LIGAAA
               B    LJGAAA
     LIGAAA    MCW  LLFAAA,0+X2
     LJGAAA    NOP  
               MCS  0+X2,0+X2
     * Pop (5)
               MA   LAFAAA,X2
               BCE  LBDAAA,5+X2, 

     * ***********************
     * BeginBlock (LTCAAA:LRCAAA)
     * FunctionCallExpr putchar(( *(arg--) ))
     * Push (5)
               MA   LWEAAA,X2
     * DereferenceExpression ( *(arg--) )
     * PostDecrement (arg--)
     * Push (LBGAAA:3)
               MA   LYEAAA,X2
               LCA  LBGAAA,0+X2
               MA   X3,0+X2
     * Pop (X1:3)
               LCA  0+X2,X1
               MA   LZEAAA,X2
     * Push (0+X1:3)
               MA   LYEAAA,X2
               LCA  0+X1,0+X2
               MA   LKFAAA,0+X1
     * Pop (X1:3)
               LCA  0+X2,X1
               MA   LZEAAA,X2
     * Push (0+X1:1)
               MA   LJFAAA,X2
               LCA  0+X1,0+X2
     * Push (X3:3)
               MA   LYEAAA,X2
               LCA  X3,0+X2
               MCW  X2,X3
               B    LJBAAA
     * Pop (X3:3)
               LCA  0+X2,X3
               MA   LZEAAA,X2
     * Pop (1)
               MA   LKFAAA,X2
     * Pop (5)
               MA   LAFAAA,X2
     LTCAAA    NOP  
               BCE  LRCAAA,RF,R
     * EndBlock (LTCAAA:LRCAAA)
     * ***********************

               B    LCDAAA
     LBDAAA    NOP  
     * IfStatement if((c == 'S') then (LUCAAA:LRCAAA) else if((c == 'D') then (LVCAAA:LRCAAA) else (LWCAAA:LRCAAA)))
     * EqualExpression (c == 'S')
     * VariableExpression (c : 7+X3)
     * Push (7+X3:1)
               MA   LJFAAA,X2
               LCA  7+X3,0+X2
     * ConstantExpression ('S' : @S@)
     * Push (@S@:1)
               MA   LJFAAA,X2
               LCA  @S@,0+X2
               C    0+X2,15999+X2
     * Pop (1)
               MA   LKFAAA,X2
     * Pop (1)
               MA   LKFAAA,X2
     * Push (LMFAAA:5)
               MA   LWEAAA,X2
               LCA  LMFAAA,0+X2
               BE   LKGAAA
               B    LLGAAA
     LKGAAA    MCW  LLFAAA,0+X2
     LLGAAA    NOP  
               MCS  0+X2,0+X2
     * Pop (5)
               MA   LAFAAA,X2
               BCE  LZCAAA,5+X2, 

     * ***********************
     * BeginBlock (LUCAAA:LRCAAA)
     * FunctionCallExpr puts(( *((**char) arg) ))
     * Push (5)
               MA   LWEAAA,X2
     * DereferenceExpression ( *((**char) arg) )
     * VariableExpression (arg : 6+X3)
     * Push (6+X3:3)
               MA   LYEAAA,X2
               LCA  6+X3,0+X2
     * Pop (X1:3)
               LCA  0+X2,X1
               MA   LZEAAA,X2
     * Push (0+X1:3)
               MA   LYEAAA,X2
               LCA  0+X1,0+X2
     * Push (X3:3)
               MA   LYEAAA,X2
               LCA  X3,0+X2
               MCW  X2,X3
               B    LUBAAA
     * Pop (X3:3)
               LCA  0+X2,X3
               MA   LZEAAA,X2
     * Pop (3)
               MA   LZEAAA,X2
     * Pop (5)
               MA   LAFAAA,X2
     * Assignment (arg = (arg + 15997))
     * Addition (arg + 15997)
     * VariableExpression (arg : 6+X3)
     * Push (6+X3:3)
               MA   LYEAAA,X2
               LCA  6+X3,0+X2
     * ConstantExpression (15997 : LZEAAA)
     * Push (LZEAAA:3)
               MA   LYEAAA,X2
               LCA  LZEAAA,0+X2
               MA   0+X2,15997+X2
     * Pop (3)
               MA   LZEAAA,X2
     * Push (LBGAAA:3)
               MA   LYEAAA,X2
               LCA  LBGAAA,0+X2
               MA   X3,0+X2
     * Pop (X1:3)
               LCA  0+X2,X1
               MA   LZEAAA,X2
     * Pop (0+X1:3)
               LCA  0+X2,0+X1
               MA   LZEAAA,X2
     LUCAAA    NOP  
               BCE  LRCAAA,RF,R
     * EndBlock (LUCAAA:LRCAAA)
     * ***********************

               B    LADAAA
     LZCAAA    NOP  
     * IfStatement if((c == 'D') then (LVCAAA:LRCAAA) else (LWCAAA:LRCAAA))
     * EqualExpression (c == 'D')
     * VariableExpression (c : 7+X3)
     * Push (7+X3:1)
               MA   LJFAAA,X2
               LCA  7+X3,0+X2
     * ConstantExpression ('D' : @D@)
     * Push (@D@:1)
               MA   LJFAAA,X2
               LCA  @D@,0+X2
               C    0+X2,15999+X2
     * Pop (1)
               MA   LKFAAA,X2
     * Pop (1)
               MA   LKFAAA,X2
     * Push (LMFAAA:5)
               MA   LWEAAA,X2
               LCA  LMFAAA,0+X2
               BE   LMGAAA
               B    LNGAAA
     LMGAAA    MCW  LLFAAA,0+X2
     LNGAAA    NOP  
               MCS  0+X2,0+X2
     * Pop (5)
               MA   LAFAAA,X2
               BCE  LXCAAA,5+X2, 

     * ***********************
     * BeginBlock (LVCAAA:LRCAAA)
               MA   LAGAAA,X2
     * FunctionCallExpr itoa(( *((*int) arg) ), a, 10)
     * Push (3)
               MA   LYEAAA,X2
     * ConstantExpression (10 : LOGAAA)
     * Push (LOGAAA:5)
               MA   LWEAAA,X2
               LCA  LOGAAA,0+X2
     * ArrayNameExpresssion(a:char [7])
     * Push (LPGAAA:3)
               MA   LYEAAA,X2
               LCA  LPGAAA,0+X2
               MA   X3,0+X2
     * DereferenceExpression ( *((*int) arg) )
     * VariableExpression (arg : 6+X3)
     * Push (6+X3:3)
               MA   LYEAAA,X2
               LCA  6+X3,0+X2
     * Pop (X1:3)
               LCA  0+X2,X1
               MA   LZEAAA,X2
     * Push (0+X1:5)
               MA   LWEAAA,X2
               LCA  0+X1,0+X2
     * Push (X3:3)
               MA   LYEAAA,X2
               LCA  X3,0+X2
               MCW  X2,X3
               B    LXAAAA
     * Pop (X3:3)
               LCA  0+X2,X3
               MA   LZEAAA,X2
     * Pop (5)
               MA   LAFAAA,X2
     * Pop (3)
               MA   LZEAAA,X2
     * Pop (5)
               MA   LAFAAA,X2
     * Pop (3)
               MA   LZEAAA,X2
     * FunctionCallExpr puts(a)
     * Push (5)
               MA   LWEAAA,X2
     * ArrayNameExpresssion(a:char [7])
     * Push (LPGAAA:3)
               MA   LYEAAA,X2
               LCA  LPGAAA,0+X2
               MA   X3,0+X2
     * Push (X3:3)
               MA   LYEAAA,X2
               LCA  X3,0+X2
               MCW  X2,X3
               B    LUBAAA
     * Pop (X3:3)
               LCA  0+X2,X3
               MA   LZEAAA,X2
     * Pop (3)
               MA   LZEAAA,X2
     * Pop (5)
               MA   LAFAAA,X2
     * Assignment (arg = (arg + 15995))
     * Addition (arg + 15995)
     * VariableExpression (arg : 6+X3)
     * Push (6+X3:3)
               MA   LYEAAA,X2
               LCA  6+X3,0+X2
     * ConstantExpression (15995 : LAFAAA)
     * Push (LAFAAA:3)
               MA   LYEAAA,X2
               LCA  LAFAAA,0+X2
               MA   0+X2,15997+X2
     * Pop (3)
               MA   LZEAAA,X2
     * Push (LBGAAA:3)
               MA   LYEAAA,X2
               LCA  LBGAAA,0+X2
               MA   X3,0+X2
     * Pop (X1:3)
               LCA  0+X2,X1
               MA   LZEAAA,X2
     * Pop (0+X1:3)
               LCA  0+X2,0+X1
               MA   LZEAAA,X2
     LVCAAA    NOP  
               MA   LQGAAA,X2
               BCE  LRCAAA,RF,R
     * EndBlock (LVCAAA:LRCAAA)
     * ***********************

               B    LYCAAA
     LXCAAA    NOP  

     * ***********************
     * BeginBlock (LWCAAA:LRCAAA)
     * set the return flag, so we know do deallocate our stack
               MCW  @R@,RF
     * and branch
               B    LWCAAA
     LWCAAA    NOP  
               BCE  LRCAAA,RF,R
     * EndBlock (LWCAAA:LRCAAA)
     * ***********************

     LYCAAA    NOP  
     LADAAA    NOP  
     LCDAAA    NOP  
     LEDAAA    NOP  
     LRCAAA    NOP  
               BCE  LPCAAA,RF,R
     * EndBlock (LRCAAA:LPCAAA)
     * ***********************

     LGDAAA    NOP  
     LPCAAA    NOP  
               BCE  LOCAAA,RF,R
     * EndBlock (LPCAAA:LOCAAA)
     * ***********************

               B    LHDAAA
     LIDAAA    NOP  
     LOCAAA    NOP  
               MA   LQGAAA,X2
               MCW  @ @,RF
     * EndBlock (LOCAAA:null)
     * ***********************

               LCA  3+X3,X1
               B    0+X1

     * **********************************************************************
     * FunctionDefinition(putchar)
     * **********************************************************************
     LJBAAA    SBR  3+X3
               SW   1+X3
               CW   2+X3
               CW   3+X3

     * ***********************
     * BeginBlock (LKBAAA:null)
               MA   LYEAAA,X2
     * IfStatement if((c != '\n') then (LLBAAA:LKBAAA) else (LMBAAA:LKBAAA))
     * NotEqualExpression (c != '\n')
     * VariableExpression (c : 15997+X3)
     * Push (15997+X3:1)
               MA   LJFAAA,X2
               LCA  15997+X3,0+X2
     * ConstantExpression ('\n' : EOL)
     * Push (EOL:1)
               MA   LJFAAA,X2
               LCA  EOL,0+X2
               C    0+X2,15999+X2
     * Pop (1)
               MA   LKFAAA,X2
     * Pop (1)
               MA   LKFAAA,X2
     * Push (LLFAAA:5)
               MA   LWEAAA,X2
               LCA  LLFAAA,0+X2
               BE   LRGAAA
               B    LSGAAA
     LRGAAA    MCW  LMFAAA,0+X2
     LSGAAA    NOP  
               MCS  0+X2,0+X2
     * Pop (5)
               MA   LAFAAA,X2
               BCE  LQBAAA,5+X2, 

     * ***********************
     * BeginBlock (LLBAAA:LKBAAA)
     * Assignment (( *(__putchar_pos++) ) = c)
     * VariableExpression (c : 15997+X3)
     * Push (15997+X3:1)
               MA   LJFAAA,X2
               LCA  15997+X3,0+X2
     * PostIncrement (__putchar_pos++)
     * Push (LTGAAA:3)
               MA   LYEAAA,X2
               LCA  LTGAAA,0+X2
     * Pop (X1:3)
               LCA  0+X2,X1
               MA   LZEAAA,X2
     * Push (0+X1:3)
               MA   LYEAAA,X2
               LCA  0+X1,0+X2
               MA   LJFAAA,0+X1
     * Pop (X1:3)
               LCA  0+X2,X1
               MA   LZEAAA,X2
     * Pop (0+X1:1)
               LCA  0+X2,0+X1
               MA   LKFAAA,X2
     LLBAAA    NOP  
               BCE  LKBAAA,RF,R
     * EndBlock (LLBAAA:LKBAAA)
     * ***********************

               B    LRBAAA
     LQBAAA    NOP  

     * ***********************
     * BeginBlock (LMBAAA:LKBAAA)
     * WhileStatement ((((int) __putchar_last) >= ((int) __putchar_pos))) (LNBAAA:LMBAAA) top:LOBAAA bottom:LPBAAA)
     LOBAAA    NOP  
     * GreaterThanOrEqualExpression((((int) __putchar_last) >= ((int) __putchar_pos))
     * StaticVariableExpression (__putchar_last : 828)
     * Push (828:3)
               MA   LYEAAA,X2
               LCA  R_LAB2,0+X2
               B    LUGAAA
               B    LDHAAA
     * StaticVariableExpression (__putchar_pos : 825)
     * Push (825:3)
               MA   LYEAAA,X2
               LCA  R_LAB1,0+X2
               B    LUGAAA
               B    LDHAAA
               C    0+X2,15995+X2
     * Pop (5)
               MA   LAFAAA,X2
               MCW  LLFAAA,0+X2
               BL   LFHAAA
               B    LGHAAA
     LFHAAA    MCW  LMFAAA,0+X2
     LGHAAA    NOP  
               MCS  0+X2,0+X2
     * Pop (5)
               MA   LAFAAA,X2
               BCE  LPBAAA,5+X2, 

     * ***********************
     * BeginBlock (LNBAAA:LMBAAA)
     * Assignment (( *(__putchar_last--) ) = ' ')
     * ConstantExpression (' ' : @ @)
     * Push (@ @:1)
               MA   LJFAAA,X2
               LCA  @ @,0+X2
     * PostDecrement (__putchar_last--)
     * Push (LIHAAA:3)
               MA   LYEAAA,X2
               LCA  LIHAAA,0+X2
     * Pop (X1:3)
               LCA  0+X2,X1
               MA   LZEAAA,X2
     * Push (0+X1:3)
               MA   LYEAAA,X2
               LCA  0+X1,0+X2
               MA   LKFAAA,0+X1
     * Pop (X1:3)
               LCA  0+X2,X1
               MA   LZEAAA,X2
     * Pop (0+X1:1)
               LCA  0+X2,0+X1
               MA   LKFAAA,X2
     LNBAAA    NOP  
               BCE  LMBAAA,RF,R
     * EndBlock (LNBAAA:LMBAAA)
     * ***********************

               B    LOBAAA
     LPBAAA    NOP  
     * Assignment (__putchar_last = __putchar_pos)
     * StaticVariableExpression (__putchar_pos : 825)
     * Push (825:3)
               MA   LYEAAA,X2
               LCA  R_LAB1,0+X2
     * Push (LIHAAA:3)
               MA   LYEAAA,X2
               LCA  LIHAAA,0+X2
     * Pop (X1:3)
               LCA  0+X2,X1
               MA   LZEAAA,X2
     * Pop (0+X1:3)
               LCA  0+X2,0+X1
               MA   LZEAAA,X2
     * Assignment (__putchar_pos = 201)
     * ConstantExpression (201 : LQDAAA)
     * Push (LQDAAA:3)
               MA   LYEAAA,X2
               LCA  LQDAAA,0+X2
     * Push (LTGAAA:3)
               MA   LYEAAA,X2
               LCA  LTGAAA,0+X2
     * Pop (X1:3)
               LCA  0+X2,X1
               MA   LZEAAA,X2
     * Pop (0+X1:3)
               LCA  0+X2,0+X1
               MA   LZEAAA,X2
     * Start asm block
               W    
     * End asm block
     LMBAAA    NOP  
               BCE  LKBAAA,RF,R
     * EndBlock (LMBAAA:LKBAAA)
     * ***********************

     LRBAAA    NOP  
     * IfStatement if((__putchar_pos == 333) then (LSBAAA:LKBAAA))
     * EqualExpression (__putchar_pos == 333)
     * StaticVariableExpression (__putchar_pos : 825)
     * Push (825:3)
               MA   LYEAAA,X2
               LCA  R_LAB1,0+X2
     * ConstantExpression (333 : LLHAAA)
     * Push (LLHAAA:3)
               MA   LYEAAA,X2
               LCA  LLHAAA,0+X2
               C    0+X2,15997+X2
     * Pop (3)
               MA   LZEAAA,X2
     * Pop (3)
               MA   LZEAAA,X2
     * Push (LMFAAA:5)
               MA   LWEAAA,X2
               LCA  LMFAAA,0+X2
               BE   LJHAAA
               B    LKHAAA
     LJHAAA    MCW  LLFAAA,0+X2
     LKHAAA    NOP  
               MCS  0+X2,0+X2
     * Pop (5)
               MA   LAFAAA,X2
               BCE  LTBAAA,5+X2, 

     * ***********************
     * BeginBlock (LSBAAA:LKBAAA)
     * Assignment (__putchar_last = __putchar_pos)
     * StaticVariableExpression (__putchar_pos : 825)
     * Push (825:3)
               MA   LYEAAA,X2
               LCA  R_LAB1,0+X2
     * Push (LIHAAA:3)
               MA   LYEAAA,X2
               LCA  LIHAAA,0+X2
     * Pop (X1:3)
               LCA  0+X2,X1
               MA   LZEAAA,X2
     * Pop (0+X1:3)
               LCA  0+X2,0+X1
               MA   LZEAAA,X2
     * Assignment (__putchar_pos = 201)
     * ConstantExpression (201 : LQDAAA)
     * Push (LQDAAA:3)
               MA   LYEAAA,X2
               LCA  LQDAAA,0+X2
     * Push (LTGAAA:3)
               MA   LYEAAA,X2
               LCA  LTGAAA,0+X2
     * Pop (X1:3)
               LCA  0+X2,X1
               MA   LZEAAA,X2
     * Pop (0+X1:3)
               LCA  0+X2,0+X1
               MA   LZEAAA,X2
     * Start asm block
               W    
     * End asm block
     LSBAAA    NOP  
               BCE  LKBAAA,RF,R
     * EndBlock (LSBAAA:LKBAAA)
     * ***********************

     LTBAAA    NOP  
     LKBAAA    NOP  
               MA   LZEAAA,X2
               MCW  @ @,RF
     * EndBlock (LKBAAA:null)
     * ***********************

               LCA  3+X3,X1
               B    0+X1

     * **********************************************************************
     * FunctionDefinition(itoa)
     * **********************************************************************
     LXAAAA    SBR  3+X3
               SW   1+X3
               CW   2+X3
               CW   3+X3

     * ***********************
     * BeginBlock (LYAAAA:null)
               LCA  LMHAAA,9+X3
               LCA  LLFAAA,14+X3
               MA   LNHAAA,X2
     * Assignment (start = str)
     * VariableExpression (str : 15992+X3)
     * Push (15992+X3:3)
               MA   LYEAAA,X2
               LCA  15992+X3,0+X2
     * Push (LBGAAA:3)
               MA   LYEAAA,X2
               LCA  LBGAAA,0+X2
               MA   X3,0+X2
     * Pop (X1:3)
               LCA  0+X2,X1
               MA   LZEAAA,X2
     * Pop (0+X1:3)
               LCA  0+X2,0+X1
               MA   LZEAAA,X2
     * IfStatement if((value < 0) then (LZAAAA:LYAAAA) else if((value == 0) then (LABAAA:LYAAAA)))
     * LessThanExpression (value < 0)
     * VariableExpression (value : 15997+X3)
     * Push (15997+X3:5)
               MA   LWEAAA,X2
               LCA  15997+X3,0+X2
               B    LDHAAA
     * ConstantExpression (0 : LMFAAA)
     * Push (LMFAAA:5)
               MA   LWEAAA,X2
               LCA  LMFAAA,0+X2
               B    LDHAAA
               C    0+X2,15995+X2
     * Pop (5)
               MA   LAFAAA,X2
               MCW  LMFAAA,0+X2
               BL   LOHAAA
               B    LPHAAA
     LOHAAA    MCW  LLFAAA,0+X2
     LPHAAA    NOP  
               MCS  0+X2,0+X2
     * Pop (5)
               MA   LAFAAA,X2
               BCE  LCBAAA,5+X2, 

     * ***********************
     * BeginBlock (LZAAAA:LYAAAA)
     * Assignment (( *(str++) ) = '-')
     * ConstantExpression ('-' : @-@)
     * Push (@-@:1)
               MA   LJFAAA,X2
               LCA  @-@,0+X2
     * PostIncrement (str++)
     * Push (LRHAAA:3)
               MA   LYEAAA,X2
               LCA  LRHAAA,0+X2
               MA   X3,0+X2
     * Pop (X1:3)
               LCA  0+X2,X1
               MA   LZEAAA,X2
     * Push (0+X1:3)
               MA   LYEAAA,X2
               LCA  0+X1,0+X2
               MA   LJFAAA,0+X1
     * Pop (X1:3)
               LCA  0+X2,X1
               MA   LZEAAA,X2
     * Pop (0+X1:1)
               LCA  0+X2,0+X1
               MA   LKFAAA,X2
     * Assignment (value = (-value))
     * NegExpression (-value)
     * VariableExpression (value : 15997+X3)
     * Push (15997+X3:5)
               MA   LWEAAA,X2
               LCA  15997+X3,0+X2
               ZS   0+X2
               B    LDHAAA
     * Push (LZEAAA:3)
               MA   LYEAAA,X2
               LCA  LZEAAA,0+X2
               MA   X3,0+X2
     * Pop (X1:3)
               LCA  0+X2,X1
               MA   LZEAAA,X2
     * Pop (0+X1:5)
               LCA  0+X2,0+X1
               MA   LAFAAA,X2
     LZAAAA    NOP  
               BCE  LYAAAA,RF,R
     * EndBlock (LZAAAA:LYAAAA)
     * ***********************

               B    LDBAAA
     LCBAAA    NOP  
     * IfStatement if((value == 0) then (LABAAA:LYAAAA))
     * EqualExpression (value == 0)
     * VariableExpression (value : 15997+X3)
     * Push (15997+X3:5)
               MA   LWEAAA,X2
               LCA  15997+X3,0+X2
               B    LDHAAA
     * ConstantExpression (0 : LMFAAA)
     * Push (LMFAAA:5)
               MA   LWEAAA,X2
               LCA  LMFAAA,0+X2
               B    LDHAAA
               C    0+X2,15995+X2
     * Pop (5)
               MA   LAFAAA,X2
     * Pop (5)
               MA   LAFAAA,X2
     * Push (LMFAAA:5)
               MA   LWEAAA,X2
               LCA  LMFAAA,0+X2
               BE   LSHAAA
               B    LTHAAA
     LSHAAA    MCW  LLFAAA,0+X2
     LTHAAA    NOP  
               MCS  0+X2,0+X2
     * Pop (5)
               MA   LAFAAA,X2
               BCE  LBBAAA,5+X2, 

     * ***********************
     * BeginBlock (LABAAA:LYAAAA)
     * Assignment ((str[0]) = '0')
     * ConstantExpression ('0' : @0@)
     * Push (@0@:1)
               MA   LJFAAA,X2
               LCA  @0@,0+X2
     * VariableExpression (str : 15992+X3)
     * Push (15992+X3:3)
               MA   LYEAAA,X2
               LCA  15992+X3,0+X2
     * ConstantExpression (0 : LMFAAA)
     * Push (LMFAAA:5)
               MA   LWEAAA,X2
               LCA  LMFAAA,0+X2
     * raw index on the stack
     * Push (LLFAAA:5)
               MA   LWEAAA,X2
               LCA  LLFAAA,0+X2
               M    15995+X2,6+X2
               SW   2+X2
               LCA  6+X2,15995+X2
     * Pop (5)
               MA   LAFAAA,X2
     * STACK TOP IS NOW ARRAY INDEX
               B    LUHAAA
               MA   0+X2,15997+X2
     * Pop (3)
               MA   LZEAAA,X2
     * STACK top is location in array now.
     * Pop (X1:3)
               LCA  0+X2,X1
               MA   LZEAAA,X2
     * Pop (0+X1:1)
               LCA  0+X2,0+X1
               MA   LKFAAA,X2
     * Assignment ((str[1]) = '\0')
     * ConstantExpression ('\0' : EOS)
     * Push (EOS:1)
               MA   LJFAAA,X2
               LCA  EOS,0+X2
     * VariableExpression (str : 15992+X3)
     * Push (15992+X3:3)
               MA   LYEAAA,X2
               LCA  15992+X3,0+X2
     * ConstantExpression (1 : LLFAAA)
     * Push (LLFAAA:5)
               MA   LWEAAA,X2
               LCA  LLFAAA,0+X2
     * raw index on the stack
     * Push (LLFAAA:5)
               MA   LWEAAA,X2
               LCA  LLFAAA,0+X2
               M    15995+X2,6+X2
               SW   2+X2
               LCA  6+X2,15995+X2
     * Pop (5)
               MA   LAFAAA,X2
     * STACK TOP IS NOW ARRAY INDEX
               B    LUHAAA
               MA   0+X2,15997+X2
     * Pop (3)
               MA   LZEAAA,X2
     * STACK top is location in array now.
     * Pop (X1:3)
               LCA  0+X2,X1
               MA   LZEAAA,X2
     * Pop (0+X1:1)
               LCA  0+X2,0+X1
               MA   LKFAAA,X2
     * VariableExpression (start : 6+X3)
     * Push (6+X3:3)
               MA   LYEAAA,X2
               LCA  6+X3,0+X2
     * Pop (15984+X3:3)
               LCA  0+X2,15984+X3
               MA   LZEAAA,X2
     * set the return flag, so we know do deallocate our stack
               MCW  @R@,RF
     * and branch
               B    LABAAA
     LABAAA    NOP  
               BCE  LYAAAA,RF,R
     * EndBlock (LABAAA:LYAAAA)
     * ***********************

     LBBAAA    NOP  
     LDBAAA    NOP  
     * WhileStatement ((exp <= (value / base))) retree.statement.ExpressionStatement@36496381 top:LEBAAA bottom:LFBAAA)
     LEBAAA    NOP  
     * LessThanOrEqualExpression (exp <= (value / base))
     * VariableExpression (exp : 14+X3)
     * Push (14+X3:5)
               MA   LWEAAA,X2
               LCA  14+X3,0+X2
               B    LDHAAA
     * Divide (value / base)
     * VariableExpression (base : 15989+X3)
     * Push (15989+X3:5)
               MA   LWEAAA,X2
               LCA  15989+X3,0+X2
     * VariableExpression (value : 15997+X3)
     * Push (15997+X3:5)
               MA   LWEAAA,X2
               LCA  15997+X3,0+X2
               B    LTFAAA
               MCW  0+X2,15995+X2
     * Pop (5)
               MA   LAFAAA,X2
               B    LDHAAA
               C    0+X2,15995+X2
     * Pop (5)
               MA   LAFAAA,X2
               MCW  LLFAAA,0+X2
               BH   LBIAAA
               B    LCIAAA
     LBIAAA    MCW  LMFAAA,0+X2
     LCIAAA    NOP  
               MCS  0+X2,0+X2
     * Pop (5)
               MA   LAFAAA,X2
               BCE  LFBAAA,5+X2, 
     * Assignment (exp = (exp * base))
     * Multiplication (exp * base)
     * VariableExpression (exp : 14+X3)
     * Push (14+X3:5)
               MA   LWEAAA,X2
               LCA  14+X3,0+X2
     * VariableExpression (base : 15989+X3)
     * Push (15989+X3:5)
               MA   LWEAAA,X2
               LCA  15989+X3,0+X2
               M    15995+X2,6+X2
               SW   2+X2
               LCA  6+X2,15995+X2
     * Pop (5)
               MA   LAFAAA,X2
     * Push (LNHAAA:3)
               MA   LYEAAA,X2
               LCA  LNHAAA,0+X2
               MA   X3,0+X2
     * Pop (X1:3)
               LCA  0+X2,X1
               MA   LZEAAA,X2
     * Pop (0+X1:5)
               LCA  0+X2,0+X1
               MA   LAFAAA,X2
               B    LEBAAA
     LFBAAA    NOP  
     * WhileStatement (exp) (LGBAAA:LYAAAA) top:LHBAAA bottom:LIBAAA)
     LHBAAA    NOP  
     * VariableExpression (exp : 14+X3)
     * Push (14+X3:5)
               MA   LWEAAA,X2
               LCA  14+X3,0+X2
               MCS  0+X2,0+X2
     * Pop (5)
               MA   LAFAAA,X2
               BCE  LIBAAA,5+X2, 

     * ***********************
     * BeginBlock (LGBAAA:LYAAAA)
     * Assignment (( *(str++) ) = (digits[(value / exp)]))
     * SubScriptEpression (digits[(value / exp)])
     * VariableExpression (digits : 9+X3)
     * Push (9+X3:3)
               MA   LYEAAA,X2
               LCA  9+X3,0+X2
     * Divide (value / exp)
     * VariableExpression (exp : 14+X3)
     * Push (14+X3:5)
               MA   LWEAAA,X2
               LCA  14+X3,0+X2
     * VariableExpression (value : 15997+X3)
     * Push (15997+X3:5)
               MA   LWEAAA,X2
               LCA  15997+X3,0+X2
               B    LTFAAA
               MCW  0+X2,15995+X2
     * Pop (5)
               MA   LAFAAA,X2
     * raw index on the stack
     * Push (LLFAAA:5)
               MA   LWEAAA,X2
               LCA  LLFAAA,0+X2
               M    15995+X2,6+X2
               SW   2+X2
               LCA  6+X2,15995+X2
     * Pop (5)
               MA   LAFAAA,X2
     * STACK TOP IS NOW ARRAY INDEX
               B    LUHAAA
               MA   0+X2,15997+X2
     * Pop (3)
               MA   LZEAAA,X2
     * STACK top is location in array now.
     * Pop (X1:3)
               LCA  0+X2,X1
               MA   LZEAAA,X2
     * Push (0+X1:1)
               MA   LJFAAA,X2
               LCA  0+X1,0+X2
     * PostIncrement (str++)
     * Push (LRHAAA:3)
               MA   LYEAAA,X2
               LCA  LRHAAA,0+X2
               MA   X3,0+X2
     * Pop (X1:3)
               LCA  0+X2,X1
               MA   LZEAAA,X2
     * Push (0+X1:3)
               MA   LYEAAA,X2
               LCA  0+X1,0+X2
               MA   LJFAAA,0+X1
     * Pop (X1:3)
               LCA  0+X2,X1
               MA   LZEAAA,X2
     * Pop (0+X1:1)
               LCA  0+X2,0+X1
               MA   LKFAAA,X2
     * Assignment (value = (value % exp))
     * ModuloExpression (value % exp)
     * VariableExpression (exp : 14+X3)
     * Push (14+X3:5)
               MA   LWEAAA,X2
               LCA  14+X3,0+X2
     * VariableExpression (value : 15997+X3)
     * Push (15997+X3:5)
               MA   LWEAAA,X2
               LCA  15997+X3,0+X2
               B    LTFAAA
     * Pop (5)
               MA   LAFAAA,X2
     * Push (LZEAAA:3)
               MA   LYEAAA,X2
               LCA  LZEAAA,0+X2
               MA   X3,0+X2
     * Pop (X1:3)
               LCA  0+X2,X1
               MA   LZEAAA,X2
     * Pop (0+X1:5)
               LCA  0+X2,0+X1
               MA   LAFAAA,X2
     * Assignment (exp = (exp / base))
     * Divide (exp / base)
     * VariableExpression (base : 15989+X3)
     * Push (15989+X3:5)
               MA   LWEAAA,X2
               LCA  15989+X3,0+X2
     * VariableExpression (exp : 14+X3)
     * Push (14+X3:5)
               MA   LWEAAA,X2
               LCA  14+X3,0+X2
               B    LTFAAA
               MCW  0+X2,15995+X2
     * Pop (5)
               MA   LAFAAA,X2
     * Push (LNHAAA:3)
               MA   LYEAAA,X2
               LCA  LNHAAA,0+X2
               MA   X3,0+X2
     * Pop (X1:3)
               LCA  0+X2,X1
               MA   LZEAAA,X2
     * Pop (0+X1:5)
               LCA  0+X2,0+X1
               MA   LAFAAA,X2
     LGBAAA    NOP  
               BCE  LYAAAA,RF,R
     * EndBlock (LGBAAA:LYAAAA)
     * ***********************

               B    LHBAAA
     LIBAAA    NOP  
     * Assignment (( *str ) = '\0')
     * ConstantExpression ('\0' : EOS)
     * Push (EOS:1)
               MA   LJFAAA,X2
               LCA  EOS,0+X2
     * VariableExpression (str : 15992+X3)
     * Push (15992+X3:3)
               MA   LYEAAA,X2
               LCA  15992+X3,0+X2
     * Pop (X1:3)
               LCA  0+X2,X1
               MA   LZEAAA,X2
     * Pop (0+X1:1)
               LCA  0+X2,0+X1
               MA   LKFAAA,X2
     * VariableExpression (start : 6+X3)
     * Push (6+X3:3)
               MA   LYEAAA,X2
               LCA  6+X3,0+X2
     * Pop (15984+X3:3)
               LCA  0+X2,15984+X3
               MA   LZEAAA,X2
     * set the return flag, so we know do deallocate our stack
               MCW  @R@,RF
     * and branch
               B    LYAAAA
     LYAAAA    NOP  
               MA   LDIAAA,X2
               MCW  @ @,RF
     * EndBlock (LYAAAA:null)
     * ***********************

               LCA  3+X3,X1
               B    0+X1

     * **********************************************************************
     * FunctionDefinition(strlen)
     * **********************************************************************
     LFAAAA    SBR  3+X3
               SW   1+X3
               CW   2+X3
               CW   3+X3

     * ***********************
     * BeginBlock (LGAAAA:null)
               LCA  LEIAAA,8+X3
               MA   LPGAAA,X2
     * WhileStatement (((str[(++len)]) != '\0')) retree.statement.EmptyStatement@9bee93 top:LHAAAA bottom:LIAAAA)
     LHAAAA    NOP  
     * NotEqualExpression ((str[(++len)]) != '\0')
     * SubScriptEpression (str[(++len)])
     * VariableExpression (str : 15997+X3)
     * Push (15997+X3:3)
               MA   LYEAAA,X2
               LCA  15997+X3,0+X2
     * PreIncrement((++len)
     * Push (LPGAAA:3)
               MA   LYEAAA,X2
               LCA  LPGAAA,0+X2
               MA   X3,0+X2
     * Pop (X1:3)
               LCA  0+X2,X1
               MA   LZEAAA,X2
               A    LLFAAA,0+X1
     * Push (0+X1:5)
               MA   LWEAAA,X2
               LCA  0+X1,0+X2
     * raw index on the stack
     * Push (LLFAAA:5)
               MA   LWEAAA,X2
               LCA  LLFAAA,0+X2
               M    15995+X2,6+X2
               SW   2+X2
               LCA  6+X2,15995+X2
     * Pop (5)
               MA   LAFAAA,X2
     * STACK TOP IS NOW ARRAY INDEX
               B    LUHAAA
               MA   0+X2,15997+X2
     * Pop (3)
               MA   LZEAAA,X2
     * STACK top is location in array now.
     * Pop (X1:3)
               LCA  0+X2,X1
               MA   LZEAAA,X2
     * Push (0+X1:1)
               MA   LJFAAA,X2
               LCA  0+X1,0+X2
     * ConstantExpression ('\0' : EOS)
     * Push (EOS:1)
               MA   LJFAAA,X2
               LCA  EOS,0+X2
               C    0+X2,15999+X2
     * Pop (1)
               MA   LKFAAA,X2
     * Pop (1)
               MA   LKFAAA,X2
     * Push (LLFAAA:5)
               MA   LWEAAA,X2
               LCA  LLFAAA,0+X2
               BE   LFIAAA
               B    LGIAAA
     LFIAAA    MCW  LMFAAA,0+X2
     LGIAAA    NOP  
               MCS  0+X2,0+X2
     * Pop (5)
               MA   LAFAAA,X2
               BCE  LIAAAA,5+X2, 
               B    LHAAAA
     LIAAAA    NOP  
     * VariableExpression (len : 8+X3)
     * Push (8+X3:5)
               MA   LWEAAA,X2
               LCA  8+X3,0+X2
     * Pop (15994+X3:5)
               LCA  0+X2,15994+X3
               MA   LAFAAA,X2
     * set the return flag, so we know do deallocate our stack
               MCW  @R@,RF
     * and branch
               B    LGAAAA
     LGAAAA    NOP  
               MA   LRHAAA,X2
               MCW  @ @,RF
     * EndBlock (LGAAAA:null)
     * ***********************

               LCA  3+X3,X1
               B    0+X1
     LDHAAA    SBR  X1
     * Normalizes the zone bits of a number, leaving either A=0B=0
     * for a positive or A=0B=1 for a negative
     * Do nothing on either no zone bits or only a b zone bit
               BWZ  LEHAAA,0+X2,2
               BWZ  LEHAAA,0+X2,K
     * else clear the zone bits, as it is positive
               MZ   @ @,0+X2
     LEHAAA    B    0+X1
    ****************************************************************  
    ** DIVISION SNIPPET                                           **
    ****************************************************************  
     
     LTFAAA    SBR  LUFAAA+3           * SETUP RETURN ADDRESS
     * POP DIVIDEND
               MCW  0+X2, LVFAAA
               SBR  X2, 15995+X2

     * POP DIVISOR
               MCW  0+X2, LWFAAA
               SBR  X2, 15995+X2


               B    *+17
               
               DCW  @00000@                
               DC   @00000000000@        

               ZA   LVFAAA, *-7         * PUT DIVIDEND INTO WORKING BL
               D    LWFAAA, *-19        * DIVIDE
               MZ   *-22, *-21          * KILL THE ZONE BIT
               MZ   *-29, *-34          * KILL THE ZONE BIT
               MCW  *-41, LXFAAA        * PICK UP ANSWER
               SW   *-44                * SO I CAN PICKUP REMAINDER
               MCW  *-46, LYFAAA        * GET REMAINDER
               CW   *-55                * CLEAR THE WM
               MZ   LXFAAA-1, LXFAAA    * CLEANUP QUOTIENT BITZONE
               MZ   LYFAAA-1, LYFAAA    * CLEANUP REMAINDER BITZONE
               
     * PUSH REMAINDER
               SBR  X2, 5+X2
               SW   15996+X2
               MCW  LYFAAA, 0+X2
               
     * PUSH QUOTIENT
               SBR  X2, 5+X2
               SW   15996+X2
               MCW  LXFAAA, 0+X2

     LUFAAA    B    000                 * JUMP BACK
               
     LWFAAA    DCW  00000               * DIVISOR
     LVFAAA    DCW  00000               * DIVIDEND
     LXFAAA    DCW  00000               * QUOTIENT
     LYFAAA    DCW  00000               * REMAINDER
     LUHAAA    SBR  X1
     * Casts a 5-digit number to a 3-digit address
     * make a copy of the top of the stack
               SW   15998+X2
               LCA  0+X2,3+X2
               CW   15998+X2
     * zero out the zone bits of our copy
               MZ   @0@,3+X2
               MZ   @0@,2+X2
               MZ   @0@,1+X2
     * set the low-order digit's zone bits
               C    @04000@,0+X2
               BL   LXHAAA
               C    @08000@,0+X2
               BL   LWHAAA
               C    @12000@,0+X2
               BL   LVHAAA
               S    @12000@,0+X2
               MZ   @A@,3+X2
               B    LXHAAA
     LVHAAA    S    @08000@,0+X2
               MZ   @I@,3+X2
               B    LXHAAA
     LWHAAA    S    @04000@,0+X2
               MZ   @S@,3+X2
     * For some reason the zone bits get set - it still works though.
     LXHAAA    C    @01000@,0+X2
               BL   LAIAAA
               C    @02000@,0+X2
               BL   LZHAAA
               C    @03000@,0+X2
               BL   LYHAAA
               MZ   @A@,1+X2
               B    LAIAAA
     LYHAAA    MZ   @I@,1+X2
               B    LAIAAA
     LZHAAA    MZ   @S@,1+X2
     LAIAAA    LCA  3+X2,15998+X2
               SBR  X2,15998+X2
               B    0+X1
     LUGAAA    SBR  X1
     * Casts a 3-digit address to a 5-digit number
     * Make room on the stack for an int
               MA   @002@,X2
     * make a copy of the top of the stack
               LCA  15998+X2,3+X2
     * Now zero out the top of the stack
               LCA  @00000@,0+X2
     * Now copy back, shifted over 2 digits
               MCW  3+X2,0+X2
     * Now zero out the zone bits on the stack
               MZ   @0@,0+X2
               MZ   @0@,15999+X2
               MZ   @0@,15998+X2
     * check the high-order digit's zone bits
               BWZ  LVGAAA,1+X2,S
               BWZ  LWGAAA,1+X2,K
               BWZ  LXGAAA,1+X2,B
               B    LYGAAA
     LVGAAA    A    @01000@,0+X2
               B    LYGAAA
     LWGAAA    A    @02000@,0+X2
               B    LYGAAA
     LXGAAA    A    @03000@,0+X2
     LYGAAA    BWZ  LZGAAA,3+X2,S
               BWZ  LAHAAA,3+X2,K
               BWZ  LBHAAA,3+X2,B
               B    LCHAAA
     LZGAAA    A    @04000@,0+X2
               B    LCHAAA
     LAHAAA    A    @08000@,0+X2
               B    LCHAAA
     LBHAAA    A    @12000@,0+X2
     LCHAAA    B    0+X1

     LZEAAA    DCW  @I9G@
     LJEAAA    DCW  @2@
     LQFAAA    DCW  @100000@
     LPDAAA    DCW  @69105@
     LAEAAA    DCW  @B@
     LWDAAA    DCW  @F@
     LCFAAA    DCW  @890@
     LEFAAA    DCW  @904@
     LQEAAA    DCW  @.@
     LREAAA    DCW  @N@
     LOGAAA    DCW  @00010@
     LBGAAA    DCW  @006@
     LUEAAA    DCW  @00200@
     LFFAAA    DCW  @911@
     LRHAAA    DCW  @I9B@
     LFEAAA    DCW  @6@
     LVDAAA    DCW  @858@
     LNEAAA    DCW  @:@
     LMFAAA    DCW  @00000@
     LLFAAA    DCW  @00001@
     LUDAAA    DCW  @846@
     LIEAAA    DCW  @3@
     LBEAAA    DCW  @A@
     LXDAAA    DCW  @E@
     LDIAAA    DCW  @I8F@
     LYEAAA    DCW  @003@
     LAGAAA    DCW  @007@
     LQGAAA    DCW  @I9C@
     LSFAAA    DCW  @00019@
     LEEAAA    DCW  @7@
     LHHAAA    DCW  @ @
     LVEAAA    DCW  @011@
     LHEAAA    DCW  @4@
     LBFAAA    DCW  @883@
     LEIAAA    DCW  @0000J@
     LRFAAA    DCW  @00042@
     LQHAAA    DCW  @-@
     LYDAAA    DCW  @D@
     LKFAAA    DCW  @I9I@
     LSEAAA    DCW  @O@
     LTDAAA    DCW  @00100@
     LGFAAA    DCW  @I8I@
     LMHAAA    DCW  @806@
     LTGAAA    DCW  @825@
     LMEAAA    DCW  @%@
     LQDAAA    DCW  @201@
     LPGAAA    DCW  @008@
     LLEAAA    DCW  @0@
     LXEAAA    DCW  @876@
     LSDAAA    DCW  @081@
     LDEAAA    DCW  @8@
     LPFAAA    DCW  @I9D@
     LPEAAA    DCW  @S@
     LJFAAA    DCW  @001@
     LOEAAA    DCW  @X@
     LGEAAA    DCW  @5@
     LKEAAA    DCW  @1@
     LZDAAA    DCW  @C@
     LZFAAA    DCW  @805@
     LTEAAA    DCW  @867@
     LWEAAA    DCW  @005@
     LCEAAA    DCW  @9@
     LRDAAA    DCW  @200@
     LNHAAA    DCW  @014@
     LDFAAA    DCW  @897@
     LAFAAA    DCW  @I9E@
     LIHAAA    DCW  @828@
     LLHAAA    DCW  @333@

               END  START
