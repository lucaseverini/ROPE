 BOOTSTRAP FOR CLEAR ,008015,022026,030040/019,001L020100   ,047054,061068,072072)0810811022                      1
 CLEAR OR BOOTSTRAP  ,008047/047046       /000H025B022100  4/061046,054061,068072,0010401040                      2
0                                                                                                         PAGE    1
0 SEQ PG LIN  LABEL  OP    OPERANDS                                            SFX CT  LOCN  INSTRUCTION TYPE  CARD A-ADDR  B-ADDR

  101         ****************************************************************
  102         ***  TEST_OK.S
  103         ***  GENERATED BY SMALL-C COMPILER ON 28-MAR-2015 7:17:33 PM
  104         ****************************************************************
  105         ****************************************************************
  106         *
  107         READ   EQU   001                * READ AREA                              0001
  108         PUNCH  EQU   101                * PUNCH AREA                             0101
  109         PRINT  EQU   201                * PRINT AREA                             0201
  110         *
  111         PRCPOS DCW   000                * CHAR POSITION IN PRINT AREA         3  0335                       3
  112         PUCPOS DCW   000                * CHAR POSITION IN PUNCH AREA         3  0338                       3
  113         PUNSIZ DCW   @080@              * SIZE OF PUNCH AREA                  3  0341                       3
  114         PRTSIZ DCW   @132@              * SIZE OF PRINT AREA                  3  0344                       3
  115         EOS    DCW   @'@                * END OF STRING CHAR                  1  0345                       3
  116         EOL    DCW   @;@                * END OF LINE CHAR                    1  0346                       3
  117         *
  118                ORG   87                                                                 0087
  119         X1     DSA   0                  * INDEX REGISTER 1                    3  0089  000                  4   000
  120                ORG   92                                                                 0092
  121         X2     DSA   0                  * INDEX REGISTER 2                    3  0094  000                  5   000
  122                ORG   97                                                                 0097
  123         X3     DSA   0                  * INDEX REGISTER 3                    3  0099  000                  6   000
  124         *
  125         * I NEED A SINGLE DIGIT FLAG - SHOULD I REPLACE THIS WITH A DA?
  126         RF     EQU   340                                                         0340
  127         *
  128         ****************************************************************
  129         *
  130         * GLOBAL/STATIC DATA AND VARIABLES
  131         *
  132                ORG   4000               * SEED                                          4000
  133                DCW   @69105@                                                  5  4004                       7
  134         *
  135                ORG   4005               * CONST_STR_LITERAL-1                           4005
  136                DCW   @0@                                                      1  4005                       7
  137                DCW   @1@                                                      1  4006                       7
  138                DCW   @2@                                                      1  4007                       7
  139                DCW   @3@                                                      1  4008                       7
  140                DCW   @4@                                                      1  4009                       7
  141                DCW   @5@                                                      1  4010                       7
  142                DCW   @6@                                                      1  4011                       8
  143                DCW   @7@                                                      1  4012                       8
  144                DCW   @8@                                                      1  4013                       8
  145                DCW   @9@                                                      1  4014                       8
  146                DCW   @A@                                                      1  4015                       8
  147                DCW   @B@                                                      1  4016                       8
1                                                                                                         PAGE    2
0 SEQ PG LIN  LABEL  OP    OPERANDS                                            SFX CT  LOCN  INSTRUCTION TYPE  CARD A-ADDR  B-ADDR

  148                DCW   @C@                                                      1  4017                       8
  149                DCW   @D@                                                      1  4018                       9
  150                DCW   @E@                                                      1  4019                       9
  151                DCW   @F@                                                      1  4020                       9
  152                DCW   @'@                                                      1  4021                       9
  153         *
  154                ORG   4022               * __PUTCHAR_POS                                 4022
  155                DCW   @201@                                                    3  4024                       9
  156         *
  157                ORG   4025               * __PUTCHAR_LAST                                4025
  158                DCW   @200@                                                    3  4027                       9
  159         *
  160                ORG   4028               * __GETCHARPOSITION                             4028
  161                DCW   @081@                                                    3  4030                       9
  162         *
  163                ORG   4031               * CONST_STR_LITERAL-8                           4031
  164                DCW   @A@                                                      1  4031                      10
  165                DCW   @2@                                                      1  4032                      10
  166                DCW   @:@                                                      1  4033                      10
  167                DCW   @%@                                                      1  4034                      10
  168                DCW   @D@                                                      1  4035                      10
  169                DCW   @;@                                                      1  4036                      10
  170                DCW   @'@                                                      1  4037                      10
  171         *
  172                ORG   4038               * CONST_STR_LITERAL-9                           4038
  173                DCW   @B@                                                      1  4038                      11
  174                DCW   @2@                                                      1  4039                      11
  175                DCW   @:@                                                      1  4040                      11
  176                DCW   @%@                                                      1  4041                      11
  177                DCW   @D@                                                      1  4042                      11
  178                DCW   @;@                                                      1  4043                      11
  179                DCW   @'@                                                      1  4044                      11
  180         *
  181                ORG   4045               * CONST_STR_LITERAL-10                          4045
  182                DCW   @D@                                                      1  4045                      12
  183                DCW   @:@                                                      1  4046                      12
  184                DCW   @%@                                                      1  4047                      12
  185                DCW   @D@                                                      1  4048                      12
  186                DCW   @;@                                                      1  4049                      12
  187                DCW   @'@                                                      1  4050                      12
  188         *
  189                ORG   4051               * CONST_STR_LITERAL-11                          4051
  190                DCW   @F@                                                      1  4051                      12
  191                DCW   @:@                                                      1  4052                      13
  192                DCW   @%@                                                      1  4053                      13
  193                DCW   @D@                                                      1  4054                      13
  194                DCW   @;@                                                      1  4055                      13
  195                DCW   @'@                                                      1  4056                      13
  196         *
  197                ORG   4057               * X                                             4057
1                                                                                                         PAGE    3
0 SEQ PG LIN  LABEL  OP    OPERANDS                                            SFX CT  LOCN  INSTRUCTION TYPE  CARD A-ADDR  B-ADDR

  198                DCW   @00111@                                                  5  4061                      13
  199         *
  200                ORG   4062               * C                                             4062
  201                DCW   @06V@                                                    3  4064                      13
  202         *
  203                ORG   4065               * CONST_STR_LITERAL-12                          4065
  204                DCW   @A@                                                      1  4065                      14
  205                DCW   @A@                                                      1  4066                      14
  206                DCW   @A@                                                      1  4067                      14
  207                DCW   @A@                                                      1  4068                      14
  208                DCW   @A@                                                      1  4069                      14
  209                DCW   @A@                                                      1  4070                      14
  210                DCW   @A@                                                      1  4071                      14
  211                DCW   @A@                                                      1  4072                      15
  212                DCW   @'@                                                      1  4073                      15
  213         *
  214                ORG   4074               * C2                                            4074
  215                DCW   @07X@                                                    3  4076                      15
  216         *
  217                ORG   4077               * CONST_STR_LITERAL-13                          4077
  218                DCW   @A@                                                      1  4077                      15
  219                DCW   @A@                                                      1  4078                      15
  220                DCW   @A@                                                      1  4079                      15
  221                DCW   @A@                                                      1  4080                      15
  222                DCW   @A@                                                      1  4081                      16
  223                DCW   @A@                                                      1  4082                      16
  224                DCW   @A@                                                      1  4083                      16
  225                DCW   @A@                                                      1  4084                      16
  226                DCW   @'@                                                      1  4085                      16
  227         *
  228                ORG   4086               * CONST_STR_LITERAL-14                          4086
  229                DCW   @A@                                                      1  4086                      16
  230                DCW   @A@                                                      1  4087                      16
  231                DCW   @A@                                                      1  4088                      17
  232                DCW   @A@                                                      1  4089                      17
  233                DCW   @A@                                                      1  4090                      17
  234                DCW   @A@                                                      1  4091                      17
  235                DCW   @A@                                                      1  4092                      17
  236                DCW   @A@                                                      1  4093                      17
  237                DCW   @'@                                                      1  4094                      17
  238         *
  239                ORG   4095               * CONST_STR_LITERAL-15                          4095
  240                DCW   @C@                                                      1  4095                      18
  241                DCW   @3@                                                      1  4096                      18
  242                DCW   @:@                                                      1  4097                      18
  243                DCW   @%@                                                      1  4098                      18
  244                DCW   @S@                                                      1  4099                      18
  245                DCW   @;@                                                      1  4100                      18
  246                DCW   @'@                                                      1  4101                      18
  247         *
1                                                                                                         PAGE    4
0 SEQ PG LIN  LABEL  OP    OPERANDS                                            SFX CT  LOCN  INSTRUCTION TYPE  CARD A-ADDR  B-ADDR

  248                ORG   4102               * CONST_STR_LITERAL-16                          4102
  249                DCW   @C@                                                      1  4102                      19
  250                DCW   @3@                                                      1  4103                      19
  251                DCW   @:@                                                      1  4104                      19
  252                DCW   @%@                                                      1  4105                      19
  253                DCW   @D@                                                      1  4106                      19
  254                DCW   @;@                                                      1  4107                      19
  255                DCW   @'@                                                      1  4108                      19
  256         *
  257                ORG   4109               * CONST_STR_LITERAL-17                          4109
  258                DCW   @C@                                                      1  4109                      20
  259                DCW   @:@                                                      1  4110                      20
  260                DCW   @%@                                                      1  4111                      20
  261                DCW   @S@                                                      1  4112                      20
  262                DCW   @;@                                                      1  4113                      20
  263                DCW   @'@                                                      1  4114                      20
  264         *
  265                ORG   4115               * CONST_STR_LITERAL-18                          4115
  266                DCW   @C@                                                      1  4115                      20
  267                DCW   @:@                                                      1  4116                      21
  268                DCW   @%@                                                      1  4117                      21
  269                DCW   @D@                                                      1  4118                      21
  270                DCW   @;@                                                      1  4119                      21
  271                DCW   @'@                                                      1  4120                      21
  272         *
  273                ORG   4121               * CONST_STR_LITERAL-19                          4121
  274                DCW   @C@                                                      1  4121                      21
  275                DCW   @2@                                                      1  4122                      21
  276                DCW   @:@                                                      1  4123                      22
  277                DCW   @%@                                                      1  4124                      22
  278                DCW   @S@                                                      1  4125                      22
  279                DCW   @;@                                                      1  4126                      22
  280                DCW   @'@                                                      1  4127                      22
  281         *
  282                ORG   4128               * CONST_STR_LITERAL-20                          4128
  283                DCW   @C@                                                      1  4128                      22
  284                DCW   @2@                                                      1  4129                      22
  285                DCW   @:@                                                      1  4130                      23
  286                DCW   @%@                                                      1  4131                      23
  287                DCW   @D@                                                      1  4132                      23
  288                DCW   @;@                                                      1  4133                      23
  289                DCW   @'@                                                      1  4134                      23
  290         *
  291                ORG   4135               * CONST_STR_LITERAL-21                          4135
  292                DCW   @C@                                                      1  4135                      23
  293                DCW   @:@                                                      1  4136                      23
  294                DCW   @%@                                                      1  4137                      24
  295                DCW   @S@                                                      1  4138                      24
  296                DCW   @;@                                                      1  4139                      24
  297                DCW   @'@                                                      1  4140                      24
1                                                                                                         PAGE    5
0 SEQ PG LIN  LABEL  OP    OPERANDS                                            SFX CT  LOCN  INSTRUCTION TYPE  CARD A-ADDR  B-ADDR

  298         *
  299                ORG   4141               * CONST_STR_LITERAL-22                          4141
  300                DCW   @C@                                                      1  4141                      24
  301                DCW   @:@                                                      1  4142                      24
  302                DCW   @%@                                                      1  4143                      24
  303                DCW   @D@                                                      1  4144                      25
  304                DCW   @;@                                                      1  4145                      25
  305                DCW   @'@                                                      1  4146                      25
  306         *
  307                ORG   4147               * CONST_STR_LITERAL-23                          4147
  308                DCW   @C@                                                      1  4147                      25
  309                DCW   @2@                                                      1  4148                      25
  310                DCW   @:@                                                      1  4149                      25
  311                DCW   @%@                                                      1  4150                      25
  312                DCW   @S@                                                      1  4151                      26
  313                DCW   @;@                                                      1  4152                      26
  314                DCW   @'@                                                      1  4153                      26
  315         *
  316                ORG   4154               * CONST_STR_LITERAL-24                          4154
  317                DCW   @C@                                                      1  4154                      26
  318                DCW   @2@                                                      1  4155                      26
  319                DCW   @:@                                                      1  4156                      26
  320                DCW   @%@                                                      1  4157                      26
  321                DCW   @D@                                                      1  4158                      27
  322                DCW   @;@                                                      1  4159                      27
  323                DCW   @'@                                                      1  4160                      27
  324         *
  325                ORG   4161               * CONST_STR_LITERAL-25                          4161
  326                DCW   @C@                                                      1  4161                      27
  327                DCW   @3@                                                      1  4162                      27
  328                DCW   @:@                                                      1  4163                      27
  329                DCW   @%@                                                      1  4164                      27
  330                DCW   @S@                                                      1  4165                      28
  331                DCW   @;@                                                      1  4166                      28
  332                DCW   @'@                                                      1  4167                      28
  333         *
  334                ORG   4168               * CONST_STR_LITERAL-26                          4168
  335                DCW   @C@                                                      1  4168                      28
  336                DCW   @3@                                                      1  4169                      28
  337                DCW   @:@                                                      1  4170                      28
  338                DCW   @%@                                                      1  4171                      28
  339                DCW   @D@                                                      1  4172                      29
  340                DCW   @;@                                                      1  4173                      29
  341                DCW   @'@                                                      1  4174                      29
  342         *
  343                ORG   4175               * CONST_STR_LITERAL-27                          4175
  344                DCW   @X@                                                      1  4175                      29
  345                DCW   @:@                                                      1  4176                      29
  346                DCW   @%@                                                      1  4177                      29
  347                DCW   @D@                                                      1  4178                      29
1                                                                                                         PAGE    6
0 SEQ PG LIN  LABEL  OP    OPERANDS                                            SFX CT  LOCN  INSTRUCTION TYPE  CARD A-ADDR  B-ADDR

  348                DCW   @;@                                                      1  4179                      30
  349                DCW   @'@                                                      1  4180                      30
  350         *
  351                ORG   4181               * CONST_STR_LITERAL-28                          4181
  352                DCW   @E@                                                      1  4181                      30
  353                DCW   @:@                                                      1  4182                      30
  354                DCW   @%@                                                      1  4183                      30
  355                DCW   @D@                                                      1  4184                      30
  356                DCW   @;@                                                      1  4185                      30
  357                DCW   @'@                                                      1  4186                      31
  358         *
  359                ORG   4187               * CONST_STR_LITERAL-29                          4187
  360                DCW   @E@                                                      1  4187                      31
  361                DCW   @:@                                                      1  4188                      31
  362                DCW   @%@                                                      1  4189                      31
  363                DCW   @D@                                                      1  4190                      31
  364                DCW   @;@                                                      1  4191                      31
  365                DCW   @'@                                                      1  4192                      31
  366         *
  367                ORG   4193               * CONST_STR_LITERAL-30                          4193
  368                DCW   @X@                                                      1  4193                      32
  369                DCW   @:@                                                      1  4194                      32
  370                DCW   @%@                                                      1  4195                      32
  371                DCW   @D@                                                      1  4196                      32
  372                DCW   @;@                                                      1  4197                      32
  373                DCW   @'@                                                      1  4198                      32
  374         *
  375                ORG   4199               * CONST_STR_LITERAL-31                          4199
  376                DCW   @A@                                                      1  4199                      32
  377                DCW   @:@                                                      1  4200                      33
  378                DCW   @%@                                                      1  4201                      33
  379                DCW   @D@                                                      1  4202                      33
  380                DCW   @ @                                                      1  4203                      33
  381                DCW   @B@                                                      1  4204                      33
  382                DCW   @:@                                                      1  4205                      33
  383                DCW   @%@                                                      1  4206                      33
  384                DCW   @D@                                                      1  4207                      34
  385                DCW   @;@                                                      1  4208                      34
  386                DCW   @'@                                                      1  4209                      34
  387         *
  388                ORG   4210               * CONST_STR_LITERAL-32                          4210
  389                DCW   @A@                                                      1  4210                      34
  390                DCW   @:@                                                      1  4211                      34
  391                DCW   @%@                                                      1  4212                      34
  392                DCW   @D@                                                      1  4213                      34
  393                DCW   @ @                                                      1  4214                      35
  394                DCW   @B@                                                      1  4215                      35
  395                DCW   @:@                                                      1  4216                      35
  396                DCW   @%@                                                      1  4217                      35
  397                DCW   @D@                                                      1  4218                      35
1                                                                                                         PAGE    7
0 SEQ PG LIN  LABEL  OP    OPERANDS                                            SFX CT  LOCN  INSTRUCTION TYPE  CARD A-ADDR  B-ADDR

  398                DCW   @;@                                                      1  4219                      35
  399                DCW   @'@                                                      1  4220                      35
  400         *
  401                ORG   4221               * CONST_STR_LITERAL-33                          4221
  402                DCW   @A@                                                      1  4221                      36
  403                DCW   @:@                                                      1  4222                      36
  404                DCW   @%@                                                      1  4223                      36
  405                DCW   @D@                                                      1  4224                      36
  406                DCW   @ @                                                      1  4225                      36
  407                DCW   @B@                                                      1  4226                      36
  408                DCW   @:@                                                      1  4227                      36
  409                DCW   @%@                                                      1  4228                      37
  410                DCW   @D@                                                      1  4229                      37
  411                DCW   @;@                                                      1  4230                      37
  412                DCW   @'@                                                      1  4231                      37
  413         *
  414                ORG   4232               * CONST_STR_LITERAL-34                          4232
  415                DCW   @;@                                                      1  4232                      37
  416                DCW   @D@                                                      1  4233                      37
  417                DCW   @O@                                                      1  4234                      37
  418                DCW   @N@                                                      1  4235                      38
  419                DCW   @E@                                                      1  4236                      38
  420                DCW   @.@                                                      1  4237                      38
  421                DCW   @;@                                                      1  4238                      38
  422                DCW   @'@                                                      1  4239                      38
  423         *
  424         * START POSITION OF PROGRAM CODE
  425                ORG   4500                                                               4500
  426         START  NOP                      * PROGRAM STARTS HERE                 1  4500  N                   39
  427         *
  428         * SETTING OF STACK POINTER (STACK GROWS UPWARD)
  429                SBR   X2,399             * X2 IS THE STACK POINTER             7  4501  H 094 399           39   094     399
  430                MCW   X2,X3              * COPY X2 TO X3                       7  4508  M 094 099           39   094     099
  431         *
  432                B     LUDAAA             * JUMP TO FUNCTION MAIN               4  4515  B P3Q               39 10738
  433                H                        * PROGRAM EXECUTED. SYSTEM HALTED     1  4519  .                   39
  434         *
  435         ***************************************************************************
  436         * FUNCTION : PUTS
  437         ***************************************************************************
  438         LWBAAA SBR   3&X3               * SAVE RETURN ADDRESS IN REGISTER     4  4520  H 0?3               39   003+3
  439                SW    1&X3               * SET THE WM                          4  4524  , 0?1               39   001+3
  440                CW    2&X3               * CLEAN WM                            4  4528  ) 0?2               40   002+3
  441                CW    3&X3               * CLEAN WM                            4  4532  ) 0?3               40   003+3
  442         *
  443         ***************************************
  444         * BEGINBLOCK [BLOCK LXBAAA:NULL]
  445                MA    LWDAAA,X2          * RESERVE 3 BYTES OF SPACE ON STA     7  4536  # K1B 094           40 14212     094
  446         * WHILE [WHILE (((*S) != '\0')) [BLOCK LYBAAA:LXBAAA] TOP:LZBAAA BOTTOM:LAC
  447         LZBAAA NOP                      * TOP OF THE LOOP                     1  4543  N                   40
1                                                                                                         PAGE    8
0 SEQ PG LIN  LABEL  OP    OPERANDS                                            SFX CT  LOCN  INSTRUCTION TYPE  CARD A-ADDR  B-ADDR

  448         * NOTEQUAL (!=) ((*S) != '\0')
  449         * DEREFERENCEEXPRESSION (*S)
  450         * PARAMETER VARIABLE (S : 15997+X3)
  451         * PUSH (15997+X3:3)
  452                MA    LWDAAA,X2          * ADD 3 TO X2                         7  4544  # K1B 094           40 14212     094
  453                LCA   15997&X3,0&X2      * LOAD DATA 15997&X3 INTO STACK       7  4551  L IIG 0!0           40 15997+3   000+2
  454         * POP (X1:3)
  455                LCA   0&X2,X1            * LOAD DATA IN STACK INTO MEMORY      7  4558  L 0!0 089           40   000+2   089
  456                MA    LZDAAA,X2          * ADD -3 TO X2                        7  4565  # K3E 094           41 14235     094
  457         * PUSH (0+X1:1)
  458                MA    LAEAAA,X2          * ADD 1 TO X2                         7  4572  # !1D 094           41 14014     094
  459                LCA   0&X1,0&X2          * LOAD DATA 0&X1 INTO STACK           7  4579  L 0'0 0!0           41   000+1   000+2
  460         * END DEREFERENCEEXPRESSION (*S)
  461         * CONSTANT ('\0' : EOS)
  462         * PUSH (EOS:1)
  463                MA    LAEAAA,X2          * ADD 1 TO X2                         7  4586  # !1D 094           41 14014     094
  464                LCA   EOS,0&X2           * LOAD DATA EOS INTO STACK            7  4593  L 345 0!0           41   345     000+2
  465                C     0&X2,15999&X2      * COMPARE                             7  4600  C 0!0 IRI           42   000+2 15999+2
  466         * POP (1)
  467                MA    LBEAAA,X2          * ADD -1 TO X2                        7  4607  # !2E 094           42 14025     094
  468         * POP (1)
  469                MA    LBEAAA,X2          * ADD -1 TO X2                        7  4614  # !2E 094           42 14025     094
  470         * PUSH (LCEAAA:5)
  471                MA    LDEAAA,X2          * ADD 5 TO X2                         7  4621  # !5? 094           42 14050     094
  472                LCA   LCEAAA,0&X2        * LOAD DATA 00001 INTO STACK          7  4628  L !3I 0!0           42 14039     000+2
  473                BE    LXDAAA             * JUMP IF EQUAL                       5  4635  B 64U S             43  4644
  474                B     LYDAAA             * JUMP TO END                         4  4640  B 65/               43  4651
  475         LXDAAA MCW   LEEAAA,0&X2        * EQUAL: SET STACK LOCATION TO 0      7  4644  M !6A 0!0           43 14061     000+2
  476         LYDAAA NOP                      * END OF NOTEQUAL                     1  4651  N                   43
  477                MCS   0&X2,0&X2          * CLEAR WM                            7  4652  Z 0!0 0!0           43   000+2   000+2
  478         * POP (5)
  479                MA    LFEAAA,X2          * ADD -5 TO X2                        7  4659  # !6H 094           43 14068     094
  480                BCE   LACAAA,5&X2,       * JUMP TO BOTTOM                      8  4666  B 83/ 0!5           43  4831     005+2
  481         *
  482         ***************************************
  483         * BEGINBLOCK [BLOCK LYBAAA:LXBAAA]
  484         * FUNCTION CALL PUTCHAR((*(S++)))
  485         * PUSH (5)
  486                MA    LDEAAA,X2          * ADD 5 TO X2                         7  4674  # !5? 094           44 14050     094
  487         * DEREFERENCEEXPRESSION (*(S++))
  488         * POSTINCREMENT (S++)
  489         * PUSH (LZDAAA:3)
  490                MA    LWDAAA,X2          * ADD 3 TO X2                         7  4681  # K1B 094           44 14212     094
  491                LCA   LZDAAA,0&X2        * LOAD DATA I9G INTO STACK            7  4688  L K3E 0!0           44 14235     000+2
  492                MA    X3,0&X2                                                  7  4695  # 099 0!0           44   099     000+2
  493         * POP (X1:3)
  494                LCA   0&X2,X1            * LOAD DATA IN STACK INTO MEMORY      7  4702  L 0!0 089           44   000+2   089
  495                MA    LZDAAA,X2          * ADD -3 TO X2                        7  4709  # K3E 094           45 14235     094
  496         * PUSH (0+X1:3)
  497                MA    LWDAAA,X2          * ADD 3 TO X2                         7  4716  # K1B 094           45 14212     094
1                                                                                                         PAGE    9
0 SEQ PG LIN  LABEL  OP    OPERANDS                                            SFX CT  LOCN  INSTRUCTION TYPE  CARD A-ADDR  B-ADDR

  498                LCA   0&X1,0&X2          * LOAD DATA 0&X1 INTO STACK           7  4723  L 0'0 0!0           45   000+1   000+2
  499                MA    LAEAAA,0&X1        * POSTINCREMENT POINTER POINTED B     7  4730  # !1D 0'0           45 14014     000+1
  500         * POP (X1:3)
  501                LCA   0&X2,X1            * LOAD DATA IN STACK INTO MEMORY      7  4737  L 0!0 089           45   000+2   089
  502                MA    LZDAAA,X2          * ADD -3 TO X2                        7  4744  # K3E 094           46 14235     094
  503         * PUSH (0+X1:1)
  504                MA    LAEAAA,X2          * ADD 1 TO X2                         7  4751  # !1D 094           46 14014     094
  505                LCA   0&X1,0&X2          * LOAD DATA 0&X1 INTO STACK           7  4758  L 0'0 0!0           46   000+1   000+2
  506         * END DEREFERENCEEXPRESSION (*(S++))
  507         * PUSH (X3:3)
  508                MA    LWDAAA,X2          * ADD 3 TO X2                         7  4765  # K1B 094           46 14212     094
  509                LCA   X3,0&X2            * LOAD DATA X3 INTO STACK             7  4772  L 099 0!0           46   099     000+2
  510                MCW   X2,X3              * COPY X2 INTO X3                     7  4779  M 094 099           47   094     099
  511                B     LLBAAA             * JUMP TO FUNCTION PUTCHAR            4  4786  B 77Q               47  8778
  512         * POP (X3:3)
  513                LCA   0&X2,X3            * LOAD DATA IN STACK INTO MEMORY      7  4790  L 0!0 099           47   000+2   099
  514                MA    LZDAAA,X2          * ADD -3 TO X2                        7  4797  # K3E 094           47 14235     094
  515         * POP (1)
  516                MA    LBEAAA,X2          * ADD -1 TO X2                        7  4804  # !2E 094           47 14025     094
  517         * POP (5)
  518                MA    LFEAAA,X2          * ADD -5 TO X2                        7  4811  # !6H 094           47 14068     094
  519         LYBAAA NOP                      * RETURN                              1  4818  N                   48
  520                BCE   LXBAAA,RF,R        * JUMP BACK TO CALLER                 8  4819  B 83S 340 R         48  4832     340
  521         * ENDBLOCK [BLOCK LYBAAA:LXBAAA]
  522         ***************************************
  523         *
  524                B     LZBAAA             * JUMP TO TOP                         4  4827  B 54T               48  4543
  525         LACAAA NOP                      * BOTTOM OF THE WHILE LOOP            1  4831  N                   48
  526         *
  527         LXBAAA NOP                      * RETURN                              1  4832  N                   48
  528                MA    LZDAAA,X2          * RESERVE 3 BYTES OF SPACE ON STA     7  4833  # K3E 094           48 14235     094
  529                MCW   @ @,RF             * CLEAR THE RETURN FLAG               7  4840  M K4B 340           48 14242     340
  530         * ENDBLOCK [BLOCK LXBAAA:NULL]
  531         ***************************************
  532         *
  533                LCA   3&X3,X1            * LOAD RETURN ADDRESS TO X1           7  4847  L 0?3 089           49   003+3   089
  534                B     0&X1               * JUMP BACK TO CALLER                 4  4854  B 0'0               49   000+1
  535         *
  536         ***************************************************************************
  537         * END FUNCTION : PUTS
  538         ***************************************************************************
  539         *
  540         ***************************************************************************
  541         * FUNCTION : PRINTF
  542         ***************************************************************************
  543         LPCAAA SBR   3&X3               * SAVE RETURN ADDRESS IN REGISTER     4  4858  H 0?3               49   003+3
  544                SW    1&X3               * SET THE WM                          4  4862  , 0?1               49   001+3
  545                CW    2&X3               * CLEAN WM                            4  4866  ) 0?2               49   002+3
  546                CW    3&X3               * CLEAN WM                            4  4870  ) 0?3               49   003+3
  547         *
1                                                                                                         PAGE   10
0 SEQ PG LIN  LABEL  OP    OPERANDS                                            SFX CT  LOCN  INSTRUCTION TYPE  CARD A-ADDR  B-ADDR

  548         ***************************************
  549         * BEGINBLOCK [BLOCK LQCAAA:NULL]
  550                MA    LGEAAA,X2          * RESERVE 11 BYTES OF SPACE ON ST     7  4874  # !7G 094           49 14077     094
  551         * ASSIGNMENT (ARG = ((*CHAR) (( &CFORMAT_STR ) + 15997)))
  552         * ADDITION (( &CFORMAT_STR ) + 15997)
  553         * ADDRESSOF ( &CFORMAT_STR )
  554         * PUSH (LZDAAA:3)
  555                MA    LWDAAA,X2          * ADD 3 TO X2                         7  4881  # K1B 094           50 14212     094
  556                LCA   LZDAAA,0&X2        * LOAD DATA I9G INTO STACK            7  4888  L K3E 0!0           50 14235     000+2
  557                MA    X3,0&X2                                                  7  4895  # 099 0!0           50   099     000+2
  558         * CONSTANT (15997 : LZDAAA)
  559         * PUSH (LZDAAA:3)
  560                MA    LWDAAA,X2          * ADD 3 TO X2                         7  4902  # K1B 094           50 14212     094
  561                LCA   LZDAAA,0&X2        * LOAD DATA I9G INTO STACK            7  4909  L K3E 0!0           50 14235     000+2
  562                MA    0&X2,15997&X2      * ADD                                 7  4916  # 0!0 IRG           51   000+2 15997+2
  563         * POP (3)
  564                MA    LZDAAA,X2          * ADD -3 TO X2                        7  4923  # K3E 094           51 14235     094
  565         * PUSH (LHEAAA:3)
  566                MA    LWDAAA,X2          * ADD 3 TO X2                         7  4930  # K1B 094           51 14212     094
  567                LCA   LHEAAA,0&X2        * LOAD DATA 006 INTO STACK            7  4937  L !9B 0!0           51 14092     000+2
  568                MA    X3,0&X2                                                  7  4944  # 099 0!0           51   099     000+2
  569         * POP (X1:3)
  570                LCA   0&X2,X1            * LOAD DATA IN STACK INTO MEMORY      7  4951  L 0!0 089           52   000+2   089
  571                MA    LZDAAA,X2          * ADD -3 TO X2                        7  4958  # K3E 094           52 14235     094
  572         * POP (0+X1:3)
  573                LCA   0&X2,0&X1          * LOAD DATA IN STACK INTO MEMORY      7  4965  L 0!0 0'0           52   000+2   000+1
  574                MA    LZDAAA,X2          * ADD -3 TO X2                        7  4972  # K3E 094           52 14235     094
  575         * END ASSIGNMENT (ARG = ((*CHAR) (( &CFORMAT_STR ) + 15997)))
  576         * WHILE [WHILE (((C = (*(CFORMAT_STR++))) != '\0')) [BLOCK LRCAAA:LQCAAA] T
  577         LMDAAA NOP                      * TOP OF THE LOOP                     1  4979  N                   52
  578         * NOTEQUAL (!=) ((C = (*(CFORMAT_STR++))) != '\0')
  579         * ASSIGNMENT (C = (*(CFORMAT_STR++)))
  580         * DEREFERENCEEXPRESSION (*(CFORMAT_STR++))
  581         * POSTINCREMENT (CFORMAT_STR++)
  582         * PUSH (LZDAAA:3)
  583                MA    LWDAAA,X2          * ADD 3 TO X2                         7  4980  # K1B 094           52 14212     094
  584                LCA   LZDAAA,0&X2        * LOAD DATA I9G INTO STACK            7  4987  L K3E 0!0           53 14235     000+2
  585                MA    X3,0&X2                                                  7  4994  # 099 0!0           53   099     000+2
  586         * POP (X1:3)
  587                LCA   0&X2,X1            * LOAD DATA IN STACK INTO MEMORY      7  5001  L 0!0 089           53   000+2   089
  588                MA    LZDAAA,X2          * ADD -3 TO X2                        7  5008  # K3E 094           53 14235     094
  589         * PUSH (0+X1:3)
  590                MA    LWDAAA,X2          * ADD 3 TO X2                         7  5015  # K1B 094           53 14212     094
  591                LCA   0&X1,0&X2          * LOAD DATA 0&X1 INTO STACK           7  5022  L 0'0 0!0           54   000+1   000+2
  592                MA    LAEAAA,0&X1        * POSTINCREMENT POINTER POINTED B     7  5029  # !1D 0'0           54 14014     000+1
  593         * POP (X1:3)
  594                LCA   0&X2,X1            * LOAD DATA IN STACK INTO MEMORY      7  5036  L 0!0 089           54   000+2   089
  595                MA    LZDAAA,X2          * ADD -3 TO X2                        7  5043  # K3E 094           54 14235     094
  596         * PUSH (0+X1:1)
  597                MA    LAEAAA,X2          * ADD 1 TO X2                         7  5050  # !1D 094           54 14014     094
1                                                                                                         PAGE   11
0 SEQ PG LIN  LABEL  OP    OPERANDS                                            SFX CT  LOCN  INSTRUCTION TYPE  CARD A-ADDR  B-ADDR

  598                LCA   0&X1,0&X2          * LOAD DATA 0&X1 INTO STACK           7  5057  L 0'0 0!0           55   000+1   000+2
  599         * END DEREFERENCEEXPRESSION (*(CFORMAT_STR++))
  600         * PUSH (LKEAAA:3)
  601                MA    LWDAAA,X2          * ADD 3 TO X2                         7  5064  # K1B 094           55 14212     094
  602                LCA   LKEAAA,0&X2        * LOAD DATA 007 INTO STACK            7  5071  L J2H 0!0           55 14128     000+2
  603                MA    X3,0&X2                                                  7  5078  # 099 0!0           55   099     000+2
  604         * POP (X1:3)
  605                LCA   0&X2,X1            * LOAD DATA IN STACK INTO MEMORY      7  5085  L 0!0 089           55   000+2   089
  606                MA    LZDAAA,X2          * ADD -3 TO X2                        7  5092  # K3E 094           56 14235     094
  607                LCA   0&X2,0&X1          * LOAD DATA IN STACK INTO X1          7  5099  L 0!0 0'0           56   000+2   000+1
  608         * END ASSIGNMENT (C = (*(CFORMAT_STR++)))
  609         * CONSTANT ('\0' : EOS)
  610         * PUSH (EOS:1)
  611                MA    LAEAAA,X2          * ADD 1 TO X2                         7  5106  # !1D 094           56 14014     094
  612                LCA   EOS,0&X2           * LOAD DATA EOS INTO STACK            7  5113  L 345 0!0           56   345     000+2
  613                C     0&X2,15999&X2      * COMPARE                             7  5120  C 0!0 IRI           56   000+2 15999+2
  614         * POP (1)
  615                MA    LBEAAA,X2          * ADD -1 TO X2                        7  5127  # !2E 094           57 14025     094
  616         * POP (1)
  617                MA    LBEAAA,X2          * ADD -1 TO X2                        7  5134  # !2E 094           57 14025     094
  618         * PUSH (LCEAAA:5)
  619                MA    LDEAAA,X2          * ADD 5 TO X2                         7  5141  # !5? 094           57 14050     094
  620                LCA   LCEAAA,0&X2        * LOAD DATA 00001 INTO STACK          7  5148  L !3I 0!0           57 14039     000+2
  621                BE    LIEAAA             * JUMP IF EQUAL                       5  5155  B /6U S             57  5164
  622                B     LJEAAA             * JUMP TO END                         4  5160  B /7/               57  5171
  623         LIEAAA MCW   LEEAAA,0&X2        * EQUAL: SET STACK LOCATION TO 0      7  5164  M !6A 0!0           58 14061     000+2
  624         LJEAAA NOP                      * END OF NOTEQUAL                     1  5171  N                   58
  625                MCS   0&X2,0&X2          * CLEAR WM                            7  5172  Z 0!0 0!0           58   000+2   000+2
  626         * POP (5)
  627                MA    LFEAAA,X2          * ADD -5 TO X2                        7  5179  # !6H 094           58 14068     094
  628                BCE   LNDAAA,5&X2,       * JUMP TO BOTTOM                      8  5186  B B6U 0!5           58  7264     005+2
  629         *
  630         ***************************************
  631         * BEGINBLOCK [BLOCK LRCAAA:LQCAAA]
  632         * IF [IF ((C != '%') THEN [BLOCK LSCAAA:LRCAAA] ELSE [BLOCK LTCAAA:LRCAAA]]
  633         * NOTEQUAL (!=) (C != '%')
  634         * LOCAL VARIABLE (C : 7+X3)
  635         * PUSH (7+X3:1)
  636                MA    LAEAAA,X2          * ADD 1 TO X2                         7  5194  # !1D 094           58 14014     094
  637                LCA   7&X3,0&X2          * LOAD DATA 7&X3 INTO STACK           7  5201  L 0?7 0!0           59   007+3   000+2
  638         * CONSTANT ('%' : @%@)
  639         * PUSH (@%@:1)
  640                MA    LAEAAA,X2          * ADD 1 TO X2                         7  5208  # !1D 094           59 14014     094
  641                LCA   @%@,0&X2           * LOAD DATA % INTO STACK              7  5215  L K4C 0!0           59 14243     000+2
  642                C     0&X2,15999&X2      * COMPARE                             7  5222  C 0!0 IRI           59   000+2 15999+2
  643         * POP (1)
  644                MA    LBEAAA,X2          * ADD -1 TO X2                        7  5229  # !2E 094           59 14025     094
  645         * POP (1)
  646                MA    LBEAAA,X2          * ADD -1 TO X2                        7  5236  # !2E 094           60 14025     094
  647         * PUSH (LCEAAA:5)
1                                                                                                         PAGE   12
0 SEQ PG LIN  LABEL  OP    OPERANDS                                            SFX CT  LOCN  INSTRUCTION TYPE  CARD A-ADDR  B-ADDR

  648                MA    LDEAAA,X2          * ADD 5 TO X2                         7  5243  # !5? 094           60 14050     094
  649                LCA   LCEAAA,0&X2        * LOAD DATA 00001 INTO STACK          7  5250  L !3I 0!0           60 14039     000+2
  650                BE    LLEAAA             * JUMP IF EQUAL                       5  5257  B S6W S             60  5266
  651                B     LMEAAA             * JUMP TO END                         4  5262  B S7T               60  5273
  652         LLEAAA MCW   LEEAAA,0&X2        * EQUAL: SET STACK LOCATION TO 0      7  5266  M !6A 0!0           60 14061     000+2
  653         LMEAAA NOP                      * END OF NOTEQUAL                     1  5273  N                   60
  654                MCS   0&X2,0&X2          * CLEAR WM                            7  5274  Z 0!0 0!0           61   000+2   000+2
  655         * POP (5)
  656                MA    LFEAAA,X2          * ADD -5 TO X2                        7  5281  # !6H 094           61 14068     094
  657                BCE   LKDAAA,5&X2,       * JUMP WHEN FALSE                     8  5288  B T8T 0!5           61  5383     005+2
  658         *
  659         ***************************************
  660         * BEGINBLOCK [BLOCK LSCAAA:LRCAAA]
  661         * FUNCTION CALL PUTCHAR(C)
  662         * PUSH (5)
  663                MA    LDEAAA,X2          * ADD 5 TO X2                         7  5296  # !5? 094           61 14050     094
  664         * LOCAL VARIABLE (C : 7+X3)
  665         * PUSH (7+X3:1)
  666                MA    LAEAAA,X2          * ADD 1 TO X2                         7  5303  # !1D 094           61 14014     094
  667                LCA   7&X3,0&X2          * LOAD DATA 7&X3 INTO STACK           7  5310  L 0?7 0!0           62   007+3   000+2
  668         * PUSH (X3:3)
  669                MA    LWDAAA,X2          * ADD 3 TO X2                         7  5317  # K1B 094           62 14212     094
  670                LCA   X3,0&X2            * LOAD DATA X3 INTO STACK             7  5324  L 099 0!0           62   099     000+2
  671                MCW   X2,X3              * COPY X2 INTO X3                     7  5331  M 094 099           62   094     099
  672                B     LLBAAA             * JUMP TO FUNCTION PUTCHAR            4  5338  B 77Q               62  8778
  673         * POP (X3:3)
  674                LCA   0&X2,X3            * LOAD DATA IN STACK INTO MEMORY      7  5342  L 0!0 099           62   000+2   099
  675                MA    LZDAAA,X2          * ADD -3 TO X2                        7  5349  # K3E 094           63 14235     094
  676         * POP (1)
  677                MA    LBEAAA,X2          * ADD -1 TO X2                        7  5356  # !2E 094           63 14025     094
  678         * POP (5)
  679                MA    LFEAAA,X2          * ADD -5 TO X2                        7  5363  # !6H 094           63 14068     094
  680         LSCAAA NOP                      * RETURN                              1  5370  N                   63
  681                BCE   LRCAAA,RF,R        * JUMP BACK TO CALLER                 8  5371  B B5/ 340 R         63  7251     340
  682         * ENDBLOCK [BLOCK LSCAAA:LRCAAA]
  683         ***************************************
  684         *
  685                B     LLDAAA             * JUMP WHEN TRUE                      4  5379  B B5'               63  7250
  686         LKDAAA NOP                      * EXECUTED WHEN FALSE                 1  5383  N                   63
  687         *
  688         ***************************************
  689         * BEGINBLOCK [BLOCK LTCAAA:LRCAAA]
  690         * ASSIGNMENT (C = (*(CFORMAT_STR++)))
  691         * DEREFERENCEEXPRESSION (*(CFORMAT_STR++))
  692         * POSTINCREMENT (CFORMAT_STR++)
  693         * PUSH (LZDAAA:3)
  694                MA    LWDAAA,X2          * ADD 3 TO X2                         7  5384  # K1B 094           64 14212     094
  695                LCA   LZDAAA,0&X2        * LOAD DATA I9G INTO STACK            7  5391  L K3E 0!0           64 14235     000+2
  696                MA    X3,0&X2                                                  7  5398  # 099 0!0           64   099     000+2
  697         * POP (X1:3)
1                                                                                                         PAGE   13
0 SEQ PG LIN  LABEL  OP    OPERANDS                                            SFX CT  LOCN  INSTRUCTION TYPE  CARD A-ADDR  B-ADDR

  698                LCA   0&X2,X1            * LOAD DATA IN STACK INTO MEMORY      7  5405  L 0!0 089           64   000+2   089
  699                MA    LZDAAA,X2          * ADD -3 TO X2                        7  5412  # K3E 094           64 14235     094
  700         * PUSH (0+X1:3)
  701                MA    LWDAAA,X2          * ADD 3 TO X2                         7  5419  # K1B 094           65 14212     094
  702                LCA   0&X1,0&X2          * LOAD DATA 0&X1 INTO STACK           7  5426  L 0'0 0!0           65   000+1   000+2
  703                MA    LAEAAA,0&X1        * POSTINCREMENT POINTER POINTED B     7  5433  # !1D 0'0           65 14014     000+1
  704         * POP (X1:3)
  705                LCA   0&X2,X1            * LOAD DATA IN STACK INTO MEMORY      7  5440  L 0!0 089           65   000+2   089
  706                MA    LZDAAA,X2          * ADD -3 TO X2                        7  5447  # K3E 094           65 14235     094
  707         * PUSH (0+X1:1)
  708                MA    LAEAAA,X2          * ADD 1 TO X2                         7  5454  # !1D 094           66 14014     094
  709                LCA   0&X1,0&X2          * LOAD DATA 0&X1 INTO STACK           7  5461  L 0'0 0!0           66   000+1   000+2
  710         * END DEREFERENCEEXPRESSION (*(CFORMAT_STR++))
  711         * PUSH (LKEAAA:3)
  712                MA    LWDAAA,X2          * ADD 3 TO X2                         7  5468  # K1B 094           66 14212     094
  713                LCA   LKEAAA,0&X2        * LOAD DATA 007 INTO STACK            7  5475  L J2H 0!0           66 14128     000+2
  714                MA    X3,0&X2                                                  7  5482  # 099 0!0           66   099     000+2
  715         * POP (X1:3)
  716                LCA   0&X2,X1            * LOAD DATA IN STACK INTO MEMORY      7  5489  L 0!0 089           67   000+2   089
  717                MA    LZDAAA,X2          * ADD -3 TO X2                        7  5496  # K3E 094           67 14235     094
  718         * POP (0+X1:1)
  719                LCA   0&X2,0&X1          * LOAD DATA IN STACK INTO MEMORY      7  5503  L 0!0 0'0           67   000+2   000+1
  720                MA    LBEAAA,X2          * ADD -1 TO X2                        7  5510  # !2E 094           67 14025     094
  721         * END ASSIGNMENT (C = (*(CFORMAT_STR++)))
  722         * IF [IF ((C == '%') THEN [BLOCK LUCAAA:LTCAAA] ELSE [IF ((C == 'C') THEN [
  723         * EQUAL (==) (C == '%')
  724         * LOCAL VARIABLE (C : 7+X3)
  725         * PUSH (7+X3:1)
  726                MA    LAEAAA,X2          * ADD 1 TO X2                         7  5517  # !1D 094           67 14014     094
  727                LCA   7&X3,0&X2          * LOAD DATA 7&X3 INTO STACK           7  5524  L 0?7 0!0           68   007+3   000+2
  728         * CONSTANT ('%' : @%@)
  729         * PUSH (@%@:1)
  730                MA    LAEAAA,X2          * ADD 1 TO X2                         7  5531  # !1D 094           68 14014     094
  731                LCA   @%@,0&X2           * LOAD DATA % INTO STACK              7  5538  L K4C 0!0           68 14243     000+2
  732                C     0&X2,15999&X2      * COMPARE                             7  5545  C 0!0 IRI           68   000+2 15999+2
  733         * POP (1)
  734                MA    LBEAAA,X2          * ADD -1 TO X2                        7  5552  # !2E 094           68 14025     094
  735         * POP (1)
  736                MA    LBEAAA,X2          * ADD -1 TO X2                        7  5559  # !2E 094           69 14025     094
  737         * PUSH (LEEAAA:5)
  738                MA    LDEAAA,X2          * ADD 5 TO X2                         7  5566  # !5? 094           69 14050     094
  739                LCA   LEEAAA,0&X2        * LOAD DATA 00000 INTO STACK          7  5573  L !6A 0!0           69 14061     000+2
  740                BE    LOEAAA             * JUMP IF EQUAL                       5  5580  B V8Z S             69  5589
  741                B     LPEAAA             * JUMP TO END                         4  5585  B V9W               69  5596
  742         LOEAAA MCW   LCEAAA,0&X2        * EQUAL                               7  5589  M !3I 0!0           69 14039     000+2
  743         LPEAAA NOP                      * END OF EQUAL                        1  5596  N                   69
  744                MCS   0&X2,0&X2          * CLEAR WM                            7  5597  Z 0!0 0!0           70   000+2   000+2
  745         * POP (5)
  746                MA    LFEAAA,X2          * ADD -5 TO X2                        7  5604  # !6H 094           70 14068     094
  747                BCE   LIDAAA,5&X2,       * JUMP WHEN FALSE                     8  5611  B X0W 0!5           70  5706     005+2
1                                                                                                         PAGE   14
0 SEQ PG LIN  LABEL  OP    OPERANDS                                            SFX CT  LOCN  INSTRUCTION TYPE  CARD A-ADDR  B-ADDR

  748         *
  749         ***************************************
  750         * BEGINBLOCK [BLOCK LUCAAA:LTCAAA]
  751         * FUNCTION CALL PUTCHAR('%')
  752         * PUSH (5)
  753                MA    LDEAAA,X2          * ADD 5 TO X2                         7  5619  # !5? 094           70 14050     094
  754         * CONSTANT ('%' : @%@)
  755         * PUSH (@%@:1)
  756                MA    LAEAAA,X2          * ADD 1 TO X2                         7  5626  # !1D 094           70 14014     094
  757                LCA   @%@,0&X2           * LOAD DATA % INTO STACK              7  5633  L K4C 0!0           71 14243     000+2
  758         * PUSH (X3:3)
  759                MA    LWDAAA,X2          * ADD 3 TO X2                         7  5640  # K1B 094           71 14212     094
  760                LCA   X3,0&X2            * LOAD DATA X3 INTO STACK             7  5647  L 099 0!0           71   099     000+2
  761                MCW   X2,X3              * COPY X2 INTO X3                     7  5654  M 094 099           71   094     099
  762                B     LLBAAA             * JUMP TO FUNCTION PUTCHAR            4  5661  B 77Q               71  8778
  763         * POP (X3:3)
  764                LCA   0&X2,X3            * LOAD DATA IN STACK INTO MEMORY      7  5665  L 0!0 099           71   000+2   099
  765                MA    LZDAAA,X2          * ADD -3 TO X2                        7  5672  # K3E 094           72 14235     094
  766         * POP (1)
  767                MA    LBEAAA,X2          * ADD -1 TO X2                        7  5679  # !2E 094           72 14025     094
  768         * POP (5)
  769                MA    LFEAAA,X2          * ADD -5 TO X2                        7  5686  # !6H 094           72 14068     094
  770         LUCAAA NOP                      * RETURN                              1  5693  N                   72
  771                BCE   LTCAAA,RF,R        * JUMP BACK TO CALLER                 8  5694  B B4/ 340 R         72  7241     340
  772         * ENDBLOCK [BLOCK LUCAAA:LTCAAA]
  773         ***************************************
  774         *
  775                B     LJDAAA             * JUMP WHEN TRUE                      4  5702  B B4'               72  7240
  776         LIDAAA NOP                      * EXECUTED WHEN FALSE                 1  5706  N                   72
  777         * IF [IF ((C == 'C') THEN [BLOCK LVCAAA:LTCAAA] ELSE [IF ((C == 'S') THEN [
  778         * EQUAL (==) (C == 'C')
  779         * LOCAL VARIABLE (C : 7+X3)
  780         * PUSH (7+X3:1)
  781                MA    LAEAAA,X2          * ADD 1 TO X2                         7  5707  # !1D 094           73 14014     094
  782                LCA   7&X3,0&X2          * LOAD DATA 7&X3 INTO STACK           7  5714  L 0?7 0!0           73   007+3   000+2
  783         * CONSTANT ('C' : @C@)
  784         * PUSH (@C@:1)
  785                MA    LAEAAA,X2          * ADD 1 TO X2                         7  5721  # !1D 094           73 14014     094
  786                LCA   @C@,0&X2           * LOAD DATA C INTO STACK              7  5728  L K4D 0!0           73 14244     000+2
  787                C     0&X2,15999&X2      * COMPARE                             7  5735  C 0!0 IRI           73   000+2 15999+2
  788         * POP (1)
  789                MA    LBEAAA,X2          * ADD -1 TO X2                        7  5742  # !2E 094           74 14025     094
  790         * POP (1)
  791                MA    LBEAAA,X2          * ADD -1 TO X2                        7  5749  # !2E 094           74 14025     094
  792         * PUSH (LEEAAA:5)
  793                MA    LDEAAA,X2          * ADD 5 TO X2                         7  5756  # !5? 094           74 14050     094
  794                LCA   LEEAAA,0&X2        * LOAD DATA 00000 INTO STACK          7  5763  L !6A 0!0           74 14061     000+2
  795                BE    LQEAAA             * JUMP IF EQUAL                       5  5770  B X7Z S             74  5779
  796                B     LREAAA             * JUMP TO END                         4  5775  B X8W               74  5786
  797         LQEAAA MCW   LCEAAA,0&X2        * EQUAL                               7  5779  M !3I 0!0           75 14039     000+2
1                                                                                                         PAGE   15
0 SEQ PG LIN  LABEL  OP    OPERANDS                                            SFX CT  LOCN  INSTRUCTION TYPE  CARD A-ADDR  B-ADDR

  798         LREAAA NOP                      * END OF EQUAL                        1  5786  N                   75
  799                MCS   0&X2,0&X2          * CLEAR WM                            7  5787  Z 0!0 0!0           75   000+2   000+2
  800         * POP (5)
  801                MA    LFEAAA,X2          * ADD -5 TO X2                        7  5794  # !6H 094           75 14068     094
  802                BCE   LGDAAA,5&X2,       * JUMP WHEN FALSE                     8  5801  B !1V 0!5           75  6015     005+2
  803         *
  804         ***************************************
  805         * BEGINBLOCK [BLOCK LVCAAA:LTCAAA]
  806         * FUNCTION CALL PUTCHAR((*ARG))
  807         * PUSH (5)
  808                MA    LDEAAA,X2          * ADD 5 TO X2                         7  5809  # !5? 094           75 14050     094
  809         * DEREFERENCEEXPRESSION (*ARG)
  810         * LOCAL VARIABLE (ARG : 6+X3)
  811         * PUSH (6+X3:3)
  812                MA    LWDAAA,X2          * ADD 3 TO X2                         7  5816  # K1B 094           76 14212     094
  813                LCA   6&X3,0&X2          * LOAD DATA 6&X3 INTO STACK           7  5823  L 0?6 0!0           76   006+3   000+2
  814         * POP (X1:3)
  815                LCA   0&X2,X1            * LOAD DATA IN STACK INTO MEMORY      7  5830  L 0!0 089           76   000+2   089
  816                MA    LZDAAA,X2          * ADD -3 TO X2                        7  5837  # K3E 094           76 14235     094
  817         * PUSH (0+X1:1)
  818                MA    LAEAAA,X2          * ADD 1 TO X2                         7  5844  # !1D 094           76 14014     094
  819                LCA   0&X1,0&X2          * LOAD DATA 0&X1 INTO STACK           7  5851  L 0'0 0!0           77   000+1   000+2
  820         * END DEREFERENCEEXPRESSION (*ARG)
  821         * PUSH (X3:3)
  822                MA    LWDAAA,X2          * ADD 3 TO X2                         7  5858  # K1B 094           77 14212     094
  823                LCA   X3,0&X2            * LOAD DATA X3 INTO STACK             7  5865  L 099 0!0           77   099     000+2
  824                MCW   X2,X3              * COPY X2 INTO X3                     7  5872  M 094 099           77   094     099
  825                B     LLBAAA             * JUMP TO FUNCTION PUTCHAR            4  5879  B 77Q               77  8778
  826         * POP (X3:3)
  827                LCA   0&X2,X3            * LOAD DATA IN STACK INTO MEMORY      7  5883  L 0!0 099           77   000+2   099
  828                MA    LZDAAA,X2          * ADD -3 TO X2                        7  5890  # K3E 094           78 14235     094
  829         * POP (1)
  830                MA    LBEAAA,X2          * ADD -1 TO X2                        7  5897  # !2E 094           78 14025     094
  831         * POP (5)
  832                MA    LFEAAA,X2          * ADD -5 TO X2                        7  5904  # !6H 094           78 14068     094
  833         * ASSIGNMENT (ARG = (ARG + 15999))
  834         * ADDITION (ARG + 15999)
  835         * LOCAL VARIABLE (ARG : 6+X3)
  836         * PUSH (6+X3:3)
  837                MA    LWDAAA,X2          * ADD 3 TO X2                         7  5911  # K1B 094           78 14212     094
  838                LCA   6&X3,0&X2          * LOAD DATA 6&X3 INTO STACK           7  5918  L 0?6 0!0           78   006+3   000+2
  839         * CONSTANT (15999 : LBEAAA)
  840         * PUSH (LBEAAA:3)
  841                MA    LWDAAA,X2          * ADD 3 TO X2                         7  5925  # K1B 094           79 14212     094
  842                LCA   LBEAAA,0&X2        * LOAD DATA I9I INTO STACK            7  5932  L !2E 0!0           79 14025     000+2
  843                MA    0&X2,15997&X2      * ADD                                 7  5939  # 0!0 IRG           79   000+2 15997+2
  844         * POP (3)
  845                MA    LZDAAA,X2          * ADD -3 TO X2                        7  5946  # K3E 094           79 14235     094
  846         * PUSH (LHEAAA:3)
  847                MA    LWDAAA,X2          * ADD 3 TO X2                         7  5953  # K1B 094           79 14212     094
1                                                                                                         PAGE   16
0 SEQ PG LIN  LABEL  OP    OPERANDS                                            SFX CT  LOCN  INSTRUCTION TYPE  CARD A-ADDR  B-ADDR

  848                LCA   LHEAAA,0&X2        * LOAD DATA 006 INTO STACK            7  5960  L !9B 0!0           80 14092     000+2
  849                MA    X3,0&X2                                                  7  5967  # 099 0!0           80   099     000+2
  850         * POP (X1:3)
  851                LCA   0&X2,X1            * LOAD DATA IN STACK INTO MEMORY      7  5974  L 0!0 089           80   000+2   089
  852                MA    LZDAAA,X2          * ADD -3 TO X2                        7  5981  # K3E 094           80 14235     094
  853         * POP (0+X1:3)
  854                LCA   0&X2,0&X1          * LOAD DATA IN STACK INTO MEMORY      7  5988  L 0!0 0'0           80   000+2   000+1
  855                MA    LZDAAA,X2          * ADD -3 TO X2                        7  5995  # K3E 094           81 14235     094
  856         * END ASSIGNMENT (ARG = (ARG + 15999))
  857         LVCAAA NOP                      * RETURN                              1  6002  N                   81
  858                BCE   LTCAAA,RF,R        * JUMP BACK TO CALLER                 8  6003  B B4/ 340 R         81  7241     340
  859         * ENDBLOCK [BLOCK LVCAAA:LTCAAA]
  860         ***************************************
  861         *
  862                B     LHDAAA             * JUMP WHEN TRUE                      4  6011  B B3Z               81  7239
  863         LGDAAA NOP                      * EXECUTED WHEN FALSE                 1  6015  N                   81
  864         * IF [IF ((C == 'S') THEN [BLOCK LWCAAA:LTCAAA] ELSE [IF ((C == 'D') THEN [
  865         * EQUAL (==) (C == 'S')
  866         * LOCAL VARIABLE (C : 7+X3)
  867         * PUSH (7+X3:1)
  868                MA    LAEAAA,X2          * ADD 1 TO X2                         7  6016  # !1D 094           81 14014     094
  869                LCA   7&X3,0&X2          * LOAD DATA 7&X3 INTO STACK           7  6023  L 0?7 0!0           81   007+3   000+2
  870         * CONSTANT ('S' : @S@)
  871         * PUSH (@S@:1)
  872                MA    LAEAAA,X2          * ADD 1 TO X2                         7  6030  # !1D 094           82 14014     094
  873                LCA   @S@,0&X2           * LOAD DATA S INTO STACK              7  6037  L K4E 0!0           82 14245     000+2
  874                C     0&X2,15999&X2      * COMPARE                             7  6044  C 0!0 IRI           82   000+2 15999+2
  875         * POP (1)
  876                MA    LBEAAA,X2          * ADD -1 TO X2                        7  6051  # !2E 094           82 14025     094
  877         * POP (1)
  878                MA    LBEAAA,X2          * ADD -1 TO X2                        7  6058  # !2E 094           82 14025     094
  879         * PUSH (LEEAAA:5)
  880                MA    LDEAAA,X2          * ADD 5 TO X2                         7  6065  # !5? 094           83 14050     094
  881                LCA   LEEAAA,0&X2        * LOAD DATA 00000 INTO STACK          7  6072  L !6A 0!0           83 14061     000+2
  882                BE    LTEAAA             * JUMP IF EQUAL                       5  6079  B !8Y S             83  6088
  883                B     LUEAAA             * JUMP TO END                         4  6084  B !9V               83  6095
  884         LTEAAA MCW   LCEAAA,0&X2        * EQUAL                               7  6088  M !3I 0!0           83 14039     000+2
  885         LUEAAA NOP                      * END OF EQUAL                        1  6095  N                   83
  886                MCS   0&X2,0&X2          * CLEAR WM                            7  6096  Z 0!0 0!0           83   000+2   000+2
  887         * POP (5)
  888                MA    LFEAAA,X2          * ADD -5 TO X2                        7  6103  # !6H 094           84 14068     094
  889                BCE   LEDAAA,5&X2,       * JUMP WHEN FALSE                     8  6110  B L2U 0!5           84  6324     005+2
  890         *
  891         ***************************************
  892         * BEGINBLOCK [BLOCK LWCAAA:LTCAAA]
  893         * FUNCTION CALL PUTS((*((**CHAR) ARG)))
  894         * PUSH (5)
  895                MA    LDEAAA,X2          * ADD 5 TO X2                         7  6118  # !5? 094           84 14050     094
  896         * DEREFERENCEEXPRESSION (*((**CHAR) ARG))
  897         * LOCAL VARIABLE (ARG : 6+X3)
1                                                                                                         PAGE   17
0 SEQ PG LIN  LABEL  OP    OPERANDS                                            SFX CT  LOCN  INSTRUCTION TYPE  CARD A-ADDR  B-ADDR

  898         * PUSH (6+X3:3)
  899                MA    LWDAAA,X2          * ADD 3 TO X2                         7  6125  # K1B 094           84 14212     094
  900                LCA   6&X3,0&X2          * LOAD DATA 6&X3 INTO STACK           7  6132  L 0?6 0!0           84   006+3   000+2
  901         * POP (X1:3)
  902                LCA   0&X2,X1            * LOAD DATA IN STACK INTO MEMORY      7  6139  L 0!0 089           85   000+2   089
  903                MA    LZDAAA,X2          * ADD -3 TO X2                        7  6146  # K3E 094           85 14235     094
  904         * PUSH (0+X1:3)
  905                MA    LWDAAA,X2          * ADD 3 TO X2                         7  6153  # K1B 094           85 14212     094
  906                LCA   0&X1,0&X2          * LOAD DATA 0&X1 INTO STACK           7  6160  L 0'0 0!0           85   000+1   000+2
  907         * END DEREFERENCEEXPRESSION (*((**CHAR) ARG))
  908         * PUSH (X3:3)
  909                MA    LWDAAA,X2          * ADD 3 TO X2                         7  6167  # K1B 094           85 14212     094
  910                LCA   X3,0&X2            * LOAD DATA X3 INTO STACK             7  6174  L 099 0!0           86   099     000+2
  911                MCW   X2,X3              * COPY X2 INTO X3                     7  6181  M 094 099           86   094     099
  912                B     LWBAAA             * JUMP TO FUNCTION PUTS               4  6188  B 52'               86  4520
  913         * POP (X3:3)
  914                LCA   0&X2,X3            * LOAD DATA IN STACK INTO MEMORY      7  6192  L 0!0 099           86   000+2   099
  915                MA    LZDAAA,X2          * ADD -3 TO X2                        7  6199  # K3E 094           86 14235     094
  916         * POP (3)
  917                MA    LZDAAA,X2          * ADD -3 TO X2                        7  6206  # K3E 094           86 14235     094
  918         * POP (5)
  919                MA    LFEAAA,X2          * ADD -5 TO X2                        7  6213  # !6H 094           87 14068     094
  920         * ASSIGNMENT (ARG = (ARG + 15997))
  921         * ADDITION (ARG + 15997)
  922         * LOCAL VARIABLE (ARG : 6+X3)
  923         * PUSH (6+X3:3)
  924                MA    LWDAAA,X2          * ADD 3 TO X2                         7  6220  # K1B 094           87 14212     094
  925                LCA   6&X3,0&X2          * LOAD DATA 6&X3 INTO STACK           7  6227  L 0?6 0!0           87   006+3   000+2
  926         * CONSTANT (15997 : LZDAAA)
  927         * PUSH (LZDAAA:3)
  928                MA    LWDAAA,X2          * ADD 3 TO X2                         7  6234  # K1B 094           87 14212     094
  929                LCA   LZDAAA,0&X2        * LOAD DATA I9G INTO STACK            7  6241  L K3E 0!0           87 14235     000+2
  930                MA    0&X2,15997&X2      * ADD                                 7  6248  # 0!0 IRG           88   000+2 15997+2
  931         * POP (3)
  932                MA    LZDAAA,X2          * ADD -3 TO X2                        7  6255  # K3E 094           88 14235     094
  933         * PUSH (LHEAAA:3)
  934                MA    LWDAAA,X2          * ADD 3 TO X2                         7  6262  # K1B 094           88 14212     094
  935                LCA   LHEAAA,0&X2        * LOAD DATA 006 INTO STACK            7  6269  L !9B 0!0           88 14092     000+2
  936                MA    X3,0&X2                                                  7  6276  # 099 0!0           88   099     000+2
  937         * POP (X1:3)
  938                LCA   0&X2,X1            * LOAD DATA IN STACK INTO MEMORY      7  6283  L 0!0 089           89   000+2   089
  939                MA    LZDAAA,X2          * ADD -3 TO X2                        7  6290  # K3E 094           89 14235     094
  940         * POP (0+X1:3)
  941                LCA   0&X2,0&X1          * LOAD DATA IN STACK INTO MEMORY      7  6297  L 0!0 0'0           89   000+2   000+1
  942                MA    LZDAAA,X2          * ADD -3 TO X2                        7  6304  # K3E 094           89 14235     094
  943         * END ASSIGNMENT (ARG = (ARG + 15997))
  944         LWCAAA NOP                      * RETURN                              1  6311  N                   89
  945                BCE   LTCAAA,RF,R        * JUMP BACK TO CALLER                 8  6312  B B4/ 340 R         89  7241     340
  946         * ENDBLOCK [BLOCK LWCAAA:LTCAAA]
  947         ***************************************
1                                                                                                         PAGE   18
0 SEQ PG LIN  LABEL  OP    OPERANDS                                            SFX CT  LOCN  INSTRUCTION TYPE  CARD A-ADDR  B-ADDR

  948         *
  949                B     LFDAAA             * JUMP WHEN TRUE                      4  6320  B B3Y               90  7238
  950         LEDAAA NOP                      * EXECUTED WHEN FALSE                 1  6324  N                   90
  951         * IF [IF ((C == 'D') THEN [BLOCK LXCAAA:LTCAAA] ELSE [IF ((C == 'P') THEN [
  952         * EQUAL (==) (C == 'D')
  953         * LOCAL VARIABLE (C : 7+X3)
  954         * PUSH (7+X3:1)
  955                MA    LAEAAA,X2          * ADD 1 TO X2                         7  6325  # !1D 094           90 14014     094
  956                LCA   7&X3,0&X2          * LOAD DATA 7&X3 INTO STACK           7  6332  L 0?7 0!0           90   007+3   000+2
  957         * CONSTANT ('D' : @D@)
  958         * PUSH (@D@:1)
  959                MA    LAEAAA,X2          * ADD 1 TO X2                         7  6339  # !1D 094           90 14014     094
  960                LCA   @D@,0&X2           * LOAD DATA D INTO STACK              7  6346  L K4F 0!0           90 14246     000+2
  961                C     0&X2,15999&X2      * COMPARE                             7  6353  C 0!0 IRI           91   000+2 15999+2
  962         * POP (1)
  963                MA    LBEAAA,X2          * ADD -1 TO X2                        7  6360  # !2E 094           91 14025     094
  964         * POP (1)
  965                MA    LBEAAA,X2          * ADD -1 TO X2                        7  6367  # !2E 094           91 14025     094
  966         * PUSH (LEEAAA:5)
  967                MA    LDEAAA,X2          * ADD 5 TO X2                         7  6374  # !5? 094           91 14050     094
  968                LCA   LEEAAA,0&X2        * LOAD DATA 00000 INTO STACK          7  6381  L !6A 0!0           91 14061     000+2
  969                BE    LWEAAA             * JUMP IF EQUAL                       5  6388  B L9X S             92  6397
  970                B     LXEAAA             * JUMP TO END                         4  6393  B M0U               92  6404
  971         LWEAAA MCW   LCEAAA,0&X2        * EQUAL                               7  6397  M !3I 0!0           92 14039     000+2
  972         LXEAAA NOP                      * END OF EQUAL                        1  6404  N                   92
  973                MCS   0&X2,0&X2          * CLEAR WM                            7  6405  Z 0!0 0!0           92   000+2   000+2
  974         * POP (5)
  975                MA    LFEAAA,X2          * ADD -5 TO X2                        7  6412  # !6H 094           92 14068     094
  976                BCE   LCDAAA,5&X2,       * JUMP WHEN FALSE                     8  6419  B P7X 0!5           92  6777     005+2
  977         *
  978         ***************************************
  979         * BEGINBLOCK [BLOCK LXCAAA:LTCAAA]
  980                MA    LKEAAA,X2          * RESERVE 7 BYTES OF SPACE ON STA     7  6427  # J2H 094           93 14128     094
  981         * FUNCTION CALL ITOA((*((*INT) ARG)), A, 10)
  982         * PUSH (3)
  983                MA    LWDAAA,X2          * ADD 3 TO X2                         7  6434  # K1B 094           93 14212     094
  984         * CONSTANT (10 : LZEAAA)
  985         * PUSH (LZEAAA:5)
  986                MA    LDEAAA,X2          * ADD 5 TO X2                         7  6441  # !5? 094           93 14050     094
  987                LCA   LZEAAA,0&X2        * LOAD DATA 00010 INTO STACK          7  6448  L K4? 0!0           93 14240     000+2
  988         * LOCAL ARRAY (A:CHAR [7])
  989         * PUSH (LAFAAA:3)
  990                MA    LWDAAA,X2          * ADD 3 TO X2                         7  6455  # K1B 094           93 14212     094
  991                LCA   LAFAAA,0&X2        * LOAD DATA 012 INTO STACK            7  6462  L !1G 0!0           94 14017     000+2
  992                MA    X3,0&X2                                                  7  6469  # 099 0!0           94   099     000+2
  993         * DEREFERENCEEXPRESSION (*((*INT) ARG))
  994         * LOCAL VARIABLE (ARG : 6+X3)
  995         * PUSH (6+X3:3)
  996                MA    LWDAAA,X2          * ADD 3 TO X2                         7  6476  # K1B 094           94 14212     094
  997                LCA   6&X3,0&X2          * LOAD DATA 6&X3 INTO STACK           7  6483  L 0?6 0!0           94   006+3   000+2
1                                                                                                         PAGE   19
0 SEQ PG LIN  LABEL  OP    OPERANDS                                            SFX CT  LOCN  INSTRUCTION TYPE  CARD A-ADDR  B-ADDR

  998         * POP (X1:3)
  999                LCA   0&X2,X1            * LOAD DATA IN STACK INTO MEMORY      7  6490  L 0!0 089           94   000+2   089
 1000                MA    LZDAAA,X2          * ADD -3 TO X2                        7  6497  # K3E 094           95 14235     094
 1001         * PUSH (0+X1:5)
 1002                MA    LDEAAA,X2          * ADD 5 TO X2                         7  6504  # !5? 094           95 14050     094
 1003                LCA   0&X1,0&X2          * LOAD DATA 0&X1 INTO STACK           7  6511  L 0'0 0!0           95   000+1   000+2
 1004         * END DEREFERENCEEXPRESSION (*((*INT) ARG))
 1005         * PUSH (X3:3)
 1006                MA    LWDAAA,X2          * ADD 3 TO X2                         7  6518  # K1B 094           95 14212     094
 1007                LCA   X3,0&X2            * LOAD DATA X3 INTO STACK             7  6525  L 099 0!0           95   099     000+2
 1008                MCW   X2,X3              * COPY X2 INTO X3                     7  6532  M 094 099           96   094     099
 1009                B     LYAAAA             * JUMP TO FUNCTION ITOA               4  6539  B B9/               96  7291
 1010         * POP (X3:3)
 1011                LCA   0&X2,X3            * LOAD DATA IN STACK INTO MEMORY      7  6543  L 0!0 099           96   000+2   099
 1012                MA    LZDAAA,X2          * ADD -3 TO X2                        7  6550  # K3E 094           96 14235     094
 1013         * POP (5)
 1014                MA    LFEAAA,X2          * ADD -5 TO X2                        7  6557  # !6H 094           96 14068     094
 1015         * POP (3)
 1016                MA    LZDAAA,X2          * ADD -3 TO X2                        7  6564  # K3E 094           96 14235     094
 1017         * POP (5)
 1018                MA    LFEAAA,X2          * ADD -5 TO X2                        7  6571  # !6H 094           97 14068     094
 1019         * POP (3)
 1020                MA    LZDAAA,X2          * ADD -3 TO X2                        7  6578  # K3E 094           97 14235     094
 1021         * FUNCTION CALL PUTS(A)
 1022         * PUSH (5)
 1023                MA    LDEAAA,X2          * ADD 5 TO X2                         7  6585  # !5? 094           97 14050     094
 1024         * LOCAL ARRAY (A:CHAR [7])
 1025         * PUSH (LAFAAA:3)
 1026                MA    LWDAAA,X2          * ADD 3 TO X2                         7  6592  # K1B 094           97 14212     094
 1027                LCA   LAFAAA,0&X2        * LOAD DATA 012 INTO STACK            7  6599  L !1G 0!0           97 14017     000+2
 1028                MA    X3,0&X2                                                  7  6606  # 099 0!0           98   099     000+2
 1029         * PUSH (X3:3)
 1030                MA    LWDAAA,X2          * ADD 3 TO X2                         7  6613  # K1B 094           98 14212     094
 1031                LCA   X3,0&X2            * LOAD DATA X3 INTO STACK             7  6620  L 099 0!0           98   099     000+2
 1032                MCW   X2,X3              * COPY X2 INTO X3                     7  6627  M 094 099           98   094     099
 1033                B     LWBAAA             * JUMP TO FUNCTION PUTS               4  6634  B 52'               98  4520
 1034         * POP (X3:3)
 1035                LCA   0&X2,X3            * LOAD DATA IN STACK INTO MEMORY      7  6638  L 0!0 099           98   000+2   099
 1036                MA    LZDAAA,X2          * ADD -3 TO X2                        7  6645  # K3E 094           99 14235     094
 1037         * POP (3)
 1038                MA    LZDAAA,X2          * ADD -3 TO X2                        7  6652  # K3E 094           99 14235     094
 1039         * POP (5)
 1040                MA    LFEAAA,X2          * ADD -5 TO X2                        7  6659  # !6H 094           99 14068     094
 1041         * ASSIGNMENT (ARG = (ARG + 15995))
 1042         * ADDITION (ARG + 15995)
 1043         * LOCAL VARIABLE (ARG : 6+X3)
 1044         * PUSH (6+X3:3)
 1045                MA    LWDAAA,X2          * ADD 3 TO X2                         7  6666  # K1B 094           99 14212     094
 1046                LCA   6&X3,0&X2          * LOAD DATA 6&X3 INTO STACK           7  6673  L 0?6 0!0           99   006+3   000+2
 1047         * CONSTANT (15995 : LFEAAA)
1                                                                                                         PAGE   20
0 SEQ PG LIN  LABEL  OP    OPERANDS                                            SFX CT  LOCN  INSTRUCTION TYPE  CARD A-ADDR  B-ADDR

 1048         * PUSH (LFEAAA:3)
 1049                MA    LWDAAA,X2          * ADD 3 TO X2                         7  6680  # K1B 094          100 14212     094
 1050                LCA   LFEAAA,0&X2        * LOAD DATA I9E INTO STACK            7  6687  L !6H 0!0          100 14068     000+2
 1051                MA    0&X2,15997&X2      * ADD                                 7  6694  # 0!0 IRG          100   000+2 15997+2
 1052         * POP (3)
 1053                MA    LZDAAA,X2          * ADD -3 TO X2                        7  6701  # K3E 094          100 14235     094
 1054         * PUSH (LHEAAA:3)
 1055                MA    LWDAAA,X2          * ADD 3 TO X2                         7  6708  # K1B 094          100 14212     094
 1056                LCA   LHEAAA,0&X2        * LOAD DATA 006 INTO STACK            7  6715  L !9B 0!0          101 14092     000+2
 1057                MA    X3,0&X2                                                  7  6722  # 099 0!0          101   099     000+2
 1058         * POP (X1:3)
 1059                LCA   0&X2,X1            * LOAD DATA IN STACK INTO MEMORY      7  6729  L 0!0 089          101   000+2   089
 1060                MA    LZDAAA,X2          * ADD -3 TO X2                        7  6736  # K3E 094          101 14235     094
 1061         * POP (0+X1:3)
 1062                LCA   0&X2,0&X1          * LOAD DATA IN STACK INTO MEMORY      7  6743  L 0!0 0'0          101   000+2   000+1
 1063                MA    LZDAAA,X2          * ADD -3 TO X2                        7  6750  # K3E 094          102 14235     094
 1064         * END ASSIGNMENT (ARG = (ARG + 15995))
 1065         LXCAAA NOP                      * RETURN                              1  6757  N                  102
 1066                MA    LBFAAA,X2          * RESERVE 7 BYTES OF SPACE ON STA     7  6758  # !2H 094          102 14028     094
 1067                BCE   LTCAAA,RF,R        * JUMP BACK TO CALLER                 8  6765  B B4/ 340 R        102  7241     340
 1068         * ENDBLOCK [BLOCK LXCAAA:LTCAAA]
 1069         ***************************************
 1070         *
 1071                B     LDDAAA             * JUMP WHEN TRUE                      4  6773  B B3X              102  7237
 1072         LCDAAA NOP                      * EXECUTED WHEN FALSE                 1  6777  N                  102
 1073         * IF [IF ((C == 'P') THEN [BLOCK LYCAAA:LTCAAA] ELSE [BLOCK LZCAAA:LTCAAA]]
 1074         * EQUAL (==) (C == 'P')
 1075         * LOCAL VARIABLE (C : 7+X3)
 1076         * PUSH (7+X3:1)
 1077                MA    LAEAAA,X2          * ADD 1 TO X2                         7  6778  # !1D 094          102 14014     094
 1078                LCA   7&X3,0&X2          * LOAD DATA 7&X3 INTO STACK           7  6785  L 0?7 0!0          103   007+3   000+2
 1079         * CONSTANT ('P' : @P@)
 1080         * PUSH (@P@:1)
 1081                MA    LAEAAA,X2          * ADD 1 TO X2                         7  6792  # !1D 094          103 14014     094
 1082                LCA   @P@,0&X2           * LOAD DATA P INTO STACK              7  6799  L K4G 0!0          103 14247     000+2
 1083                C     0&X2,15999&X2      * COMPARE                             7  6806  C 0!0 IRI          103   000+2 15999+2
 1084         * POP (1)
 1085                MA    LBEAAA,X2          * ADD -1 TO X2                        7  6813  # !2E 094          103 14025     094
 1086         * POP (1)
 1087                MA    LBEAAA,X2          * ADD -1 TO X2                        7  6820  # !2E 094          104 14025     094
 1088         * PUSH (LEEAAA:5)
 1089                MA    LDEAAA,X2          * ADD 5 TO X2                         7  6827  # !5? 094          104 14050     094
 1090                LCA   LEEAAA,0&X2        * LOAD DATA 00000 INTO STACK          7  6834  L !6A 0!0          104 14061     000+2
 1091                BE    LCFAAA             * JUMP IF EQUAL                       5  6841  B Q5' S            104  6850
 1092                B     LDFAAA             * JUMP TO END                         4  6846  B Q5X              104  6857
 1093         LCFAAA MCW   LCEAAA,0&X2        * EQUAL                               7  6850  M !3I 0!0          104 14039     000+2
 1094         LDFAAA NOP                      * END OF EQUAL                        1  6857  N                  104
 1095                MCS   0&X2,0&X2          * CLEAR WM                            7  6858  Z 0!0 0!0          105   000+2   000+2
 1096         * POP (5)
 1097                MA    LFEAAA,X2          * ADD -5 TO X2                        7  6865  # !6H 094          105 14068     094
1                                                                                                         PAGE   21
0 SEQ PG LIN  LABEL  OP    OPERANDS                                            SFX CT  LOCN  INSTRUCTION TYPE  CARD A-ADDR  B-ADDR

 1098                BCE   LADAAA,5&X2,       * JUMP WHEN FALSE                     8  6872  B B1V 0!5          105  7215     005+2
 1099         *
 1100         ***************************************
 1101         * BEGINBLOCK [BLOCK LYCAAA:LTCAAA]
 1102         * ASSIGNMENT (ADDRP = ARG)
 1103         * LOCAL VARIABLE (ARG : 6+X3)
 1104         * PUSH (6+X3:3)
 1105                MA    LWDAAA,X2          * ADD 3 TO X2                         7  6880  # K1B 094          105 14212     094
 1106                LCA   6&X3,0&X2          * LOAD DATA 6&X3 INTO STACK           7  6887  L 0?6 0!0          105   006+3   000+2
 1107         * PUSH (LFFAAA:3)
 1108                MA    LWDAAA,X2          * ADD 3 TO X2                         7  6894  # K1B 094          106 14212     094
 1109                LCA   LFFAAA,0&X2        * LOAD DATA 010 INTO STACK            7  6901  L !7A 0!0          106 14071     000+2
 1110                MA    X3,0&X2                                                  7  6908  # 099 0!0          106   099     000+2
 1111         * POP (X1:3)
 1112                LCA   0&X2,X1            * LOAD DATA IN STACK INTO MEMORY      7  6915  L 0!0 089          106   000+2   089
 1113                MA    LZDAAA,X2          * ADD -3 TO X2                        7  6922  # K3E 094          106 14235     094
 1114         * POP (0+X1:3)
 1115                LCA   0&X2,0&X1          * LOAD DATA IN STACK INTO MEMORY      7  6929  L 0!0 0'0          107   000+2   000+1
 1116                MA    LZDAAA,X2          * ADD -3 TO X2                        7  6936  # K3E 094          107 14235     094
 1117         * END ASSIGNMENT (ADDRP = ARG)
 1118         * ASSIGNMENT (ADDRC = (*ADDRP))
 1119         * DEREFERENCEEXPRESSION (*ADDRP)
 1120         * LOCAL VARIABLE (ADDRP : 10+X3)
 1121         * PUSH (10+X3:3)
 1122                MA    LWDAAA,X2          * ADD 3 TO X2                         7  6943  # K1B 094          107 14212     094
 1123                LCA   10&X3,0&X2         * LOAD DATA 10&X3 INTO STACK          7  6950  L 0A0 0!0          107   010+3   000+2
 1124         * POP (X1:3)
 1125                LCA   0&X2,X1            * LOAD DATA IN STACK INTO MEMORY      7  6957  L 0!0 089          107   000+2   089
 1126                MA    LZDAAA,X2          * ADD -3 TO X2                        7  6964  # K3E 094          108 14235     094
 1127         * PUSH (0+X1:1)
 1128                MA    LAEAAA,X2          * ADD 1 TO X2                         7  6971  # !1D 094          108 14014     094
 1129                LCA   0&X1,0&X2          * LOAD DATA 0&X1 INTO STACK           7  6978  L 0'0 0!0          108   000+1   000+2
 1130         * END DEREFERENCEEXPRESSION (*ADDRP)
 1131         * PUSH (LGEAAA:3)
 1132                MA    LWDAAA,X2          * ADD 3 TO X2                         7  6985  # K1B 094          108 14212     094
 1133                LCA   LGEAAA,0&X2        * LOAD DATA 011 INTO STACK            7  6992  L !7G 0!0          108 14077     000+2
 1134                MA    X3,0&X2                                                  7  6999  # 099 0!0          109   099     000+2
 1135         * POP (X1:3)
 1136                LCA   0&X2,X1            * LOAD DATA IN STACK INTO MEMORY      7  7006  L 0!0 089          109   000+2   089
 1137                MA    LZDAAA,X2          * ADD -3 TO X2                        7  7013  # K3E 094          109 14235     094
 1138         * POP (0+X1:1)
 1139                LCA   0&X2,0&X1          * LOAD DATA IN STACK INTO MEMORY      7  7020  L 0!0 0'0          109   000+2   000+1
 1140                MA    LBEAAA,X2          * ADD -1 TO X2                        7  7027  # !2E 094          109 14025     094
 1141         * END ASSIGNMENT (ADDRC = (*ADDRP))
 1142         * FUNCTION CALL PUTCHAR(ADDRC)
 1143         * PUSH (5)
 1144                MA    LDEAAA,X2          * ADD 5 TO X2                         7  7034  # !5? 094          110 14050     094
 1145         * LOCAL VARIABLE (ADDRC : 11+X3)
 1146         * PUSH (11+X3:1)
 1147                MA    LAEAAA,X2          * ADD 1 TO X2                         7  7041  # !1D 094          110 14014     094
1                                                                                                         PAGE   22
0 SEQ PG LIN  LABEL  OP    OPERANDS                                            SFX CT  LOCN  INSTRUCTION TYPE  CARD A-ADDR  B-ADDR

 1148                LCA   11&X3,0&X2         * LOAD DATA 11&X3 INTO STACK          7  7048  L 0A1 0!0          110   011+3   000+2
 1149         * PUSH (X3:3)
 1150                MA    LWDAAA,X2          * ADD 3 TO X2                         7  7055  # K1B 094          110 14212     094
 1151                LCA   X3,0&X2            * LOAD DATA X3 INTO STACK             7  7062  L 099 0!0          110   099     000+2
 1152                MCW   X2,X3              * COPY X2 INTO X3                     7  7069  M 094 099          111   094     099
 1153                B     LLBAAA             * JUMP TO FUNCTION PUTCHAR            4  7076  B 77Q              111  8778
 1154         * POP (X3:3)
 1155                LCA   0&X2,X3            * LOAD DATA IN STACK INTO MEMORY      7  7080  L 0!0 099          111   000+2   099
 1156                MA    LZDAAA,X2          * ADD -3 TO X2                        7  7087  # K3E 094          111 14235     094
 1157         * POP (1)
 1158                MA    LBEAAA,X2          * ADD -1 TO X2                        7  7094  # !2E 094          111 14025     094
 1159         * POP (5)
 1160                MA    LFEAAA,X2          * ADD -5 TO X2                        7  7101  # !6H 094          111 14068     094
 1161         * START ASM BLOCK
 1162                W                                                              1  7108  2                  112
 1163         * END ASM BLOCK
 1164         * START ASM BLOCK
 1165                W                                                              1  7109  2                  112
 1166         * END ASM BLOCK
 1167         * START ASM BLOCK
 1168                W                                                              1  7110  2                  112
 1169         * END ASM BLOCK
 1170         * ASSIGNMENT (ARG = (ARG + 15999))
 1171         * ADDITION (ARG + 15999)
 1172         * LOCAL VARIABLE (ARG : 6+X3)
 1173         * PUSH (6+X3:3)
 1174                MA    LWDAAA,X2          * ADD 3 TO X2                         7  7111  # K1B 094          112 14212     094
 1175                LCA   6&X3,0&X2          * LOAD DATA 6&X3 INTO STACK           7  7118  L 0?6 0!0          112   006+3   000+2
 1176         * CONSTANT (15999 : LBEAAA)
 1177         * PUSH (LBEAAA:3)
 1178                MA    LWDAAA,X2          * ADD 3 TO X2                         7  7125  # K1B 094          112 14212     094
 1179                LCA   LBEAAA,0&X2        * LOAD DATA I9I INTO STACK            7  7132  L !2E 0!0          112 14025     000+2
 1180                MA    0&X2,15997&X2      * ADD                                 7  7139  # 0!0 IRG          113   000+2 15997+2
 1181         * POP (3)
 1182                MA    LZDAAA,X2          * ADD -3 TO X2                        7  7146  # K3E 094          113 14235     094
 1183         * PUSH (LHEAAA:3)
 1184                MA    LWDAAA,X2          * ADD 3 TO X2                         7  7153  # K1B 094          113 14212     094
 1185                LCA   LHEAAA,0&X2        * LOAD DATA 006 INTO STACK            7  7160  L !9B 0!0          113 14092     000+2
 1186                MA    X3,0&X2                                                  7  7167  # 099 0!0          113   099     000+2
 1187         * POP (X1:3)
 1188                LCA   0&X2,X1            * LOAD DATA IN STACK INTO MEMORY      7  7174  L 0!0 089          114   000+2   089
 1189                MA    LZDAAA,X2          * ADD -3 TO X2                        7  7181  # K3E 094          114 14235     094
 1190         * POP (0+X1:3)
 1191                LCA   0&X2,0&X1          * LOAD DATA IN STACK INTO MEMORY      7  7188  L 0!0 0'0          114   000+2   000+1
 1192                MA    LZDAAA,X2          * ADD -3 TO X2                        7  7195  # K3E 094          114 14235     094
 1193         * END ASSIGNMENT (ARG = (ARG + 15999))
 1194         LYCAAA NOP                      * RETURN                              1  7202  N                  114
 1195                BCE   LTCAAA,RF,R        * JUMP BACK TO CALLER                 8  7203  B B4/ 340 R        114  7241     340
 1196         * ENDBLOCK [BLOCK LYCAAA:LTCAAA]
 1197         ***************************************
1                                                                                                         PAGE   23
0 SEQ PG LIN  LABEL  OP    OPERANDS                                            SFX CT  LOCN  INSTRUCTION TYPE  CARD A-ADDR  B-ADDR

 1198         *
 1199                B     LBDAAA             * JUMP WHEN TRUE                      4  7211  B B3W              115  7236
 1200         LADAAA NOP                      * EXECUTED WHEN FALSE                 1  7215  N                  115
 1201         *
 1202         ***************************************
 1203         * BEGINBLOCK [BLOCK LZCAAA:LTCAAA]
 1204         * SET THE RETURN FLAG, SO WE KNOW DO DEALLOCATE OUR STACK
 1205                MCW   @R@,RF             * PUT R INTO LOCATION RF              7  7216  M K4H 340          115 14248     340
 1206                B     LZCAAA             * JUMP BACK TO CALLER                 4  7223  B B2X              115  7227
 1207         LZCAAA NOP                      * RETURN                              1  7227  N                  115
 1208                BCE   LTCAAA,RF,R        * JUMP BACK TO CALLER                 8  7228  B B4/ 340 R        115  7241     340
 1209         * ENDBLOCK [BLOCK LZCAAA:LTCAAA]
 1210         ***************************************
 1211         *
 1212         LBDAAA NOP                      * EXECUTED WHEN TRUE                  1  7236  N                  115
 1213         LDDAAA NOP                      * EXECUTED WHEN TRUE                  1  7237  N                  116
 1214         LFDAAA NOP                      * EXECUTED WHEN TRUE                  1  7238  N                  116
 1215         LHDAAA NOP                      * EXECUTED WHEN TRUE                  1  7239  N                  116
 1216         LJDAAA NOP                      * EXECUTED WHEN TRUE                  1  7240  N                  116
 1217         LTCAAA NOP                      * RETURN                              1  7241  N                  116
 1218                BCE   LRCAAA,RF,R        * JUMP BACK TO CALLER                 8  7242  B B5/ 340 R        116  7251     340
 1219         * ENDBLOCK [BLOCK LTCAAA:LRCAAA]
 1220         ***************************************
 1221         *
 1222         LLDAAA NOP                      * EXECUTED WHEN TRUE                  1  7250  N                  116
 1223         LRCAAA NOP                      * RETURN                              1  7251  N                  117
 1224                BCE   LQCAAA,RF,R        * JUMP BACK TO CALLER                 8  7252  B B6V 340 R        117  7265     340
 1225         * ENDBLOCK [BLOCK LRCAAA:LQCAAA]
 1226         ***************************************
 1227         *
 1228                B     LMDAAA             * JUMP TO TOP                         4  7260  B 97Z              117  4979
 1229         LNDAAA NOP                      * BOTTOM OF THE WHILE LOOP            1  7264  N                  117
 1230         *
 1231         LQCAAA NOP                      * RETURN                              1  7265  N                  117
 1232                MA    LGFAAA,X2          * RESERVE 11 BYTES OF SPACE ON ST     7  7266  # !8? 094          117 14080     094
 1233                MCW   @ @,RF             * CLEAR THE RETURN FLAG               7  7273  M K4B 340          117 14242     340
 1234         * ENDBLOCK [BLOCK LQCAAA:NULL]
 1235         ***************************************
 1236         *
 1237                LCA   3&X3,X1            * LOAD RETURN ADDRESS TO X1           7  7280  L 0?3 089          118   003+3   089
 1238                B     0&X1               * JUMP BACK TO CALLER                 4  7287  B 0'0              118   000+1
 1239         *
 1240         ***************************************************************************
 1241         * END FUNCTION : PRINTF
 1242         ***************************************************************************
 1243         *
 1244         ***************************************************************************
 1245         * FUNCTION : ITOA
 1246         ***************************************************************************
 1247         LYAAAA SBR   3&X3               * SAVE RETURN ADDRESS IN REGISTER     4  7291  H 0?3              118   003+3
1                                                                                                         PAGE   24
0 SEQ PG LIN  LABEL  OP    OPERANDS                                            SFX CT  LOCN  INSTRUCTION TYPE  CARD A-ADDR  B-ADDR

 1248                SW    1&X3               * SET THE WM                          4  7295  , 0?1              118   001+3
 1249                CW    2&X3               * CLEAN WM                            4  7299  ) 0?2              118   002+3
 1250                CW    3&X3               * CLEAN WM                            4  7303  ) 0?3              118   003+3
 1251         *
 1252         ***************************************
 1253         * BEGINBLOCK [BLOCK LZAAAA:NULL]
 1254                LCA   LHFAAA,9&X3        * LOAD *CHAR 4005 INTO MEMORY 9&X     7  7307  L !9E 0?9          118 14095     009+3
 1255                LCA   LCEAAA,14&X3       * LOAD INT 1 INTO MEMORY 14&X3        7  7314  L !3I 0A4          119 14039     014+3
 1256                MA    LIFAAA,X2          * RESERVE 14 BYTES OF SPACE ON ST     7  7321  # J0I 094          119 14109     094
 1257         * ASSIGNMENT (START = STR)
 1258         * PARAMETER VARIABLE (STR : 15992+X3)
 1259         * PUSH (15992+X3:3)
 1260                MA    LWDAAA,X2          * ADD 3 TO X2                         7  7328  # K1B 094          119 14212     094
 1261                LCA   15992&X3,0&X2      * LOAD DATA 15992&X3 INTO STACK       7  7335  L IIB 0!0          119 15992+3   000+2
 1262         * PUSH (LHEAAA:3)
 1263                MA    LWDAAA,X2          * ADD 3 TO X2                         7  7342  # K1B 094          119 14212     094
 1264                LCA   LHEAAA,0&X2        * LOAD DATA 006 INTO STACK            7  7349  L !9B 0!0          120 14092     000+2
 1265                MA    X3,0&X2                                                  7  7356  # 099 0!0          120   099     000+2
 1266         * POP (X1:3)
 1267                LCA   0&X2,X1            * LOAD DATA IN STACK INTO MEMORY      7  7363  L 0!0 089          120   000+2   089
 1268                MA    LZDAAA,X2          * ADD -3 TO X2                        7  7370  # K3E 094          120 14235     094
 1269         * POP (0+X1:3)
 1270                LCA   0&X2,0&X1          * LOAD DATA IN STACK INTO MEMORY      7  7377  L 0!0 0'0          120   000+2   000+1
 1271                MA    LZDAAA,X2          * ADD -3 TO X2                        7  7384  # K3E 094          121 14235     094
 1272         * END ASSIGNMENT (START = STR)
 1273         * IF [IF ((VALUE < 0) THEN [BLOCK LABAAA:LZAAAA] ELSE [IF ((VALUE == 0) THE
 1274         * LESS (<) (VALUE < 0)
 1275         * PARAMETER VARIABLE (VALUE : 15997+X3)
 1276         * PUSH (15997+X3:5)
 1277                MA    LDEAAA,X2          * ADD 5 TO X2                         7  7391  # !5? 094          121 14050     094
 1278                LCA   15997&X3,0&X2      * LOAD DATA 15997&X3 INTO STACK       7  7398  L IIG 0!0          121 15997+3   000+2
 1279                B     LJFAAA             * JUMP TO SNIPPET CLEAN_NUMBER        4  7405  B U2E              121 13425
 1280         * CONSTANT (0 : LEEAAA)
 1281         * PUSH (LEEAAA:5)
 1282                MA    LDEAAA,X2          * ADD 5 TO X2                         7  7409  # !5? 094          121 14050     094
 1283                LCA   LEEAAA,0&X2        * LOAD DATA 00000 INTO STACK          7  7416  L !6A 0!0          121 14061     000+2
 1284                B     LJFAAA             * JUMP TO SNIPPET CLEAN_NUMBER        4  7423  B U2E              122 13425
 1285                C     0&X2,15995&X2      * COMPARE                             7  7427  C 0!0 IRE          122   000+2 15995+2
 1286         * POP (5)
 1287                MA    LFEAAA,X2          * ADD -5 TO X2                        7  7434  # !6H 094          122 14068     094
 1288                MCW   LEEAAA,0&X2        * SET STACK LOCATION TO 0             7  7441  M !6A 0!0          122 14061     000+2
 1289                BL    LLFAAA             * JUMP IF LESS                        5  7448  B D5X T            122  7457
 1290                B     LMFAAA             * JUMP TO END                         4  7453  B D6U              122  7464
 1291         LLFAAA MCW   LCEAAA,0&X2        * LESS: SET STACK LOCATION TO 1       7  7457  M !3I 0!0          123 14039     000+2
 1292         LMFAAA NOP                      * END OF LESS                         1  7464  N                  123
 1293                MCS   0&X2,0&X2          * CLEAR WM                            7  7465  Z 0!0 0!0          123   000+2   000+2
 1294         * POP (5)
 1295                MA    LFEAAA,X2          * ADD -5 TO X2                        7  7472  # !6H 094          123 14068     094
 1296                BCE   LDBAAA,5&X2,       * JUMP WHEN FALSE                     8  7479  B F6Z 0!5          123  7669     005+2
 1297         *
1                                                                                                         PAGE   25
0 SEQ PG LIN  LABEL  OP    OPERANDS                                            SFX CT  LOCN  INSTRUCTION TYPE  CARD A-ADDR  B-ADDR

 1298         ***************************************
 1299         * BEGINBLOCK [BLOCK LABAAA:LZAAAA]
 1300         * ASSIGNMENT ((*(STR++)) = '-')
 1301         * CONSTANT ('-' : @-@)
 1302         * PUSH (@-@:1)
 1303                MA    LAEAAA,X2          * ADD 1 TO X2                         7  7487  # !1D 094          123 14014     094
 1304                LCA   @-@,0&X2           * LOAD DATA - INTO STACK              7  7494  L K4I 0!0          124 14249     000+2
 1305         * POSTINCREMENT (STR++)
 1306         * PUSH (LOFAAA:3)
 1307                MA    LWDAAA,X2          * ADD 3 TO X2                         7  7501  # K1B 094          124 14212     094
 1308                LCA   LOFAAA,0&X2        * LOAD DATA I9B INTO STACK            7  7508  L J6B 0!0          124 14162     000+2
 1309                MA    X3,0&X2                                                  7  7515  # 099 0!0          124   099     000+2
 1310         * POP (X1:3)
 1311                LCA   0&X2,X1            * LOAD DATA IN STACK INTO MEMORY      7  7522  L 0!0 089          124   000+2   089
 1312                MA    LZDAAA,X2          * ADD -3 TO X2                        7  7529  # K3E 094          125 14235     094
 1313         * PUSH (0+X1:3)
 1314                MA    LWDAAA,X2          * ADD 3 TO X2                         7  7536  # K1B 094          125 14212     094
 1315                LCA   0&X1,0&X2          * LOAD DATA 0&X1 INTO STACK           7  7543  L 0'0 0!0          125   000+1   000+2
 1316                MA    LAEAAA,0&X1        * POSTINCREMENT POINTER POINTED B     7  7550  # !1D 0'0          125 14014     000+1
 1317         * POP (X1:3)
 1318                LCA   0&X2,X1            * LOAD DATA IN STACK INTO MEMORY      7  7557  L 0!0 089          125   000+2   089
 1319                MA    LZDAAA,X2          * ADD -3 TO X2                        7  7564  # K3E 094          126 14235     094
 1320         * POP (0+X1:1)
 1321                LCA   0&X2,0&X1          * LOAD DATA IN STACK INTO MEMORY      7  7571  L 0!0 0'0          126   000+2   000+1
 1322                MA    LBEAAA,X2          * ADD -1 TO X2                        7  7578  # !2E 094          126 14025     094
 1323         * END ASSIGNMENT ((*(STR++)) = '-')
 1324         * ASSIGNMENT (VALUE = (-VALUE))
 1325         * NEGATE (-VALUE)
 1326         * PARAMETER VARIABLE (VALUE : 15997+X3)
 1327         * PUSH (15997+X3:5)
 1328                MA    LDEAAA,X2          * ADD 5 TO X2                         7  7585  # !5? 094          126 14050     094
 1329                LCA   15997&X3,0&X2      * LOAD DATA 15997&X3 INTO STACK       7  7592  L IIG 0!0          126 15997+3   000+2
 1330                ZS    0&X2                                                     4  7599  ! 0!0              126   000+2
 1331                B     LJFAAA             * JUMP TO SNIPPET CLEAN_NUMBER        4  7603  B U2E              127 13425
 1332         * PUSH (LZDAAA:3)
 1333                MA    LWDAAA,X2          * ADD 3 TO X2                         7  7607  # K1B 094          127 14212     094
 1334                LCA   LZDAAA,0&X2        * LOAD DATA I9G INTO STACK            7  7614  L K3E 0!0          127 14235     000+2
 1335                MA    X3,0&X2                                                  7  7621  # 099 0!0          127   099     000+2
 1336         * POP (X1:3)
 1337                LCA   0&X2,X1            * LOAD DATA IN STACK INTO MEMORY      7  7628  L 0!0 089          127   000+2   089
 1338                MA    LZDAAA,X2          * ADD -3 TO X2                        7  7635  # K3E 094          127 14235     094
 1339         * POP (0+X1:5)
 1340                LCA   0&X2,0&X1          * LOAD DATA IN STACK INTO MEMORY      7  7642  L 0!0 0'0          128   000+2   000+1
 1341                MA    LFEAAA,X2          * ADD -5 TO X2                        7  7649  # !6H 094          128 14068     094
 1342         * END ASSIGNMENT (VALUE = (-VALUE))
 1343         LABAAA NOP                      * RETURN                              1  7656  N                  128
 1344                BCE   LZAAAA,RF,R        * JUMP BACK TO CALLER                 8  7657  B 75K 340 R        128  8752     340
 1345         * ENDBLOCK [BLOCK LABAAA:LZAAAA]
 1346         ***************************************
 1347         *
1                                                                                                         PAGE   26
0 SEQ PG LIN  LABEL  OP    OPERANDS                                            SFX CT  LOCN  INSTRUCTION TYPE  CARD A-ADDR  B-ADDR

 1348                B     LEBAAA             * JUMP WHEN TRUE                      4  7665  B I4Y              128  7948
 1349         LDBAAA NOP                      * EXECUTED WHEN FALSE                 1  7669  N                  128
 1350         * IF [IF ((VALUE == 0) THEN [BLOCK LBBAAA:LZAAAA]]
 1351         * EQUAL (==) (VALUE == 0)
 1352         * PARAMETER VARIABLE (VALUE : 15997+X3)
 1353         * PUSH (15997+X3:5)
 1354                MA    LDEAAA,X2          * ADD 5 TO X2                         7  7670  # !5? 094          128 14050     094
 1355                LCA   15997&X3,0&X2      * LOAD DATA 15997&X3 INTO STACK       7  7677  L IIG 0!0          129 15997+3   000+2
 1356                B     LJFAAA             * JUMP TO SNIPPET CLEAN_NUMBER        4  7684  B U2E              129 13425
 1357         * CONSTANT (0 : LEEAAA)
 1358         * PUSH (LEEAAA:5)
 1359                MA    LDEAAA,X2          * ADD 5 TO X2                         7  7688  # !5? 094          129 14050     094
 1360                LCA   LEEAAA,0&X2        * LOAD DATA 00000 INTO STACK          7  7695  L !6A 0!0          129 14061     000+2
 1361                B     LJFAAA             * JUMP TO SNIPPET CLEAN_NUMBER        4  7702  B U2E              129 13425
 1362                C     0&X2,15995&X2      * COMPARE                             7  7706  C 0!0 IRE          129   000+2 15995+2
 1363         * POP (5)
 1364                MA    LFEAAA,X2          * ADD -5 TO X2                        7  7713  # !6H 094          130 14068     094
 1365         * POP (5)
 1366                MA    LFEAAA,X2          * ADD -5 TO X2                        7  7720  # !6H 094          130 14068     094
 1367         * PUSH (LEEAAA:5)
 1368                MA    LDEAAA,X2          * ADD 5 TO X2                         7  7727  # !5? 094          130 14050     094
 1369                LCA   LEEAAA,0&X2        * LOAD DATA 00000 INTO STACK          7  7734  L !6A 0!0          130 14061     000+2
 1370                BE    LPFAAA             * JUMP IF EQUAL                       5  7741  B G5' S            130  7750
 1371                B     LQFAAA             * JUMP TO END                         4  7746  B G5X              130  7757
 1372         LPFAAA MCW   LCEAAA,0&X2        * EQUAL                               7  7750  M !3I 0!0          131 14039     000+2
 1373         LQFAAA NOP                      * END OF EQUAL                        1  7757  N                  131
 1374                MCS   0&X2,0&X2          * CLEAR WM                            7  7758  Z 0!0 0!0          131   000+2   000+2
 1375         * POP (5)
 1376                MA    LFEAAA,X2          * ADD -5 TO X2                        7  7765  # !6H 094          131 14068     094
 1377                BCE   LCBAAA,5&X2,       * JUMP WHEN FALSE                     8  7772  B I4X 0!5          131  7947     005+2
 1378         *
 1379         ***************************************
 1380         * BEGINBLOCK [BLOCK LBBAAA:LZAAAA]
 1381         * ASSIGNMENT ((STR[0]) = '0')
 1382         * CONSTANT ('0' : @0@)
 1383         * PUSH (@0@:1)
 1384                MA    LAEAAA,X2          * ADD 1 TO X2                         7  7780  # !1D 094          131 14014     094
 1385                LCA   @0@,0&X2           * LOAD DATA 0 INTO STACK              7  7787  L K5? 0!0          132 14250     000+2
 1386         * SUBSCRIPT (STR[0])
 1387         * PARAMETER VARIABLE (STR : 15992+X3)
 1388         * PUSH (15992+X3:3)
 1389                MA    LWDAAA,X2          * ADD 3 TO X2                         7  7794  # K1B 094          132 14212     094
 1390                LCA   15992&X3,0&X2      * LOAD DATA 15992&X3 INTO STACK       7  7801  L IIB 0!0          132 15992+3   000+2
 1391         * END SUBSCRIPT (STR[0])
 1392         * POP (X1:3)
 1393                LCA   0&X2,X1            * LOAD DATA IN STACK INTO MEMORY      7  7808  L 0!0 089          132   000+2   089
 1394                MA    LZDAAA,X2          * ADD -3 TO X2                        7  7815  # K3E 094          132 14235     094
 1395         * POP (0+X1:1)
 1396                LCA   0&X2,0&X1          * LOAD DATA IN STACK INTO MEMORY      7  7822  L 0!0 0'0          133   000+2   000+1
 1397                MA    LBEAAA,X2          * ADD -1 TO X2                        7  7829  # !2E 094          133 14025     094
1                                                                                                         PAGE   27
0 SEQ PG LIN  LABEL  OP    OPERANDS                                            SFX CT  LOCN  INSTRUCTION TYPE  CARD A-ADDR  B-ADDR

 1398         * END ASSIGNMENT ((STR[0]) = '0')
 1399         * ASSIGNMENT ((STR[1]) = '\0')
 1400         * CONSTANT ('\0' : EOS)
 1401         * PUSH (EOS:1)
 1402                MA    LAEAAA,X2          * ADD 1 TO X2                         7  7836  # !1D 094          133 14014     094
 1403                LCA   EOS,0&X2           * LOAD DATA EOS INTO STACK            7  7843  L 345 0!0          133   345     000+2
 1404         * SUBSCRIPT (STR[1])
 1405         * PARAMETER VARIABLE (STR : 15992+X3)
 1406         * PUSH (15992+X3:3)
 1407                MA    LWDAAA,X2          * ADD 3 TO X2                         7  7850  # K1B 094          133 14212     094
 1408                LCA   15992&X3,0&X2      * LOAD DATA 15992&X3 INTO STACK       7  7857  L IIB 0!0          134 15992+3   000+2
 1409                A     LCEAAA,0&X2        * ADD OFFSET 1 TO POINT ELEMENT 1     7  7864  A !3I 0!0          134 14039     000+2
 1410         * END SUBSCRIPT (STR[1])
 1411         * POP (X1:3)
 1412                LCA   0&X2,X1            * LOAD DATA IN STACK INTO MEMORY      7  7871  L 0!0 089          134   000+2   089
 1413                MA    LZDAAA,X2          * ADD -3 TO X2                        7  7878  # K3E 094          134 14235     094
 1414         * POP (0+X1:1)
 1415                LCA   0&X2,0&X1          * LOAD DATA IN STACK INTO MEMORY      7  7885  L 0!0 0'0          134   000+2   000+1
 1416                MA    LBEAAA,X2          * ADD -1 TO X2                        7  7892  # !2E 094          135 14025     094
 1417         * END ASSIGNMENT ((STR[1]) = '\0')
 1418         * LOCAL VARIABLE (START : 6+X3)
 1419         * PUSH (6+X3:3)
 1420                MA    LWDAAA,X2          * ADD 3 TO X2                         7  7899  # K1B 094          135 14212     094
 1421                LCA   6&X3,0&X2          * LOAD DATA 6&X3 INTO STACK           7  7906  L 0?6 0!0          135   006+3   000+2
 1422         * POP (15984+X3:3)
 1423                LCA   0&X2,15984&X3      * LOAD DATA IN STACK INTO MEMORY      7  7913  L 0!0 IHD          135   000+2 15984+3
 1424                MA    LZDAAA,X2          * ADD -3 TO X2                        7  7920  # K3E 094          135 14235     094
 1425         * SET THE RETURN FLAG, SO WE KNOW DO DEALLOCATE OUR STACK
 1426                MCW   @R@,RF             * PUT R INTO LOCATION RF              7  7927  M K4H 340          136 14248     340
 1427                B     LBBAAA             * JUMP BACK TO CALLER                 4  7934  B I3Y              136  7938
 1428         LBBAAA NOP                      * RETURN                              1  7938  N                  136
 1429                BCE   LZAAAA,RF,R        * JUMP BACK TO CALLER                 8  7939  B 75K 340 R        136  8752     340
 1430         * ENDBLOCK [BLOCK LBBAAA:LZAAAA]
 1431         ***************************************
 1432         *
 1433         LCBAAA NOP                      * EXECUTED WHEN FALSE                 1  7947  N                  136
 1434         LEBAAA NOP                      * EXECUTED WHEN TRUE                  1  7948  N                  136
 1435         * WHILE [WHILE ((EXP <= (VALUE / BASE))) [BLOCK LFBAAA:LZAAAA] TOP:LGBAAA B
 1436         LGBAAA NOP                      * TOP OF THE LOOP                     1  7949  N                  136
 1437         * LESSOREQUAL (<=) (EXP <= (VALUE / BASE))
 1438         * LOCAL VARIABLE (EXP : 14+X3)
 1439         * PUSH (14+X3:5)
 1440                MA    LDEAAA,X2          * ADD 5 TO X2                         7  7950  # !5? 094          137 14050     094
 1441                LCA   14&X3,0&X2         * LOAD DATA 14&X3 INTO STACK          7  7957  L 0A4 0!0          137   014+3   000+2
 1442                B     LJFAAA             * JUMP TO SNIPPET CLEAN_NUMBER        4  7964  B U2E              137 13425
 1443         * DIVIDE (VALUE / BASE)
 1444         * PARAMETER VARIABLE (BASE : 15989+X3)
 1445         * PUSH (15989+X3:5)
 1446                MA    LDEAAA,X2          * ADD 5 TO X2                         7  7968  # !5? 094          137 14050     094
 1447                LCA   15989&X3,0&X2      * LOAD DATA 15989&X3 INTO STACK       7  7975  L IHI 0!0          137 15989+3   000+2
1                                                                                                         PAGE   28
0 SEQ PG LIN  LABEL  OP    OPERANDS                                            SFX CT  LOCN  INSTRUCTION TYPE  CARD A-ADDR  B-ADDR

 1448         * PARAMETER VARIABLE (VALUE : 15997+X3)
 1449         * PUSH (15997+X3:5)
 1450                MA    LDEAAA,X2          * ADD 5 TO X2                         7  7982  # !5? 094          137 14050     094
 1451                LCA   15997&X3,0&X2      * LOAD DATA 15997&X3 INTO STACK       7  7989  L IIG 0!0          138 15997+3   000+2
 1452                B     LSFAAA             * JUMP TO SNIPPET SNIP_DIV            4  7996  B U5F              138 13456
 1453                MCW   0&X2,15995&X2      * COPY STACK LOCATION TO STACK LO     7  8000  M 0!0 IRE          138   000+2 15995+2
 1454         * POP (5)
 1455                MA    LFEAAA,X2          * ADD -5 TO X2                        7  8007  # !6H 094          138 14068     094
 1456                B     LJFAAA             * JUMP TO SNIPPET CLEAN_NUMBER        4  8014  B U2E              138 13425
 1457                C     0&X2,15995&X2      * COMPARE                             7  8018  C 0!0 IRE          138   000+2 15995+2
 1458         * POP (5)
 1459                MA    LFEAAA,X2          * ADD -5 TO X2                        7  8025  # !6H 094          139 14068     094
 1460                MCW   LCEAAA,0&X2        * SET STACK LOCATION TO 1             7  8032  M !3I 0!0          139 14039     000+2
 1461                BH    LYFAAA             * JUMP IF LESS OR EQUAL               5  8039  B 04Q U            139  8048
 1462                B     LZFAAA             * JUMP TO END                         4  8044  B 05N              139  8055
 1463         LYFAAA MCW   LEEAAA,0&X2        * LESS OR EQUAL: SET STACK LOCATI     7  8048  M !6A 0!0          139 14061     000+2
 1464         LZFAAA NOP                      * END OF LESSOREQUAL                  1  8055  N                  139
 1465                MCS   0&X2,0&X2          * CLEAR WM                            7  8056  Z 0!0 0!0          139   000+2   000+2
 1466         * POP (5)
 1467                MA    LFEAAA,X2          * ADD -5 TO X2                        7  8063  # !6H 094          140 14068     094
 1468                BCE   LHBAAA,5&X2,       * JUMP TO BOTTOM                      8  8070  B 19L 0!5          140  8193     005+2
 1469         *
 1470         ***************************************
 1471         * BEGINBLOCK [BLOCK LFBAAA:LZAAAA]
 1472         * ASSIGNMENT (EXP = (EXP * BASE))
 1473         * MULTIPLY (EXP * BASE)
 1474         * LOCAL VARIABLE (EXP : 14+X3)
 1475         * PUSH (14+X3:5)
 1476                MA    LDEAAA,X2          * ADD 5 TO X2                         7  8078  # !5? 094          140 14050     094
 1477                LCA   14&X3,0&X2         * LOAD DATA 14&X3 INTO STACK          7  8085  L 0A4 0!0          140   014+3   000+2
 1478         * PARAMETER VARIABLE (BASE : 15989+X3)
 1479         * PUSH (15989+X3:5)
 1480                MA    LDEAAA,X2          * ADD 5 TO X2                         7  8092  # !5? 094          140 14050     094
 1481                LCA   15989&X3,0&X2      * LOAD DATA 15989&X3 INTO STACK       7  8099  L IHI 0!0          141 15989+3   000+2
 1482                M     15995&X2,6&X2      * MULTIPLY                            7  8106  @ IRE 0!6          141 15995+2   006+2
 1483                SW    2&X2                                                     4  8113  , 0!2              141   002+2
 1484                LCA   6&X2,15995&X2                                            7  8117  L 0!6 IRE          141   006+2 15995+2
 1485         * POP (5)
 1486                MA    LFEAAA,X2          * ADD -5 TO X2                        7  8124  # !6H 094          141 14068     094
 1487         * PUSH (LIFAAA:3)
 1488                MA    LWDAAA,X2          * ADD 3 TO X2                         7  8131  # K1B 094          141 14212     094
 1489                LCA   LIFAAA,0&X2        * LOAD DATA 014 INTO STACK            7  8138  L J0I 0!0          142 14109     000+2
 1490                MA    X3,0&X2                                                  7  8145  # 099 0!0          142   099     000+2
 1491         * POP (X1:3)
 1492                LCA   0&X2,X1            * LOAD DATA IN STACK INTO MEMORY      7  8152  L 0!0 089          142   000+2   089
 1493                MA    LZDAAA,X2          * ADD -3 TO X2                        7  8159  # K3E 094          142 14235     094
 1494         * POP (0+X1:5)
 1495                LCA   0&X2,0&X1          * LOAD DATA IN STACK INTO MEMORY      7  8166  L 0!0 0'0          142   000+2   000+1
 1496                MA    LFEAAA,X2          * ADD -5 TO X2                        7  8173  # !6H 094          143 14068     094
 1497         * END ASSIGNMENT (EXP = (EXP * BASE))
1                                                                                                         PAGE   29
0 SEQ PG LIN  LABEL  OP    OPERANDS                                            SFX CT  LOCN  INSTRUCTION TYPE  CARD A-ADDR  B-ADDR

 1498         LFBAAA NOP                      * RETURN                              1  8180  N                  143
 1499                BCE   LZAAAA,RF,R        * JUMP BACK TO CALLER                 8  8181  B 75K 340 R        143  8752     340
 1500         * ENDBLOCK [BLOCK LFBAAA:LZAAAA]
 1501         ***************************************
 1502         *
 1503                B     LGBAAA             * JUMP TO TOP                         4  8189  B I4Z              143  7949
 1504         LHBAAA NOP                      * BOTTOM OF THE WHILE LOOP            1  8193  N                  143
 1505         *
 1506         * WHILE [WHILE (EXP) [BLOCK LIBAAA:LZAAAA] TOP:LJBAAA BOTTOM:LKBAAA]
 1507         LJBAAA NOP                      * TOP OF THE LOOP                     1  8194  N                  143
 1508         * LOCAL VARIABLE (EXP : 14+X3)
 1509         * PUSH (14+X3:5)
 1510                MA    LDEAAA,X2          * ADD 5 TO X2                         7  8195  # !5? 094          143 14050     094
 1511                LCA   14&X3,0&X2         * LOAD DATA 14&X3 INTO STACK          7  8202  L 0A4 0!0          144   014+3   000+2
 1512                MCS   0&X2,0&X2          * CLEAR WM                            7  8209  Z 0!0 0!0          144   000+2   000+2
 1513         * POP (5)
 1514                MA    LFEAAA,X2          * ADD -5 TO X2                        7  8216  # !6H 094          144 14068     094
 1515                BCE   LKBAAA,5&X2,       * JUMP TO BOTTOM                      8  8223  B 65O 0!5          144  8656     005+2
 1516         *
 1517         ***************************************
 1518         * BEGINBLOCK [BLOCK LIBAAA:LZAAAA]
 1519         * ASSIGNMENT ((*(STR++)) = (DIGITS[(VALUE / EXP)]))
 1520         * SUBSCRIPT (DIGITS[(VALUE / EXP)])
 1521         * LOCAL VARIABLE (DIGITS : 9+X3)
 1522         * PUSH (9+X3:3)
 1523                MA    LWDAAA,X2          * ADD 3 TO X2                         7  8231  # K1B 094          144 14212     094
 1524                LCA   9&X3,0&X2          * LOAD DATA 9&X3 INTO STACK           7  8238  L 0?9 0!0          145   009+3   000+2
 1525         * DIVIDE (VALUE / EXP)
 1526         * LOCAL VARIABLE (EXP : 14+X3)
 1527         * PUSH (14+X3:5)
 1528                MA    LDEAAA,X2          * ADD 5 TO X2                         7  8245  # !5? 094          145 14050     094
 1529                LCA   14&X3,0&X2         * LOAD DATA 14&X3 INTO STACK          7  8252  L 0A4 0!0          145   014+3   000+2
 1530         * PARAMETER VARIABLE (VALUE : 15997+X3)
 1531         * PUSH (15997+X3:5)
 1532                MA    LDEAAA,X2          * ADD 5 TO X2                         7  8259  # !5? 094          145 14050     094
 1533                LCA   15997&X3,0&X2      * LOAD DATA 15997&X3 INTO STACK       7  8266  L IIG 0!0          145 15997+3   000+2
 1534                B     LSFAAA             * JUMP TO SNIPPET SNIP_DIV            4  8273  B U5F              145 13456
 1535                MCW   0&X2,15995&X2      * COPY STACK LOCATION TO STACK LO     7  8277  M 0!0 IRE          146   000+2 15995+2
 1536         * POP (5)
 1537                MA    LFEAAA,X2          * ADD -5 TO X2                        7  8284  # !6H 094          146 14068     094
 1538         * PUT RAW INDEX ON THE STACK
 1539         * PUSH (LCEAAA:5)
 1540                MA    LDEAAA,X2          * ADD 5 TO X2                         7  8291  # !5? 094          146 14050     094
 1541                LCA   LCEAAA,0&X2        * LOAD DATA 00001 INTO STACK          7  8298  L !3I 0!0          146 14039     000+2
 1542                M     15995&X2,6&X2                                            7  8305  @ IRE 0!6          146 15995+2   006+2
 1543                SW    2&X2                                                     4  8312  , 0!2              146   002+2
 1544                LCA   6&X2,15995&X2                                            7  8316  L 0!6 IRE          147   006+2 15995+2
 1545         * POP (5)
 1546                MA    LFEAAA,X2          * ADD -5 TO X2                        7  8323  # !6H 094          147 14068     094
 1547         * STACK TOP IS NOW ARRAY INDEX
1                                                                                                         PAGE   30
0 SEQ PG LIN  LABEL  OP    OPERANDS                                            SFX CT  LOCN  INSTRUCTION TYPE  CARD A-ADDR  B-ADDR

 1548                B     LAGAAA             * JUMP TO SNIPPET NUMBER_TO_POINT     4  8330  B W3B              147 13632
 1549                MA    0&X2,15997&X2                                            7  8334  # 0!0 IRG          147   000+2 15997+2
 1550         * POP (3)
 1551                MA    LZDAAA,X2          * ADD -3 TO X2                        7  8341  # K3E 094          147 14235     094
 1552         * STACK TOP IS LOCATION IN ARRAY NOW
 1553         * END SUBSCRIPT (DIGITS[(VALUE / EXP)])
 1554         * POP (X1:3)
 1555                LCA   0&X2,X1            * LOAD DATA IN STACK INTO MEMORY      7  8348  L 0!0 089          147   000+2   089
 1556                MA    LZDAAA,X2          * ADD -3 TO X2                        7  8355  # K3E 094          148 14235     094
 1557         * PUSH (0+X1:1)
 1558                MA    LAEAAA,X2          * ADD 1 TO X2                         7  8362  # !1D 094          148 14014     094
 1559                LCA   0&X1,0&X2          * LOAD DATA 0&X1 INTO STACK           7  8369  L 0'0 0!0          148   000+1   000+2
 1560         * POSTINCREMENT (STR++)
 1561         * PUSH (LOFAAA:3)
 1562                MA    LWDAAA,X2          * ADD 3 TO X2                         7  8376  # K1B 094          148 14212     094
 1563                LCA   LOFAAA,0&X2        * LOAD DATA I9B INTO STACK            7  8383  L J6B 0!0          148 14162     000+2
 1564                MA    X3,0&X2                                                  7  8390  # 099 0!0          149   099     000+2
 1565         * POP (X1:3)
 1566                LCA   0&X2,X1            * LOAD DATA IN STACK INTO MEMORY      7  8397  L 0!0 089          149   000+2   089
 1567                MA    LZDAAA,X2          * ADD -3 TO X2                        7  8404  # K3E 094          149 14235     094
 1568         * PUSH (0+X1:3)
 1569                MA    LWDAAA,X2          * ADD 3 TO X2                         7  8411  # K1B 094          149 14212     094
 1570                LCA   0&X1,0&X2          * LOAD DATA 0&X1 INTO STACK           7  8418  L 0'0 0!0          149   000+1   000+2
 1571                MA    LAEAAA,0&X1        * POSTINCREMENT POINTER POINTED B     7  8425  # !1D 0'0          150 14014     000+1
 1572         * POP (X1:3)
 1573                LCA   0&X2,X1            * LOAD DATA IN STACK INTO MEMORY      7  8432  L 0!0 089          150   000+2   089
 1574                MA    LZDAAA,X2          * ADD -3 TO X2                        7  8439  # K3E 094          150 14235     094
 1575         * POP (0+X1:1)
 1576                LCA   0&X2,0&X1          * LOAD DATA IN STACK INTO MEMORY      7  8446  L 0!0 0'0          150   000+2   000+1
 1577                MA    LBEAAA,X2          * ADD -1 TO X2                        7  8453  # !2E 094          150 14025     094
 1578         * END ASSIGNMENT ((*(STR++)) = (DIGITS[(VALUE / EXP)]))
 1579         * ASSIGNMENT (VALUE = (VALUE % EXP))
 1580         * MODULO (%) (VALUE % EXP)
 1581         * LOCAL VARIABLE (EXP : 14+X3)
 1582         * PUSH (14+X3:5)
 1583                MA    LDEAAA,X2          * ADD 5 TO X2                         7  8460  # !5? 094          151 14050     094
 1584                LCA   14&X3,0&X2         * LOAD DATA 14&X3 INTO STACK          7  8467  L 0A4 0!0          151   014+3   000+2
 1585         * PARAMETER VARIABLE (VALUE : 15997+X3)
 1586         * PUSH (15997+X3:5)
 1587                MA    LDEAAA,X2          * ADD 5 TO X2                         7  8474  # !5? 094          151 14050     094
 1588                LCA   15997&X3,0&X2      * LOAD DATA 15997&X3 INTO STACK       7  8481  L IIG 0!0          151 15997+3   000+2
 1589                B     LSFAAA             * JUMP TO SNIPPET SNIP_DIV            4  8488  B U5F              151 13456
 1590         * POP (5)
 1591                MA    LFEAAA,X2          * ADD -5 TO X2                        7  8492  # !6H 094          151 14068     094
 1592         * PUSH (LZDAAA:3)
 1593                MA    LWDAAA,X2          * ADD 3 TO X2                         7  8499  # K1B 094          152 14212     094
 1594                LCA   LZDAAA,0&X2        * LOAD DATA I9G INTO STACK            7  8506  L K3E 0!0          152 14235     000+2
 1595                MA    X3,0&X2                                                  7  8513  # 099 0!0          152   099     000+2
 1596         * POP (X1:3)
 1597                LCA   0&X2,X1            * LOAD DATA IN STACK INTO MEMORY      7  8520  L 0!0 089          152   000+2   089
1                                                                                                         PAGE   31
0 SEQ PG LIN  LABEL  OP    OPERANDS                                            SFX CT  LOCN  INSTRUCTION TYPE  CARD A-ADDR  B-ADDR

 1598                MA    LZDAAA,X2          * ADD -3 TO X2                        7  8527  # K3E 094          152 14235     094
 1599         * POP (0+X1:5)
 1600                LCA   0&X2,0&X1          * LOAD DATA IN STACK INTO MEMORY      7  8534  L 0!0 0'0          153   000+2   000+1
 1601                MA    LFEAAA,X2          * ADD -5 TO X2                        7  8541  # !6H 094          153 14068     094
 1602         * END ASSIGNMENT (VALUE = (VALUE % EXP))
 1603         * ASSIGNMENT (EXP = (EXP / BASE))
 1604         * DIVIDE (EXP / BASE)
 1605         * PARAMETER VARIABLE (BASE : 15989+X3)
 1606         * PUSH (15989+X3:5)
 1607                MA    LDEAAA,X2          * ADD 5 TO X2                         7  8548  # !5? 094          153 14050     094
 1608                LCA   15989&X3,0&X2      * LOAD DATA 15989&X3 INTO STACK       7  8555  L IHI 0!0          153 15989+3   000+2
 1609         * LOCAL VARIABLE (EXP : 14+X3)
 1610         * PUSH (14+X3:5)
 1611                MA    LDEAAA,X2          * ADD 5 TO X2                         7  8562  # !5? 094          153 14050     094
 1612                LCA   14&X3,0&X2         * LOAD DATA 14&X3 INTO STACK          7  8569  L 0A4 0!0          154   014+3   000+2
 1613                B     LSFAAA             * JUMP TO SNIPPET SNIP_DIV            4  8576  B U5F              154 13456
 1614                MCW   0&X2,15995&X2      * COPY STACK LOCATION TO STACK LO     7  8580  M 0!0 IRE          154   000+2 15995+2
 1615         * POP (5)
 1616                MA    LFEAAA,X2          * ADD -5 TO X2                        7  8587  # !6H 094          154 14068     094
 1617         * PUSH (LIFAAA:3)
 1618                MA    LWDAAA,X2          * ADD 3 TO X2                         7  8594  # K1B 094          154 14212     094
 1619                LCA   LIFAAA,0&X2        * LOAD DATA 014 INTO STACK            7  8601  L J0I 0!0          154 14109     000+2
 1620                MA    X3,0&X2                                                  7  8608  # 099 0!0          155   099     000+2
 1621         * POP (X1:3)
 1622                LCA   0&X2,X1            * LOAD DATA IN STACK INTO MEMORY      7  8615  L 0!0 089          155   000+2   089
 1623                MA    LZDAAA,X2          * ADD -3 TO X2                        7  8622  # K3E 094          155 14235     094
 1624         * POP (0+X1:5)
 1625                LCA   0&X2,0&X1          * LOAD DATA IN STACK INTO MEMORY      7  8629  L 0!0 0'0          155   000+2   000+1
 1626                MA    LFEAAA,X2          * ADD -5 TO X2                        7  8636  # !6H 094          155 14068     094
 1627         * END ASSIGNMENT (EXP = (EXP / BASE))
 1628         LIBAAA NOP                      * RETURN                              1  8643  N                  155
 1629                BCE   LZAAAA,RF,R        * JUMP BACK TO CALLER                 8  8644  B 75K 340 R        156  8752     340
 1630         * ENDBLOCK [BLOCK LIBAAA:LZAAAA]
 1631         ***************************************
 1632         *
 1633                B     LJBAAA             * JUMP TO TOP                         4  8652  B 19M              156  8194
 1634         LKBAAA NOP                      * BOTTOM OF THE WHILE LOOP            1  8656  N                  156
 1635         *
 1636         * ASSIGNMENT ((*STR) = '\0')
 1637         * CONSTANT ('\0' : EOS)
 1638         * PUSH (EOS:1)
 1639                MA    LAEAAA,X2          * ADD 1 TO X2                         7  8657  # !1D 094          156 14014     094
 1640                LCA   EOS,0&X2           * LOAD DATA EOS INTO STACK            7  8664  L 345 0!0          156   345     000+2
 1641         * PARAMETER VARIABLE (STR : 15992+X3)
 1642         * PUSH (15992+X3:3)
 1643                MA    LWDAAA,X2          * ADD 3 TO X2                         7  8671  # K1B 094          156 14212     094
 1644                LCA   15992&X3,0&X2      * LOAD DATA 15992&X3 INTO STACK       7  8678  L IIB 0!0          157 15992+3   000+2
 1645         * POP (X1:3)
 1646                LCA   0&X2,X1            * LOAD DATA IN STACK INTO MEMORY      7  8685  L 0!0 089          157   000+2   089
 1647                MA    LZDAAA,X2          * ADD -3 TO X2                        7  8692  # K3E 094          157 14235     094
1                                                                                                         PAGE   32
0 SEQ PG LIN  LABEL  OP    OPERANDS                                            SFX CT  LOCN  INSTRUCTION TYPE  CARD A-ADDR  B-ADDR

 1648         * POP (0+X1:1)
 1649                LCA   0&X2,0&X1          * LOAD DATA IN STACK INTO MEMORY      7  8699  L 0!0 0'0          157   000+2   000+1
 1650                MA    LBEAAA,X2          * ADD -1 TO X2                        7  8706  # !2E 094          157 14025     094
 1651         * END ASSIGNMENT ((*STR) = '\0')
 1652         * LOCAL VARIABLE (START : 6+X3)
 1653         * PUSH (6+X3:3)
 1654                MA    LWDAAA,X2          * ADD 3 TO X2                         7  8713  # K1B 094          158 14212     094
 1655                LCA   6&X3,0&X2          * LOAD DATA 6&X3 INTO STACK           7  8720  L 0?6 0!0          158   006+3   000+2
 1656         * POP (15984+X3:3)
 1657                LCA   0&X2,15984&X3      * LOAD DATA IN STACK INTO MEMORY      7  8727  L 0!0 IHD          158   000+2 15984+3
 1658                MA    LZDAAA,X2          * ADD -3 TO X2                        7  8734  # K3E 094          158 14235     094
 1659         * SET THE RETURN FLAG, SO WE KNOW DO DEALLOCATE OUR STACK
 1660                MCW   @R@,RF             * PUT R INTO LOCATION RF              7  8741  M K4H 340          158 14248     340
 1661                B     LZAAAA             * JUMP BACK TO CALLER                 4  8748  B 75K              158  8752
 1662         LZAAAA NOP                      * RETURN                              1  8752  N                  159
 1663                MA    LHGAAA,X2          * RESERVE 14 BYTES OF SPACE ON ST     7  8753  # !9H 094          159 14098     094
 1664                MCW   @ @,RF             * CLEAR THE RETURN FLAG               7  8760  M K4B 340          159 14242     340
 1665         * ENDBLOCK [BLOCK LZAAAA:NULL]
 1666         ***************************************
 1667         *
 1668                LCA   3&X3,X1            * LOAD RETURN ADDRESS TO X1           7  8767  L 0?3 089          159   003+3   089
 1669                B     0&X1               * JUMP BACK TO CALLER                 4  8774  B 0'0              159   000+1
 1670         *
 1671         ***************************************************************************
 1672         * END FUNCTION : ITOA
 1673         ***************************************************************************
 1674         *
 1675         ***************************************************************************
 1676         * FUNCTION : PUTCHAR
 1677         ***************************************************************************
 1678         LLBAAA SBR   3&X3               * SAVE RETURN ADDRESS IN REGISTER     4  8778  H 0?3              159   003+3
 1679                SW    1&X3               * SET THE WM                          4  8782  , 0?1              159   001+3
 1680                CW    2&X3               * CLEAN WM                            4  8786  ) 0?2              160   002+3
 1681                CW    3&X3               * CLEAN WM                            4  8790  ) 0?3              160   003+3
 1682         *
 1683         ***************************************
 1684         * BEGINBLOCK [BLOCK LMBAAA:NULL]
 1685                MA    LWDAAA,X2          * RESERVE 3 BYTES OF SPACE ON STA     7  8794  # K1B 094          160 14212     094
 1686         * IF [IF ((C != '\N') THEN [BLOCK LNBAAA:LMBAAA] ELSE [BLOCK LOBAAA:LMBAAA]
 1687         * NOTEQUAL (!=) (C != '\N')
 1688         * PARAMETER VARIABLE (C : 15997+X3)
 1689         * PUSH (15997+X3:1)
 1690                MA    LAEAAA,X2          * ADD 1 TO X2                         7  8801  # !1D 094          160 14014     094
 1691                LCA   15997&X3,0&X2      * LOAD DATA 15997&X3 INTO STACK       7  8808  L IIG 0!0          160 15997+3   000+2
 1692         * CONSTANT ('\N' : EOL)
 1693         * PUSH (EOL:1)
 1694                MA    LAEAAA,X2          * ADD 1 TO X2                         7  8815  # !1D 094          160 14014     094
 1695                LCA   EOL,0&X2           * LOAD DATA EOL INTO STACK            7  8822  L 346 0!0          161   346     000+2
 1696                C     0&X2,15999&X2      * COMPARE                             7  8829  C 0!0 IRI          161   000+2 15999+2
 1697         * POP (1)
1                                                                                                         PAGE   33
0 SEQ PG LIN  LABEL  OP    OPERANDS                                            SFX CT  LOCN  INSTRUCTION TYPE  CARD A-ADDR  B-ADDR

 1698                MA    LBEAAA,X2          * ADD -1 TO X2                        7  8836  # !2E 094          161 14025     094
 1699         * POP (1)
 1700                MA    LBEAAA,X2          * ADD -1 TO X2                        7  8843  # !2E 094          161 14025     094
 1701         * PUSH (LCEAAA:5)
 1702                MA    LDEAAA,X2          * ADD 5 TO X2                         7  8850  # !5? 094          161 14050     094
 1703                LCA   LCEAAA,0&X2        * LOAD DATA 00001 INTO STACK          7  8857  L !3I 0!0          162 14039     000+2
 1704                BE    LIGAAA             * JUMP IF EQUAL                       5  8864  B 87L S            162  8873
 1705                B     LJGAAA             * JUMP TO END                         4  8869  B 88!              162  8880
 1706         LIGAAA MCW   LEEAAA,0&X2        * EQUAL: SET STACK LOCATION TO 0      7  8873  M !6A 0!0          162 14061     000+2
 1707         LJGAAA NOP                      * END OF NOTEQUAL                     1  8880  N                  162
 1708                MCS   0&X2,0&X2          * CLEAR WM                            7  8881  Z 0!0 0!0          162   000+2   000+2
 1709         * POP (5)
 1710                MA    LFEAAA,X2          * ADD -5 TO X2                        7  8888  # !6H 094          162 14068     094
 1711                BCE   LSBAAA,5&X2,       * JUMP WHEN FALSE                     8  8895  B '0P 0!5          163  9007     005+2
 1712         *
 1713         ***************************************
 1714         * BEGINBLOCK [BLOCK LNBAAA:LMBAAA]
 1715         * ASSIGNMENT ((*(__PUTCHAR_POS++)) = C)
 1716         * PARAMETER VARIABLE (C : 15997+X3)
 1717         * PUSH (15997+X3:1)
 1718                MA    LAEAAA,X2          * ADD 1 TO X2                         7  8903  # !1D 094          163 14014     094
 1719                LCA   15997&X3,0&X2      * LOAD DATA 15997&X3 INTO STACK       7  8910  L IIG 0!0          163 15997+3   000+2
 1720         * POSTINCREMENT (__PUTCHAR_POS++)
 1721         * PUSH (LKGAAA:3)
 1722                MA    LWDAAA,X2          * ADD 3 TO X2                         7  8917  # K1B 094          163 14212     094
 1723                LCA   LKGAAA,0&X2        * LOAD DATA 02U INTO STACK            7  8924  L J3A 0!0          163 14131     000+2
 1724         * POP (X1:3)
 1725                LCA   0&X2,X1            * LOAD DATA IN STACK INTO MEMORY      7  8931  L 0!0 089          164   000+2   089
 1726                MA    LZDAAA,X2          * ADD -3 TO X2                        7  8938  # K3E 094          164 14235     094
 1727         * PUSH (0+X1:3)
 1728                MA    LWDAAA,X2          * ADD 3 TO X2                         7  8945  # K1B 094          164 14212     094
 1729                LCA   0&X1,0&X2          * LOAD DATA 0&X1 INTO STACK           7  8952  L 0'0 0!0          164   000+1   000+2
 1730                MA    LAEAAA,0&X1        * POSTINCREMENT POINTER POINTED B     7  8959  # !1D 0'0          164 14014     000+1
 1731         * POP (X1:3)
 1732                LCA   0&X2,X1            * LOAD DATA IN STACK INTO MEMORY      7  8966  L 0!0 089          165   000+2   089
 1733                MA    LZDAAA,X2          * ADD -3 TO X2                        7  8973  # K3E 094          165 14235     094
 1734         * POP (0+X1:1)
 1735                LCA   0&X2,0&X1          * LOAD DATA IN STACK INTO MEMORY      7  8980  L 0!0 0'0          165   000+2   000+1
 1736                MA    LBEAAA,X2          * ADD -1 TO X2                        7  8987  # !2E 094          165 14025     094
 1737         * END ASSIGNMENT ((*(__PUTCHAR_POS++)) = C)
 1738         LNBAAA NOP                      * RETURN                              1  8994  N                  165
 1739                BCE   LMBAAA,RF,R        * JUMP BACK TO CALLER                 8  8995  B V6O 340 R        165  9566     340
 1740         * ENDBLOCK [BLOCK LNBAAA:LMBAAA]
 1741         ***************************************
 1742         *
 1743                B     LTBAAA             * JUMP WHEN TRUE                      4  9003  B T4!              166  9340
 1744         LSBAAA NOP                      * EXECUTED WHEN FALSE                 1  9007  N                  166
 1745         *
 1746         ***************************************
 1747         * BEGINBLOCK [BLOCK LOBAAA:LMBAAA]
1                                                                                                         PAGE   34
0 SEQ PG LIN  LABEL  OP    OPERANDS                                            SFX CT  LOCN  INSTRUCTION TYPE  CARD A-ADDR  B-ADDR

 1748         * WHILE [WHILE ((((INT) __PUTCHAR_LAST) >= ((INT) __PUTCHAR_POS))) [BLOCK L
 1749         LQBAAA NOP                      * TOP OF THE LOOP                     1  9008  N                  166
 1750         * GREATEROREQUAL (>=) ((((INT) __PUTCHAR_LAST) >= ((INT) __PUTCHAR_POS))
 1751         * STATIC VARIABLE (__PUTCHAR_LAST : 4027)
 1752         * PUSH (4027:3)
 1753                MA    LWDAAA,X2          * ADD 3 TO X2                         7  9009  # K1B 094          166 14212     094
 1754                LCA   4027,0&X2          * LOAD DATA 4027 INTO STACK           7  9016  L 02X 0!0          166  4027     000+2
 1755         * CAST POINTER(__PUTCHAR_LAST) TO NUMBER
 1756                B     LLGAAA             * JUMP TO SNIPPET POINTER_TO_NUMB     4  9023  B Y4A              166 13841
 1757                B     LJFAAA             * JUMP TO SNIPPET CLEAN_NUMBER        4  9027  B U2E              166 13425
 1758         * STATIC VARIABLE (__PUTCHAR_POS : 4024)
 1759         * PUSH (4024:3)
 1760                MA    LWDAAA,X2          * ADD 3 TO X2                         7  9031  # K1B 094          167 14212     094
 1761                LCA   4024,0&X2          * LOAD DATA 4024 INTO STACK           7  9038  L 02U 0!0          167  4024     000+2
 1762         * CAST POINTER(__PUTCHAR_POS) TO NUMBER
 1763                B     LLGAAA             * JUMP TO SNIPPET POINTER_TO_NUMB     4  9045  B Y4A              167 13841
 1764                B     LJFAAA             * JUMP TO SNIPPET CLEAN_NUMBER        4  9049  B U2E              167 13425
 1765                C     0&X2,15995&X2      * COMPARE                             7  9053  C 0!0 IRE          167   000+2 15995+2
 1766         * POP (5)
 1767                MA    LFEAAA,X2          * ADD -5 TO X2                        7  9060  # !6H 094          167 14068     094
 1768                MCW   LCEAAA,0&X2        * SET STACK LOCATION TO 1             7  9067  M !3I 0!0          168 14039     000+2
 1769                BL    LUGAAA             * JUMP IF GREATER OR EQUAL            5  9074  B '8L T            168  9083
 1770                B     LVGAAA             * JUMP TO END                         4  9079  B '9!              168  9090
 1771         LUGAAA MCW   LEEAAA,0&X2        * GREATEROREQUAL: SET STACK LOCAT     7  9083  M !6A 0!0          168 14061     000+2
 1772         LVGAAA NOP                      * END OF GREATEROREQUAL               1  9090  N                  168
 1773                MCS   0&X2,0&X2          * CLEAR WM                            7  9091  Z 0!0 0!0          168   000+2   000+2
 1774         * POP (5)
 1775                MA    LFEAAA,X2          * ADD -5 TO X2                        7  9098  # !6H 094          168 14068     094
 1776                BCE   LRBAAA,5&X2,       * JUMP TO BOTTOM                      8  9105  B S1P 0!5          169  9217     005+2
 1777         *
 1778         ***************************************
 1779         * BEGINBLOCK [BLOCK LPBAAA:LOBAAA]
 1780         * ASSIGNMENT ((*(__PUTCHAR_LAST--)) = ' ')
 1781         * CONSTANT (' ' : @ @)
 1782         * PUSH (@ @:1)
 1783                MA    LAEAAA,X2          * ADD 1 TO X2                         7  9113  # !1D 094          169 14014     094
 1784                LCA   @ @,0&X2           * LOAD DATA   INTO STACK              7  9120  L K4B 0!0          169 14242     000+2
 1785         * POSTDECREMENT (__PUTCHAR_LAST--)
 1786         * PUSH (LXGAAA:3)
 1787                MA    LWDAAA,X2          * ADD 3 TO X2                         7  9127  # K1B 094          169 14212     094
 1788                LCA   LXGAAA,0&X2        * LOAD DATA 02X INTO STACK            7  9134  L K2B 0!0          169 14222     000+2
 1789         * POP (X1:3)
 1790                LCA   0&X2,X1            * LOAD DATA IN STACK INTO MEMORY      7  9141  L 0!0 089          170   000+2   089
 1791                MA    LZDAAA,X2          * ADD -3 TO X2                        7  9148  # K3E 094          170 14235     094
 1792         * PUSH (0+X1:3)
 1793                MA    LWDAAA,X2          * ADD 3 TO X2                         7  9155  # K1B 094          170 14212     094
 1794                LCA   0&X1,0&X2          * LOAD DATA 0&X1 INTO STACK           7  9162  L 0'0 0!0          170   000+1   000+2
 1795                MA    LBEAAA,0&X1        * POSTDECREMENT POINTER POINTED B     7  9169  # !2E 0'0          170 14025     000+1
 1796         * POP (X1:3)
 1797                LCA   0&X2,X1            * LOAD DATA IN STACK INTO MEMORY      7  9176  L 0!0 089          171   000+2   089
1                                                                                                         PAGE   35
0 SEQ PG LIN  LABEL  OP    OPERANDS                                            SFX CT  LOCN  INSTRUCTION TYPE  CARD A-ADDR  B-ADDR

 1798                MA    LZDAAA,X2          * ADD -3 TO X2                        7  9183  # K3E 094          171 14235     094
 1799         * POP (0+X1:1)
 1800                LCA   0&X2,0&X1          * LOAD DATA IN STACK INTO MEMORY      7  9190  L 0!0 0'0          171   000+2   000+1
 1801                MA    LBEAAA,X2          * ADD -1 TO X2                        7  9197  # !2E 094          171 14025     094
 1802         * END ASSIGNMENT ((*(__PUTCHAR_LAST--)) = ' ')
 1803         LPBAAA NOP                      * RETURN                              1  9204  N                  171
 1804                BCE   LOBAAA,RF,R        * JUMP BACK TO CALLER                 8  9205  B T3J 340 R        171  9331     340
 1805         * ENDBLOCK [BLOCK LPBAAA:LOBAAA]
 1806         ***************************************
 1807         *
 1808                B     LQBAAA             * JUMP TO TOP                         4  9213  B '0Q              172  9008
 1809         LRBAAA NOP                      * BOTTOM OF THE WHILE LOOP            1  9217  N                  172
 1810         *
 1811         * ASSIGNMENT (__PUTCHAR_LAST = __PUTCHAR_POS)
 1812         * STATIC VARIABLE (__PUTCHAR_POS : 4024)
 1813         * PUSH (4024:3)
 1814                MA    LWDAAA,X2          * ADD 3 TO X2                         7  9218  # K1B 094          172 14212     094
 1815                LCA   4024,0&X2          * LOAD DATA 4024 INTO STACK           7  9225  L 02U 0!0          172  4024     000+2
 1816         * PUSH (LXGAAA:3)
 1817                MA    LWDAAA,X2          * ADD 3 TO X2                         7  9232  # K1B 094          172 14212     094
 1818                LCA   LXGAAA,0&X2        * LOAD DATA 02X INTO STACK            7  9239  L K2B 0!0          172 14222     000+2
 1819         * POP (X1:3)
 1820                LCA   0&X2,X1            * LOAD DATA IN STACK INTO MEMORY      7  9246  L 0!0 089          173   000+2   089
 1821                MA    LZDAAA,X2          * ADD -3 TO X2                        7  9253  # K3E 094          173 14235     094
 1822         * POP (0+X1:3)
 1823                LCA   0&X2,0&X1          * LOAD DATA IN STACK INTO MEMORY      7  9260  L 0!0 0'0          173   000+2   000+1
 1824                MA    LZDAAA,X2          * ADD -3 TO X2                        7  9267  # K3E 094          173 14235     094
 1825         * END ASSIGNMENT (__PUTCHAR_LAST = __PUTCHAR_POS)
 1826         * ASSIGNMENT (__PUTCHAR_POS = 201)
 1827         * CONSTANT (201 : LYGAAA)
 1828         * PUSH (LYGAAA:3)
 1829                MA    LWDAAA,X2          * ADD 3 TO X2                         7  9274  # K1B 094          173 14212     094
 1830                LCA   LYGAAA,0&X2        * LOAD DATA 201 INTO STACK            7  9281  L K2I 0!0          174 14229     000+2
 1831         * PUSH (LKGAAA:3)
 1832                MA    LWDAAA,X2          * ADD 3 TO X2                         7  9288  # K1B 094          174 14212     094
 1833                LCA   LKGAAA,0&X2        * LOAD DATA 02U INTO STACK            7  9295  L J3A 0!0          174 14131     000+2
 1834         * POP (X1:3)
 1835                LCA   0&X2,X1            * LOAD DATA IN STACK INTO MEMORY      7  9302  L 0!0 089          174   000+2   089
 1836                MA    LZDAAA,X2          * ADD -3 TO X2                        7  9309  # K3E 094          174 14235     094
 1837         * POP (0+X1:3)
 1838                LCA   0&X2,0&X1          * LOAD DATA IN STACK INTO MEMORY      7  9316  L 0!0 0'0          175   000+2   000+1
 1839                MA    LZDAAA,X2          * ADD -3 TO X2                        7  9323  # K3E 094          175 14235     094
 1840         * END ASSIGNMENT (__PUTCHAR_POS = 201)
 1841         * START ASM BLOCK
 1842                W                                                              1  9330  2                  175
 1843         * END ASM BLOCK
 1844         LOBAAA NOP                      * RETURN                              1  9331  N                  175
 1845                BCE   LMBAAA,RF,R        * JUMP BACK TO CALLER                 8  9332  B V6O 340 R        175  9566     340
 1846         * ENDBLOCK [BLOCK LOBAAA:LMBAAA]
 1847         ***************************************
1                                                                                                         PAGE   36
0 SEQ PG LIN  LABEL  OP    OPERANDS                                            SFX CT  LOCN  INSTRUCTION TYPE  CARD A-ADDR  B-ADDR

 1848         *
 1849         LTBAAA NOP                      * EXECUTED WHEN TRUE                  1  9340  N                  175
 1850         * IF [IF ((__PUTCHAR_POS == 333) THEN [BLOCK LUBAAA:LMBAAA]]
 1851         * EQUAL (==) (__PUTCHAR_POS == 333)
 1852         * STATIC VARIABLE (__PUTCHAR_POS : 4024)
 1853         * PUSH (4024:3)
 1854                MA    LWDAAA,X2          * ADD 3 TO X2                         7  9341  # K1B 094          175 14212     094
 1855                LCA   4024,0&X2          * LOAD DATA 4024 INTO STACK           7  9348  L 02U 0!0          176  4024     000+2
 1856         * CONSTANT (333 : LBHAAA)
 1857         * PUSH (LBHAAA:3)
 1858                MA    LWDAAA,X2          * ADD 3 TO X2                         7  9355  # K1B 094          176 14212     094
 1859                LCA   LBHAAA,0&X2        * LOAD DATA 333 INTO STACK            7  9362  L !3A 0!0          176 14031     000+2
 1860                C     0&X2,15997&X2      * COMPARE                             7  9369  C 0!0 IRG          176   000+2 15997+2
 1861         * POP (3)
 1862                MA    LZDAAA,X2          * ADD -3 TO X2                        7  9376  # K3E 094          176 14235     094
 1863         * POP (3)
 1864                MA    LZDAAA,X2          * ADD -3 TO X2                        7  9383  # K3E 094          177 14235     094
 1865         * PUSH (LEEAAA:5)
 1866                MA    LDEAAA,X2          * ADD 5 TO X2                         7  9390  # !5? 094          177 14050     094
 1867                LCA   LEEAAA,0&X2        * LOAD DATA 00000 INTO STACK          7  9397  L !6A 0!0          177 14061     000+2
 1868                BE    LZGAAA             * JUMP IF EQUAL                       5  9404  B U1L S            177  9413
 1869                B     LAHAAA             * JUMP TO END                         4  9409  B U2!              177  9420
 1870         LZGAAA MCW   LCEAAA,0&X2        * EQUAL                               7  9413  M !3I 0!0          177 14039     000+2
 1871         LAHAAA NOP                      * END OF EQUAL                        1  9420  N                  177
 1872                MCS   0&X2,0&X2          * CLEAR WM                            7  9421  Z 0!0 0!0          178   000+2   000+2
 1873         * POP (5)
 1874                MA    LFEAAA,X2          * ADD -5 TO X2                        7  9428  # !6H 094          178 14068     094
 1875                BCE   LVBAAA,5&X2,       * JUMP WHEN FALSE                     8  9435  B V6N 0!5          178  9565     005+2
 1876         *
 1877         ***************************************
 1878         * BEGINBLOCK [BLOCK LUBAAA:LMBAAA]
 1879         * ASSIGNMENT (__PUTCHAR_LAST = __PUTCHAR_POS)
 1880         * STATIC VARIABLE (__PUTCHAR_POS : 4024)
 1881         * PUSH (4024:3)
 1882                MA    LWDAAA,X2          * ADD 3 TO X2                         7  9443  # K1B 094          178 14212     094
 1883                LCA   4024,0&X2          * LOAD DATA 4024 INTO STACK           7  9450  L 02U 0!0          178  4024     000+2
 1884         * PUSH (LXGAAA:3)
 1885                MA    LWDAAA,X2          * ADD 3 TO X2                         7  9457  # K1B 094          179 14212     094
 1886                LCA   LXGAAA,0&X2        * LOAD DATA 02X INTO STACK            7  9464  L K2B 0!0          179 14222     000+2
 1887         * POP (X1:3)
 1888                LCA   0&X2,X1            * LOAD DATA IN STACK INTO MEMORY      7  9471  L 0!0 089          179   000+2   089
 1889                MA    LZDAAA,X2          * ADD -3 TO X2                        7  9478  # K3E 094          179 14235     094
 1890         * POP (0+X1:3)
 1891                LCA   0&X2,0&X1          * LOAD DATA IN STACK INTO MEMORY      7  9485  L 0!0 0'0          179   000+2   000+1
 1892                MA    LZDAAA,X2          * ADD -3 TO X2                        7  9492  # K3E 094          180 14235     094
 1893         * END ASSIGNMENT (__PUTCHAR_LAST = __PUTCHAR_POS)
 1894         * ASSIGNMENT (__PUTCHAR_POS = 201)
 1895         * CONSTANT (201 : LYGAAA)
 1896         * PUSH (LYGAAA:3)
 1897                MA    LWDAAA,X2          * ADD 3 TO X2                         7  9499  # K1B 094          180 14212     094
1                                                                                                         PAGE   37
0 SEQ PG LIN  LABEL  OP    OPERANDS                                            SFX CT  LOCN  INSTRUCTION TYPE  CARD A-ADDR  B-ADDR

 1898                LCA   LYGAAA,0&X2        * LOAD DATA 201 INTO STACK            7  9506  L K2I 0!0          180 14229     000+2
 1899         * PUSH (LKGAAA:3)
 1900                MA    LWDAAA,X2          * ADD 3 TO X2                         7  9513  # K1B 094          180 14212     094
 1901                LCA   LKGAAA,0&X2        * LOAD DATA 02U INTO STACK            7  9520  L J3A 0!0          180 14131     000+2
 1902         * POP (X1:3)
 1903                LCA   0&X2,X1            * LOAD DATA IN STACK INTO MEMORY      7  9527  L 0!0 089          181   000+2   089
 1904                MA    LZDAAA,X2          * ADD -3 TO X2                        7  9534  # K3E 094          181 14235     094
 1905         * POP (0+X1:3)
 1906                LCA   0&X2,0&X1          * LOAD DATA IN STACK INTO MEMORY      7  9541  L 0!0 0'0          181   000+2   000+1
 1907                MA    LZDAAA,X2          * ADD -3 TO X2                        7  9548  # K3E 094          181 14235     094
 1908         * END ASSIGNMENT (__PUTCHAR_POS = 201)
 1909         * START ASM BLOCK
 1910                W                                                              1  9555  2                  181
 1911         * END ASM BLOCK
 1912         LUBAAA NOP                      * RETURN                              1  9556  N                  181
 1913                BCE   LMBAAA,RF,R        * JUMP BACK TO CALLER                 8  9557  B V6O 340 R        181  9566     340
 1914         * ENDBLOCK [BLOCK LUBAAA:LMBAAA]
 1915         ***************************************
 1916         *
 1917         LVBAAA NOP                      * EXECUTED WHEN FALSE                 1  9565  N                  182
 1918         LMBAAA NOP                      * RETURN                              1  9566  N                  182
 1919                MA    LZDAAA,X2          * RESERVE 3 BYTES OF SPACE ON STA     7  9567  # K3E 094          182 14235     094
 1920                MCW   @ @,RF             * CLEAR THE RETURN FLAG               7  9574  M K4B 340          182 14242     340
 1921         * ENDBLOCK [BLOCK LMBAAA:NULL]
 1922         ***************************************
 1923         *
 1924                LCA   3&X3,X1            * LOAD RETURN ADDRESS TO X1           7  9581  L 0?3 089          182   003+3   089
 1925                B     0&X1               * JUMP BACK TO CALLER                 4  9588  B 0'0              182   000+1
 1926         *
 1927         ***************************************************************************
 1928         * END FUNCTION : PUTCHAR
 1929         ***************************************************************************
 1930         *
 1931         ***************************************************************************
 1932         * FUNCTION : STRLEN
 1933         ***************************************************************************
 1934         LFAAAA SBR   3&X3               * SAVE RETURN ADDRESS IN REGISTER     4  9592  H 0?3              182   003+3
 1935                SW    1&X3               * SET THE WM                          4  9596  , 0?1              183   001+3
 1936                CW    2&X3               * CLEAN WM                            4  9600  ) 0?2              183   002+3
 1937                CW    3&X3               * CLEAN WM                            4  9604  ) 0?3              183   003+3
 1938         *
 1939         ***************************************
 1940         * BEGINBLOCK [BLOCK LGAAAA:NULL]
 1941                LCA   LCHAAA,8&X3        * LOAD INT -1 INTO MEMORY 8&X3        7  9608  L !4D 0?8          183 14044     008+3
 1942                MA    LDHAAA,X2          * RESERVE 8 BYTES OF SPACE ON STA     7  9615  # !5C 094          183 14053     094
 1943         * WHILE [WHILE (((STR[(++LEN)]) != '\0')) [] TOP:LHAAAA BOTTOM:LIAAAA]
 1944         LHAAAA NOP                      * TOP OF THE LOOP                     1  9622  N                  183
 1945         * NOTEQUAL (!=) ((STR[(++LEN)]) != '\0')
 1946         * SUBSCRIPT (STR[(++LEN)])
 1947         * PARAMETER VARIABLE (STR : 15997+X3)
1                                                                                                         PAGE   38
0 SEQ PG LIN  LABEL  OP    OPERANDS                                            SFX CT  LOCN  INSTRUCTION TYPE  CARD A-ADDR  B-ADDR

 1948         * PUSH (15997+X3:3)
 1949                MA    LWDAAA,X2          * ADD 3 TO X2                         7  9623  # K1B 094          183 14212     094
 1950                LCA   15997&X3,0&X2      * LOAD DATA 15997&X3 INTO STACK       7  9630  L IIG 0!0          184 15997+3   000+2
 1951         * PREINCREMENT((++LEN)
 1952         * PUSH (LDHAAA:3)
 1953                MA    LWDAAA,X2          * ADD 3 TO X2                         7  9637  # K1B 094          184 14212     094
 1954                LCA   LDHAAA,0&X2        * LOAD DATA 008 INTO STACK            7  9644  L !5C 0!0          184 14053     000+2
 1955                MA    X3,0&X2                                                  7  9651  # 099 0!0          184   099     000+2
 1956         * POP (X1:3)
 1957                LCA   0&X2,X1            * LOAD DATA IN STACK INTO MEMORY      7  9658  L 0!0 089          184   000+2   089
 1958                MA    LZDAAA,X2          * ADD -3 TO X2                        7  9665  # K3E 094          185 14235     094
 1959                A     LCEAAA,0&X1        * PREINCREMENT VARIABLE POINTED B     7  9672  A !3I 0'0          185 14039     000+1
 1960         * PUSH (0+X1:5)
 1961                MA    LDEAAA,X2          * ADD 5 TO X2                         7  9679  # !5? 094          185 14050     094
 1962                LCA   0&X1,0&X2          * LOAD DATA 0&X1 INTO STACK           7  9686  L 0'0 0!0          185   000+1   000+2
 1963         * PUT RAW INDEX ON THE STACK
 1964         * PUSH (LCEAAA:5)
 1965                MA    LDEAAA,X2          * ADD 5 TO X2                         7  9693  # !5? 094          185 14050     094
 1966                LCA   LCEAAA,0&X2        * LOAD DATA 00001 INTO STACK          7  9700  L !3I 0!0          186 14039     000+2
 1967                M     15995&X2,6&X2                                            7  9707  @ IRE 0!6          186 15995+2   006+2
 1968                SW    2&X2                                                     4  9714  , 0!2              186   002+2
 1969                LCA   6&X2,15995&X2                                            7  9718  L 0!6 IRE          186   006+2 15995+2
 1970         * POP (5)
 1971                MA    LFEAAA,X2          * ADD -5 TO X2                        7  9725  # !6H 094          186 14068     094
 1972         * STACK TOP IS NOW ARRAY INDEX
 1973                B     LAGAAA             * JUMP TO SNIPPET NUMBER_TO_POINT     4  9732  B W3B              186 13632
 1974                MA    0&X2,15997&X2                                            7  9736  # 0!0 IRG          187   000+2 15997+2
 1975         * POP (3)
 1976                MA    LZDAAA,X2          * ADD -3 TO X2                        7  9743  # K3E 094          187 14235     094
 1977         * STACK TOP IS LOCATION IN ARRAY NOW
 1978         * END SUBSCRIPT (STR[(++LEN)])
 1979         * POP (X1:3)
 1980                LCA   0&X2,X1            * LOAD DATA IN STACK INTO MEMORY      7  9750  L 0!0 089          187   000+2   089
 1981                MA    LZDAAA,X2          * ADD -3 TO X2                        7  9757  # K3E 094          187 14235     094
 1982         * PUSH (0+X1:1)
 1983                MA    LAEAAA,X2          * ADD 1 TO X2                         7  9764  # !1D 094          187 14014     094
 1984                LCA   0&X1,0&X2          * LOAD DATA 0&X1 INTO STACK           7  9771  L 0'0 0!0          188   000+1   000+2
 1985         * CONSTANT ('\0' : EOS)
 1986         * PUSH (EOS:1)
 1987                MA    LAEAAA,X2          * ADD 1 TO X2                         7  9778  # !1D 094          188 14014     094
 1988                LCA   EOS,0&X2           * LOAD DATA EOS INTO STACK            7  9785  L 345 0!0          188   345     000+2
 1989                C     0&X2,15999&X2      * COMPARE                             7  9792  C 0!0 IRI          188   000+2 15999+2
 1990         * POP (1)
 1991                MA    LBEAAA,X2          * ADD -1 TO X2                        7  9799  # !2E 094          188 14025     094
 1992         * POP (1)
 1993                MA    LBEAAA,X2          * ADD -1 TO X2                        7  9806  # !2E 094          189 14025     094
 1994         * PUSH (LCEAAA:5)
 1995                MA    LDEAAA,X2          * ADD 5 TO X2                         7  9813  # !5? 094          189 14050     094
 1996                LCA   LCEAAA,0&X2        * LOAD DATA 00001 INTO STACK          7  9820  L !3I 0!0          189 14039     000+2
 1997                BE    LEHAAA             * JUMP IF EQUAL                       5  9827  B Y3O S            189  9836
1                                                                                                         PAGE   39
0 SEQ PG LIN  LABEL  OP    OPERANDS                                            SFX CT  LOCN  INSTRUCTION TYPE  CARD A-ADDR  B-ADDR

 1998                B     LFHAAA             * JUMP TO END                         4  9832  B Y4L              189  9843
 1999         LEHAAA MCW   LEEAAA,0&X2        * EQUAL: SET STACK LOCATION TO 0      7  9836  M !6A 0!0          189 14061     000+2
 2000         LFHAAA NOP                      * END OF NOTEQUAL                     1  9843  N                  189
 2001                MCS   0&X2,0&X2          * CLEAR WM                            7  9844  Z 0!0 0!0          190   000+2   000+2
 2002         * POP (5)
 2003                MA    LFEAAA,X2          * ADD -5 TO X2                        7  9851  # !6H 094          190 14068     094
 2004                BCE   LIAAAA,5&X2,       * JUMP TO BOTTOM                      8  9858  B Y7! 0!5          190  9870     005+2
 2005                B     LHAAAA             * JUMP TO TOP                         4  9866  B W2K              190  9622
 2006         LIAAAA NOP                      * BOTTOM OF THE WHILE LOOP            1  9870  N                  190
 2007         *
 2008         * LOCAL VARIABLE (LEN : 8+X3)
 2009         * PUSH (8+X3:5)
 2010                MA    LDEAAA,X2          * ADD 5 TO X2                         7  9871  # !5? 094          190 14050     094
 2011                LCA   8&X3,0&X2          * LOAD DATA 8&X3 INTO STACK           7  9878  L 0?8 0!0          191   008+3   000+2
 2012         * POP (15994+X3:5)
 2013                LCA   0&X2,15994&X3      * LOAD DATA IN STACK INTO MEMORY      7  9885  L 0!0 IID          191   000+2 15994+3
 2014                MA    LFEAAA,X2          * ADD -5 TO X2                        7  9892  # !6H 094          191 14068     094
 2015         * SET THE RETURN FLAG, SO WE KNOW DO DEALLOCATE OUR STACK
 2016                MCW   @R@,RF             * PUT R INTO LOCATION RF              7  9899  M K4H 340          191 14248     340
 2017                B     LGAAAA             * JUMP BACK TO CALLER                 4  9906  B Z1!              191  9910
 2018         LGAAAA NOP                      * RETURN                              1  9910  N                  191
 2019                MA    LOFAAA,X2          * RESERVE 8 BYTES OF SPACE ON STA     7  9911  # J6B 094          192 14162     094
 2020                MCW   @ @,RF             * CLEAR THE RETURN FLAG               7  9918  M K4B 340          192 14242     340
 2021         * ENDBLOCK [BLOCK LGAAAA:NULL]
 2022         ***************************************
 2023         *
 2024                LCA   3&X3,X1            * LOAD RETURN ADDRESS TO X1           7  9925  L 0?3 089          192   003+3   089
 2025                B     0&X1               * JUMP BACK TO CALLER                 4  9932  B 0'0              192   000+1
 2026         *
 2027         ***************************************************************************
 2028         * END FUNCTION : STRLEN
 2029         ***************************************************************************
 2030         *
 2031         ***************************************************************************
 2032         * FUNCTION : GENRAND
 2033         ***************************************************************************
 2034         LBAAAA SBR   3&X3               * SAVE RETURN ADDRESS IN REGISTER     4  9936  H 0?3              192   003+3
 2035                SW    1&X3               * SET THE WM                          4  9940  , 0?1              192   001+3
 2036                CW    2&X3               * CLEAN WM                            4  9944  ) 0?2              192   002+3
 2037                CW    3&X3               * CLEAN WM                            4  9948  ) 0?3              193   003+3
 2038         *
 2039         ***************************************
 2040         * BEGINBLOCK [BLOCK LCAAAA:NULL]
 2041                MA    LWDAAA,X2          * RESERVE 3 BYTES OF SPACE ON STA     7  9952  # K1B 094          193 14212     094
 2042         * ASSIGNMENT (SEED = (((42 * SEED) + 19) % 100000))
 2043         * MODULO (%) (((42 * SEED) + 19) % 100000)
 2044         * CONSTANT (100000 : LGHAAA)
 2045         * PUSH (LGHAAA:5)
 2046                MA    LDEAAA,X2          * ADD 5 TO X2                         7  9959  # !5? 094          193 14050     094
 2047                LCA   LGHAAA,0&X2        * LOAD DATA 100000 INTO STACK         7  9966  L !8F 0!0          193 14086     000+2
1                                                                                                         PAGE   40
0 SEQ PG LIN  LABEL  OP    OPERANDS                                            SFX CT  LOCN  INSTRUCTION TYPE  CARD A-ADDR  B-ADDR

 2048         * ADDITION ((42 * SEED) + 19)
 2049         * MULTIPLY (42 * SEED)
 2050         * CONSTANT (42 : LHHAAA)
 2051         * PUSH (LHHAAA:5)
 2052                MA    LDEAAA,X2          * ADD 5 TO X2                         7  9973  # !5? 094          193 14050     094
 2053                LCA   LHHAAA,0&X2        * LOAD DATA 00042 INTO STACK          7  9980  L J0C 0!0          193 14103     000+2
 2054         * STATIC VARIABLE (SEED : 4004)
 2055         * PUSH (4004:5)
 2056                MA    LDEAAA,X2          * ADD 5 TO X2                         7  9987  # !5? 094          194 14050     094
 2057                LCA   4004,0&X2          * LOAD DATA 4004 INTO STACK           7  9994  L 00U 0!0          194  4004     000+2
 2058                M     15995&X2,6&X2      * MULTIPLY                            7 10001  @ IRE 0!6          194 15995+2   006+2
 2059                SW    2&X2                                                     4 10008  , 0!2              194   002+2
 2060                LCA   6&X2,15995&X2                                            7 10012  L 0!6 IRE          194   006+2 15995+2
 2061         * POP (5)
 2062                MA    LFEAAA,X2          * ADD -5 TO X2                        7 10019  # !6H 094          194 14068     094
 2063         * CONSTANT (19 : LIHAAA)
 2064         * PUSH (LIHAAA:5)
 2065                MA    LDEAAA,X2          * ADD 5 TO X2                         7 10026  # !5? 094          195 14050     094
 2066                LCA   LIHAAA,0&X2        * LOAD DATA 00019 INTO STACK          7 10033  L J1D 0!0          195 14114     000+2
 2067                A     0&X2,15995&X2      * ADD                                 7 10040  A 0!0 IRE          195   000+2 15995+2
 2068         * POP (5)
 2069                MA    LFEAAA,X2          * ADD -5 TO X2                        7 10047  # !6H 094          195 14068     094
 2070                B     LSFAAA             * JUMP TO SNIPPET SNIP_DIV            4 10054  B U5F              195 13456
 2071         * POP (5)
 2072                MA    LFEAAA,X2          * ADD -5 TO X2                        7 10058  # !6H 094          195 14068     094
 2073         * PUSH (LJHAAA:3)
 2074                MA    LWDAAA,X2          * ADD 3 TO X2                         7 10065  # K1B 094          196 14212     094
 2075                LCA   LJHAAA,0&X2        * LOAD DATA 00U INTO STACK            7 10072  L J2? 0!0          196 14120     000+2
 2076         * POP (X1:3)
 2077                LCA   0&X2,X1            * LOAD DATA IN STACK INTO MEMORY      7 10079  L 0!0 089          196   000+2   089
 2078                MA    LZDAAA,X2          * ADD -3 TO X2                        7 10086  # K3E 094          196 14235     094
 2079         * POP (0+X1:5)
 2080                LCA   0&X2,0&X1          * LOAD DATA IN STACK INTO MEMORY      7 10093  L 0!0 0'0          196   000+2   000+1
 2081                MA    LFEAAA,X2          * ADD -5 TO X2                        7 10100  # !6H 094          197 14068     094
 2082         * END ASSIGNMENT (SEED = (((42 * SEED) + 19) % 100000))
 2083         * STATIC VARIABLE (SEED : 4004)
 2084         * PUSH (4004:5)
 2085                MA    LDEAAA,X2          * ADD 5 TO X2                         7 10107  # !5? 094          197 14050     094
 2086                LCA   4004,0&X2          * LOAD DATA 4004 INTO STACK           7 10114  L 00U 0!0          197  4004     000+2
 2087         * POP (15997+X3:5)
 2088                LCA   0&X2,15997&X3      * LOAD DATA IN STACK INTO MEMORY      7 10121  L 0!0 IIG          197   000+2 15997+3
 2089                MA    LFEAAA,X2          * ADD -5 TO X2                        7 10128  # !6H 094          197 14068     094
 2090         * SET THE RETURN FLAG, SO WE KNOW DO DEALLOCATE OUR STACK
 2091                MCW   @R@,RF             * PUT R INTO LOCATION RF              7 10135  M K4H 340          198 14248     340
 2092                B     LCAAAA             * JUMP BACK TO CALLER                 4 10142  B J4O              198 10146
 2093         LCAAAA NOP                      * RETURN                              1 10146  N                  198
 2094                MA    LZDAAA,X2          * RESERVE 3 BYTES OF SPACE ON STA     7 10147  # K3E 094          198 14235     094
 2095                MCW   @ @,RF             * CLEAR THE RETURN FLAG               7 10154  M K4B 340          198 14242     340
 2096         * ENDBLOCK [BLOCK LCAAAA:NULL]
 2097         ***************************************
1                                                                                                         PAGE   41
0 SEQ PG LIN  LABEL  OP    OPERANDS                                            SFX CT  LOCN  INSTRUCTION TYPE  CARD A-ADDR  B-ADDR

 2098         *
 2099                LCA   3&X3,X1            * LOAD RETURN ADDRESS TO X1           7 10161  L 0?3 089          198   003+3   089
 2100                B     0&X1               * JUMP BACK TO CALLER                 4 10168  B 0'0              198   000+1
 2101         *
 2102         ***************************************************************************
 2103         * END FUNCTION : GENRAND
 2104         ***************************************************************************
 2105         *
 2106         ***************************************************************************
 2107         * FUNCTION : FUNC
 2108         ***************************************************************************
 2109         LSDAAA SBR   3&X3               * SAVE RETURN ADDRESS IN REGISTER     4 10172  H 0?3              199   003+3
 2110                SW    1&X3               * SET THE WM                          4 10176  , 0?1              199   001+3
 2111                CW    2&X3               * CLEAN WM                            4 10180  ) 0?2              199   002+3
 2112                CW    3&X3               * CLEAN WM                            4 10184  ) 0?3              199   003+3
 2113         *
 2114         ***************************************
 2115         * BEGINBLOCK [BLOCK LTDAAA:NULL]
 2116                LCA   LKHAAA,13&X3       * LOAD INT 111 INTO MEMORY 13&X3      7 10188  L J3F 0A3          199 14136     013+3
 2117                MA    LLHAAA,X2          * RESERVE 13 BYTES OF SPACE ON ST     7 10195  # J4B 094          199 14142     094
 2118         * FUNCTION CALL PRINTF(CONST_STR_LITERAL-8, A2)
 2119         * PUSH (5)
 2120                MA    LDEAAA,X2          * ADD 5 TO X2                         7 10202  # !5? 094          199 14050     094
 2121         * PARAMETER VARIABLE (A2 : 15997+X3)
 2122         * PUSH (15997+X3:5)
 2123                MA    LDEAAA,X2          * ADD 5 TO X2                         7 10209  # !5? 094          200 14050     094
 2124                LCA   15997&X3,0&X2      * LOAD DATA 15997&X3 INTO STACK       7 10216  L IIG 0!0          200 15997+3   000+2
 2125         * STATIC ARRAY (CONST_STR_LITERAL-8:CHAR [7])
 2126         * PUSH (LMHAAA:3)
 2127                MA    LWDAAA,X2          * ADD 3 TO X2                         7 10223  # K1B 094          200 14212     094
 2128                LCA   LMHAAA,0&X2        * LOAD DATA 03/ INTO STACK            7 10230  L J4H 0!0          200 14148     000+2
 2129         * PUSH (X3:3)
 2130                MA    LWDAAA,X2          * ADD 3 TO X2                         7 10237  # K1B 094          200 14212     094
 2131                LCA   X3,0&X2            * LOAD DATA X3 INTO STACK             7 10244  L 099 0!0          201   099     000+2
 2132                MCW   X2,X3              * COPY X2 INTO X3                     7 10251  M 094 099          201   094     099
 2133                B     LPCAAA             * JUMP TO FUNCTION PRINTF             4 10258  B 85Y              201  4858
 2134         * POP (X3:3)
 2135                LCA   0&X2,X3            * LOAD DATA IN STACK INTO MEMORY      7 10262  L 0!0 099          201   000+2   099
 2136                MA    LZDAAA,X2          * ADD -3 TO X2                        7 10269  # K3E 094          201 14235     094
 2137         * POP (3)
 2138                MA    LZDAAA,X2          * ADD -3 TO X2                        7 10276  # K3E 094          201 14235     094
 2139         * POP (5)
 2140                MA    LFEAAA,X2          * ADD -5 TO X2                        7 10283  # !6H 094          202 14068     094
 2141         * POP (5)
 2142                MA    LFEAAA,X2          * ADD -5 TO X2                        7 10290  # !6H 094          202 14068     094
 2143         * FUNCTION CALL PRINTF(CONST_STR_LITERAL-9, B2)
 2144         * PUSH (5)
 2145                MA    LDEAAA,X2          * ADD 5 TO X2                         7 10297  # !5? 094          202 14050     094
 2146         * PARAMETER VARIABLE (B2 : 15992+X3)
 2147         * PUSH (15992+X3:5)
1                                                                                                         PAGE   42
0 SEQ PG LIN  LABEL  OP    OPERANDS                                            SFX CT  LOCN  INSTRUCTION TYPE  CARD A-ADDR  B-ADDR

 2148                MA    LDEAAA,X2          * ADD 5 TO X2                         7 10304  # !5? 094          202 14050     094
 2149                LCA   15992&X3,0&X2      * LOAD DATA 15992&X3 INTO STACK       7 10311  L IIB 0!0          202 15992+3   000+2
 2150         * STATIC ARRAY (CONST_STR_LITERAL-9:CHAR [7])
 2151         * PUSH (LNHAAA:3)
 2152                MA    LWDAAA,X2          * ADD 3 TO X2                         7 10318  # K1B 094          203 14212     094
 2153                LCA   LNHAAA,0&X2        * LOAD DATA 03Y INTO STACK            7 10325  L J5F 0!0          203 14156     000+2
 2154         * PUSH (X3:3)
 2155                MA    LWDAAA,X2          * ADD 3 TO X2                         7 10332  # K1B 094          203 14212     094
 2156                LCA   X3,0&X2            * LOAD DATA X3 INTO STACK             7 10339  L 099 0!0          203   099     000+2
 2157                MCW   X2,X3              * COPY X2 INTO X3                     7 10346  M 094 099          203   094     099
 2158                B     LPCAAA             * JUMP TO FUNCTION PRINTF             4 10353  B 85Y              203  4858
 2159         * POP (X3:3)
 2160                LCA   0&X2,X3            * LOAD DATA IN STACK INTO MEMORY      7 10357  L 0!0 099          204   000+2   099
 2161                MA    LZDAAA,X2          * ADD -3 TO X2                        7 10364  # K3E 094          204 14235     094
 2162         * POP (3)
 2163                MA    LZDAAA,X2          * ADD -3 TO X2                        7 10371  # K3E 094          204 14235     094
 2164         * POP (5)
 2165                MA    LFEAAA,X2          * ADD -5 TO X2                        7 10378  # !6H 094          204 14068     094
 2166         * POP (5)
 2167                MA    LFEAAA,X2          * ADD -5 TO X2                        7 10385  # !6H 094          204 14068     094
 2168         * ASSIGNMENT (D = (A2 + B2))
 2169         * ADDITION (A2 + B2)
 2170         * PARAMETER VARIABLE (A2 : 15997+X3)
 2171         * PUSH (15997+X3:5)
 2172                MA    LDEAAA,X2          * ADD 5 TO X2                         7 10392  # !5? 094          205 14050     094
 2173                LCA   15997&X3,0&X2      * LOAD DATA 15997&X3 INTO STACK       7 10399  L IIG 0!0          205 15997+3   000+2
 2174         * PARAMETER VARIABLE (B2 : 15992+X3)
 2175         * PUSH (15992+X3:5)
 2176                MA    LDEAAA,X2          * ADD 5 TO X2                         7 10406  # !5? 094          205 14050     094
 2177                LCA   15992&X3,0&X2      * LOAD DATA 15992&X3 INTO STACK       7 10413  L IIB 0!0          205 15992+3   000+2
 2178                A     0&X2,15995&X2      * ADD                                 7 10420  A 0!0 IRE          205   000+2 15995+2
 2179         * POP (5)
 2180                MA    LFEAAA,X2          * ADD -5 TO X2                        7 10427  # !6H 094          206 14068     094
 2181         * PUSH (LDHAAA:3)
 2182                MA    LWDAAA,X2          * ADD 3 TO X2                         7 10434  # K1B 094          206 14212     094
 2183                LCA   LDHAAA,0&X2        * LOAD DATA 008 INTO STACK            7 10441  L !5C 0!0          206 14053     000+2
 2184                MA    X3,0&X2                                                  7 10448  # 099 0!0          206   099     000+2
 2185         * POP (X1:3)
 2186                LCA   0&X2,X1            * LOAD DATA IN STACK INTO MEMORY      7 10455  L 0!0 089          206   000+2   089
 2187                MA    LZDAAA,X2          * ADD -3 TO X2                        7 10462  # K3E 094          207 14235     094
 2188         * POP (0+X1:5)
 2189                LCA   0&X2,0&X1          * LOAD DATA IN STACK INTO MEMORY      7 10469  L 0!0 0'0          207   000+2   000+1
 2190                MA    LFEAAA,X2          * ADD -5 TO X2                        7 10476  # !6H 094          207 14068     094
 2191         * END ASSIGNMENT (D = (A2 + B2))
 2192         * FUNCTION CALL PRINTF(CONST_STR_LITERAL-10, D)
 2193         * PUSH (5)
 2194                MA    LDEAAA,X2          * ADD 5 TO X2                         7 10483  # !5? 094          207 14050     094
 2195         * LOCAL VARIABLE (D : 8+X3)
 2196         * PUSH (8+X3:5)
 2197                MA    LDEAAA,X2          * ADD 5 TO X2                         7 10490  # !5? 094          207 14050     094
1                                                                                                         PAGE   43
0 SEQ PG LIN  LABEL  OP    OPERANDS                                            SFX CT  LOCN  INSTRUCTION TYPE  CARD A-ADDR  B-ADDR

 2198                LCA   8&X3,0&X2          * LOAD DATA 8&X3 INTO STACK           7 10497  L 0?8 0!0          208   008+3   000+2
 2199         * STATIC ARRAY (CONST_STR_LITERAL-10:CHAR [6])
 2200         * PUSH (LOHAAA:3)
 2201                MA    LWDAAA,X2          * ADD 3 TO X2                         7 10504  # K1B 094          208 14212     094
 2202                LCA   LOHAAA,0&X2        * LOAD DATA 04V INTO STACK            7 10511  L J6E 0!0          208 14165     000+2
 2203         * PUSH (X3:3)
 2204                MA    LWDAAA,X2          * ADD 3 TO X2                         7 10518  # K1B 094          208 14212     094
 2205                LCA   X3,0&X2            * LOAD DATA X3 INTO STACK             7 10525  L 099 0!0          208   099     000+2
 2206                MCW   X2,X3              * COPY X2 INTO X3                     7 10532  M 094 099          209   094     099
 2207                B     LPCAAA             * JUMP TO FUNCTION PRINTF             4 10539  B 85Y              209  4858
 2208         * POP (X3:3)
 2209                LCA   0&X2,X3            * LOAD DATA IN STACK INTO MEMORY      7 10543  L 0!0 099          209   000+2   099
 2210                MA    LZDAAA,X2          * ADD -3 TO X2                        7 10550  # K3E 094          209 14235     094
 2211         * POP (3)
 2212                MA    LZDAAA,X2          * ADD -3 TO X2                        7 10557  # K3E 094          209 14235     094
 2213         * POP (5)
 2214                MA    LFEAAA,X2          * ADD -5 TO X2                        7 10564  # !6H 094          209 14068     094
 2215         * POP (5)
 2216                MA    LFEAAA,X2          * ADD -5 TO X2                        7 10571  # !6H 094          210 14068     094
 2217         * FUNCTION CALL PRINTF(CONST_STR_LITERAL-11, F)
 2218         * PUSH (5)
 2219                MA    LDEAAA,X2          * ADD 5 TO X2                         7 10578  # !5? 094          210 14050     094
 2220         * LOCAL VARIABLE (F : 13+X3)
 2221         * PUSH (13+X3:5)
 2222                MA    LDEAAA,X2          * ADD 5 TO X2                         7 10585  # !5? 094          210 14050     094
 2223                LCA   13&X3,0&X2         * LOAD DATA 13&X3 INTO STACK          7 10592  L 0A3 0!0          210   013+3   000+2
 2224         * STATIC ARRAY (CONST_STR_LITERAL-11:CHAR [6])
 2225         * PUSH (LPHAAA:3)
 2226                MA    LWDAAA,X2          * ADD 3 TO X2                         7 10599  # K1B 094          210 14212     094
 2227                LCA   LPHAAA,0&X2        * LOAD DATA 05/ INTO STACK            7 10606  L J7C 0!0          211 14173     000+2
 2228         * PUSH (X3:3)
 2229                MA    LWDAAA,X2          * ADD 3 TO X2                         7 10613  # K1B 094          211 14212     094
 2230                LCA   X3,0&X2            * LOAD DATA X3 INTO STACK             7 10620  L 099 0!0          211   099     000+2
 2231                MCW   X2,X3              * COPY X2 INTO X3                     7 10627  M 094 099          211   094     099
 2232                B     LPCAAA             * JUMP TO FUNCTION PRINTF             4 10634  B 85Y              211  4858
 2233         * POP (X3:3)
 2234                LCA   0&X2,X3            * LOAD DATA IN STACK INTO MEMORY      7 10638  L 0!0 099          211   000+2   099
 2235                MA    LZDAAA,X2          * ADD -3 TO X2                        7 10645  # K3E 094          212 14235     094
 2236         * POP (3)
 2237                MA    LZDAAA,X2          * ADD -3 TO X2                        7 10652  # K3E 094          212 14235     094
 2238         * POP (5)
 2239                MA    LFEAAA,X2          * ADD -5 TO X2                        7 10659  # !6H 094          212 14068     094
 2240         * POP (5)
 2241                MA    LFEAAA,X2          * ADD -5 TO X2                        7 10666  # !6H 094          212 14068     094
 2242         * CONSTANT (0 : LEEAAA)
 2243         * PUSH (LEEAAA:5)
 2244                MA    LDEAAA,X2          * ADD 5 TO X2                         7 10673  # !5? 094          212 14050     094
 2245                LCA   LEEAAA,0&X2        * LOAD DATA 00000 INTO STACK          7 10680  L !6A 0!0          213 14061     000+2
 2246         * POP (15987+X3:5)
 2247                LCA   0&X2,15987&X3      * LOAD DATA IN STACK INTO MEMORY      7 10687  L 0!0 IHG          213   000+2 15987+3
1                                                                                                         PAGE   44
0 SEQ PG LIN  LABEL  OP    OPERANDS                                            SFX CT  LOCN  INSTRUCTION TYPE  CARD A-ADDR  B-ADDR

 2248                MA    LFEAAA,X2          * ADD -5 TO X2                        7 10694  # !6H 094          213 14068     094
 2249         * SET THE RETURN FLAG, SO WE KNOW DO DEALLOCATE OUR STACK
 2250                MCW   @R@,RF             * PUT R INTO LOCATION RF              7 10701  M K4H 340          213 14248     340
 2251                B     LTDAAA             * JUMP BACK TO CALLER                 4 10708  B P1K              213 10712
 2252         LTDAAA NOP                      * RETURN                              1 10712  N                  213
 2253                MA    LQHAAA,X2          * RESERVE 13 BYTES OF SPACE ON ST     7 10713  # J7I 094          214 14179     094
 2254                MCW   @ @,RF             * CLEAR THE RETURN FLAG               7 10720  M K4B 340          214 14242     340
 2255         * ENDBLOCK [BLOCK LTDAAA:NULL]
 2256         ***************************************
 2257         *
 2258                LCA   3&X3,X1            * LOAD RETURN ADDRESS TO X1           7 10727  L 0?3 089          214   003+3   089
 2259                B     0&X1               * JUMP BACK TO CALLER                 4 10734  B 0'0              214   000+1
 2260         *
 2261         ***************************************************************************
 2262         * END FUNCTION : FUNC
 2263         ***************************************************************************
 2264         *
 2265         ***************************************************************************
 2266         * FUNCTION : MAIN
 2267         ***************************************************************************
 2268         LUDAAA SBR   3&X3               * SAVE RETURN ADDRESS IN REGISTER     4 10738  H 0?3              214   003+3
 2269                SW    1&X3               * SET THE WM                          4 10742  , 0?1              214   001+3
 2270                CW    2&X3               * CLEAN WM                            4 10746  ) 0?2              214   002+3
 2271                CW    3&X3               * CLEAN WM                            4 10750  ) 0?3              215   003+3
 2272         *
 2273         ***************************************
 2274         * BEGINBLOCK [BLOCK LVDAAA:NULL]
 2275                LCA   LRHAAA,6&X3        * LOAD *CHAR 4086 INTO MEMORY 6&X     7 10754  L J8F 0?6          215 14186     006+3
 2276                LCA   LCEAAA,11&X3       * LOAD INT 1 INTO MEMORY 11&X3        7 10761  L !3I 0A1          215 14039     011+3
 2277                LCA   LCEAAA,16&X3       * LOAD INT 1 INTO MEMORY 16&X3        7 10768  L !3I 0A6          215 14039     016+3
 2278                LCA   LKHAAA,21&X3       * LOAD INT 111 INTO MEMORY 21&X3      7 10775  L J3F 0B1          215 14136     021+3
 2279                MA    LSHAAA,X2          * RESERVE 21 BYTES OF SPACE ON ST     7 10782  # J9C 094          215 14193     094
 2280         * FUNCTION CALL PRINTF(CONST_STR_LITERAL-15, C3)
 2281         * PUSH (5)
 2282                MA    LDEAAA,X2          * ADD 5 TO X2                         7 10789  # !5? 094          216 14050     094
 2283         * LOCAL VARIABLE (C3 : 6+X3)
 2284         * PUSH (6+X3:3)
 2285                MA    LWDAAA,X2          * ADD 3 TO X2                         7 10796  # K1B 094          216 14212     094
 2286                LCA   6&X3,0&X2          * LOAD DATA 6&X3 INTO STACK           7 10803  L 0?6 0!0          216   006+3   000+2
 2287         * STATIC ARRAY (CONST_STR_LITERAL-15:CHAR [7])
 2288         * PUSH (LTHAAA:3)
 2289                MA    LWDAAA,X2          * ADD 3 TO X2                         7 10810  # K1B 094          216 14212     094
 2290                LCA   LTHAAA,0&X2        * LOAD DATA 09V INTO STACK            7 10817  L J9I 0!0          216 14199     000+2
 2291         * PUSH (X3:3)
 2292                MA    LWDAAA,X2          * ADD 3 TO X2                         7 10824  # K1B 094          217 14212     094
 2293                LCA   X3,0&X2            * LOAD DATA X3 INTO STACK             7 10831  L 099 0!0          217   099     000+2
 2294                MCW   X2,X3              * COPY X2 INTO X3                     7 10838  M 094 099          217   094     099
 2295                B     LPCAAA             * JUMP TO FUNCTION PRINTF             4 10845  B 85Y              217  4858
 2296         * POP (X3:3)
 2297                LCA   0&X2,X3            * LOAD DATA IN STACK INTO MEMORY      7 10849  L 0!0 099          217   000+2   099
1                                                                                                         PAGE   45
0 SEQ PG LIN  LABEL  OP    OPERANDS                                            SFX CT  LOCN  INSTRUCTION TYPE  CARD A-ADDR  B-ADDR

 2298                MA    LZDAAA,X2          * ADD -3 TO X2                        7 10856  # K3E 094          217 14235     094
 2299         * POP (3)
 2300                MA    LZDAAA,X2          * ADD -3 TO X2                        7 10863  # K3E 094          218 14235     094
 2301         * POP (3)
 2302                MA    LZDAAA,X2          * ADD -3 TO X2                        7 10870  # K3E 094          218 14235     094
 2303         * POP (5)
 2304                MA    LFEAAA,X2          * ADD -5 TO X2                        7 10877  # !6H 094          218 14068     094
 2305         * FUNCTION CALL PRINTF(CONST_STR_LITERAL-16, ((INT) C3))
 2306         * PUSH (5)
 2307                MA    LDEAAA,X2          * ADD 5 TO X2                         7 10884  # !5? 094          218 14050     094
 2308         * LOCAL VARIABLE (C3 : 6+X3)
 2309         * PUSH (6+X3:3)
 2310                MA    LWDAAA,X2          * ADD 3 TO X2                         7 10891  # K1B 094          218 14212     094
 2311                LCA   6&X3,0&X2          * LOAD DATA 6&X3 INTO STACK           7 10898  L 0?6 0!0          219   006+3   000+2
 2312         * CAST POINTER(C3) TO NUMBER
 2313                B     LLGAAA             * JUMP TO SNIPPET POINTER_TO_NUMB     4 10905  B Y4A              219 13841
 2314         * STATIC ARRAY (CONST_STR_LITERAL-16:CHAR [7])
 2315         * PUSH (LUHAAA:3)
 2316                MA    LWDAAA,X2          * ADD 3 TO X2                         7 10909  # K1B 094          219 14212     094
 2317                LCA   LUHAAA,0&X2        * LOAD DATA 10S INTO STACK            7 10916  L K0E 0!0          219 14205     000+2
 2318         * PUSH (X3:3)
 2319                MA    LWDAAA,X2          * ADD 3 TO X2                         7 10923  # K1B 094          219 14212     094
 2320                LCA   X3,0&X2            * LOAD DATA X3 INTO STACK             7 10930  L 099 0!0          219   099     000+2
 2321                MCW   X2,X3              * COPY X2 INTO X3                     7 10937  M 094 099          220   094     099
 2322                B     LPCAAA             * JUMP TO FUNCTION PRINTF             4 10944  B 85Y              220  4858
 2323         * POP (X3:3)
 2324                LCA   0&X2,X3            * LOAD DATA IN STACK INTO MEMORY      7 10948  L 0!0 099          220   000+2   099
 2325                MA    LZDAAA,X2          * ADD -3 TO X2                        7 10955  # K3E 094          220 14235     094
 2326         * POP (3)
 2327                MA    LZDAAA,X2          * ADD -3 TO X2                        7 10962  # K3E 094          220 14235     094
 2328         * POP (5)
 2329                MA    LFEAAA,X2          * ADD -5 TO X2                        7 10969  # !6H 094          220 14068     094
 2330         * POP (5)
 2331                MA    LFEAAA,X2          * ADD -5 TO X2                        7 10976  # !6H 094          221 14068     094
 2332         * FUNCTION CALL PRINTF(CONST_STR_LITERAL-17, C)
 2333         * PUSH (5)
 2334                MA    LDEAAA,X2          * ADD 5 TO X2                         7 10983  # !5? 094          221 14050     094
 2335         * STATIC VARIABLE (C : 4064)
 2336         * PUSH (4064:3)
 2337                MA    LWDAAA,X2          * ADD 3 TO X2                         7 10990  # K1B 094          221 14212     094
 2338                LCA   4064,0&X2          * LOAD DATA 4064 INTO STACK           7 10997  L 06U 0!0          221  4064     000+2
 2339         * STATIC ARRAY (CONST_STR_LITERAL-17:CHAR [6])
 2340         * PUSH (LVHAAA:3)
 2341                MA    LWDAAA,X2          * ADD 3 TO X2                         7 11004  # K1B 094          221 14212     094
 2342                LCA   LVHAAA,0&X2        * LOAD DATA 10Z INTO STACK            7 11011  L K0I 0!0          222 14209     000+2
 2343         * PUSH (X3:3)
 2344                MA    LWDAAA,X2          * ADD 3 TO X2                         7 11018  # K1B 094          222 14212     094
 2345                LCA   X3,0&X2            * LOAD DATA X3 INTO STACK             7 11025  L 099 0!0          222   099     000+2
 2346                MCW   X2,X3              * COPY X2 INTO X3                     7 11032  M 094 099          222   094     099
 2347                B     LPCAAA             * JUMP TO FUNCTION PRINTF             4 11039  B 85Y              222  4858
1                                                                                                         PAGE   46
0 SEQ PG LIN  LABEL  OP    OPERANDS                                            SFX CT  LOCN  INSTRUCTION TYPE  CARD A-ADDR  B-ADDR

 2348         * POP (X3:3)
 2349                LCA   0&X2,X3            * LOAD DATA IN STACK INTO MEMORY      7 11043  L 0!0 099          222   000+2   099
 2350                MA    LZDAAA,X2          * ADD -3 TO X2                        7 11050  # K3E 094          223 14235     094
 2351         * POP (3)
 2352                MA    LZDAAA,X2          * ADD -3 TO X2                        7 11057  # K3E 094          223 14235     094
 2353         * POP (3)
 2354                MA    LZDAAA,X2          * ADD -3 TO X2                        7 11064  # K3E 094          223 14235     094
 2355         * POP (5)
 2356                MA    LFEAAA,X2          * ADD -5 TO X2                        7 11071  # !6H 094          223 14068     094
 2357         * FUNCTION CALL PRINTF(CONST_STR_LITERAL-18, ((INT) C))
 2358         * PUSH (5)
 2359                MA    LDEAAA,X2          * ADD 5 TO X2                         7 11078  # !5? 094          223 14050     094
 2360         * STATIC VARIABLE (C : 4064)
 2361         * PUSH (4064:3)
 2362                MA    LWDAAA,X2          * ADD 3 TO X2                         7 11085  # K1B 094          224 14212     094
 2363                LCA   4064,0&X2          * LOAD DATA 4064 INTO STACK           7 11092  L 06U 0!0          224  4064     000+2
 2364         * CAST POINTER(C) TO NUMBER
 2365                B     LLGAAA             * JUMP TO SNIPPET POINTER_TO_NUMB     4 11099  B Y4A              224 13841
 2366         * STATIC ARRAY (CONST_STR_LITERAL-18:CHAR [6])
 2367         * PUSH (LWHAAA:3)
 2368                MA    LWDAAA,X2          * ADD 3 TO X2                         7 11103  # K1B 094          224 14212     094
 2369                LCA   LWHAAA,0&X2        * LOAD DATA 11V INTO STACK            7 11110  L K1F 0!0          224 14216     000+2
 2370         * PUSH (X3:3)
 2371                MA    LWDAAA,X2          * ADD 3 TO X2                         7 11117  # K1B 094          224 14212     094
 2372                LCA   X3,0&X2            * LOAD DATA X3 INTO STACK             7 11124  L 099 0!0          225   099     000+2
 2373                MCW   X2,X3              * COPY X2 INTO X3                     7 11131  M 094 099          225   094     099
 2374                B     LPCAAA             * JUMP TO FUNCTION PRINTF             4 11138  B 85Y              225  4858
 2375         * POP (X3:3)
 2376                LCA   0&X2,X3            * LOAD DATA IN STACK INTO MEMORY      7 11142  L 0!0 099          225   000+2   099
 2377                MA    LZDAAA,X2          * ADD -3 TO X2                        7 11149  # K3E 094          225 14235     094
 2378         * POP (3)
 2379                MA    LZDAAA,X2          * ADD -3 TO X2                        7 11156  # K3E 094          225 14235     094
 2380         * POP (5)
 2381                MA    LFEAAA,X2          * ADD -5 TO X2                        7 11163  # !6H 094          226 14068     094
 2382         * POP (5)
 2383                MA    LFEAAA,X2          * ADD -5 TO X2                        7 11170  # !6H 094          226 14068     094
 2384         * FUNCTION CALL PRINTF(CONST_STR_LITERAL-19, C2)
 2385         * PUSH (5)
 2386                MA    LDEAAA,X2          * ADD 5 TO X2                         7 11177  # !5? 094          226 14050     094
 2387         * STATIC VARIABLE (C2 : 4076)
 2388         * PUSH (4076:3)
 2389                MA    LWDAAA,X2          * ADD 3 TO X2                         7 11184  # K1B 094          226 14212     094
 2390                LCA   4076,0&X2          * LOAD DATA 4076 INTO STACK           7 11191  L 07W 0!0          226  4076     000+2
 2391         * STATIC ARRAY (CONST_STR_LITERAL-19:CHAR [7])
 2392         * PUSH (LXHAAA:3)
 2393                MA    LWDAAA,X2          * ADD 3 TO X2                         7 11198  # K1B 094          227 14212     094
 2394                LCA   LXHAAA,0&X2        * LOAD DATA 12/ INTO STACK            7 11205  L K2E 0!0          227 14225     000+2
 2395         * PUSH (X3:3)
 2396                MA    LWDAAA,X2          * ADD 3 TO X2                         7 11212  # K1B 094          227 14212     094
 2397                LCA   X3,0&X2            * LOAD DATA X3 INTO STACK             7 11219  L 099 0!0          227   099     000+2
1                                                                                                         PAGE   47
0 SEQ PG LIN  LABEL  OP    OPERANDS                                            SFX CT  LOCN  INSTRUCTION TYPE  CARD A-ADDR  B-ADDR

 2398                MCW   X2,X3              * COPY X2 INTO X3                     7 11226  M 094 099          227   094     099
 2399                B     LPCAAA             * JUMP TO FUNCTION PRINTF             4 11233  B 85Y              227  4858
 2400         * POP (X3:3)
 2401                LCA   0&X2,X3            * LOAD DATA IN STACK INTO MEMORY      7 11237  L 0!0 099          228   000+2   099
 2402                MA    LZDAAA,X2          * ADD -3 TO X2                        7 11244  # K3E 094          228 14235     094
 2403         * POP (3)
 2404                MA    LZDAAA,X2          * ADD -3 TO X2                        7 11251  # K3E 094          228 14235     094
 2405         * POP (3)
 2406                MA    LZDAAA,X2          * ADD -3 TO X2                        7 11258  # K3E 094          228 14235     094
 2407         * POP (5)
 2408                MA    LFEAAA,X2          * ADD -5 TO X2                        7 11265  # !6H 094          228 14068     094
 2409         * FUNCTION CALL PRINTF(CONST_STR_LITERAL-20, ((INT) C2))
 2410         * PUSH (5)
 2411                MA    LDEAAA,X2          * ADD 5 TO X2                         7 11272  # !5? 094          229 14050     094
 2412         * STATIC VARIABLE (C2 : 4076)
 2413         * PUSH (4076:3)
 2414                MA    LWDAAA,X2          * ADD 3 TO X2                         7 11279  # K1B 094          229 14212     094
 2415                LCA   4076,0&X2          * LOAD DATA 4076 INTO STACK           7 11286  L 07W 0!0          229  4076     000+2
 2416         * CAST POINTER(C2) TO NUMBER
 2417                B     LLGAAA             * JUMP TO SNIPPET POINTER_TO_NUMB     4 11293  B Y4A              229 13841
 2418         * STATIC ARRAY (CONST_STR_LITERAL-20:CHAR [7])
 2419         * PUSH (LYHAAA:3)
 2420                MA    LWDAAA,X2          * ADD 3 TO X2                         7 11297  # K1B 094          229 14212     094
 2421                LCA   LYHAAA,0&X2        * LOAD DATA 12Y INTO STACK            7 11304  L K3B 0!0          229 14232     000+2
 2422         * PUSH (X3:3)
 2423                MA    LWDAAA,X2          * ADD 3 TO X2                         7 11311  # K1B 094          230 14212     094
 2424                LCA   X3,0&X2            * LOAD DATA X3 INTO STACK             7 11318  L 099 0!0          230   099     000+2
 2425                MCW   X2,X3              * COPY X2 INTO X3                     7 11325  M 094 099          230   094     099
 2426                B     LPCAAA             * JUMP TO FUNCTION PRINTF             4 11332  B 85Y              230  4858
 2427         * POP (X3:3)
 2428                LCA   0&X2,X3            * LOAD DATA IN STACK INTO MEMORY      7 11336  L 0!0 099          230   000+2   099
 2429                MA    LZDAAA,X2          * ADD -3 TO X2                        7 11343  # K3E 094          230 14235     094
 2430         * POP (3)
 2431                MA    LZDAAA,X2          * ADD -3 TO X2                        7 11350  # K3E 094          231 14235     094
 2432         * POP (5)
 2433                MA    LFEAAA,X2          * ADD -5 TO X2                        7 11357  # !6H 094          231 14068     094
 2434         * POP (5)
 2435                MA    LFEAAA,X2          * ADD -5 TO X2                        7 11364  # !6H 094          231 14068     094
 2436         * ASSIGNMENT ((C[3]) = 'B')
 2437         * CONSTANT ('B' : @B@)
 2438         * PUSH (@B@:1)
 2439                MA    LAEAAA,X2          * ADD 1 TO X2                         7 11371  # !1D 094          231 14014     094
 2440                LCA   @B@,0&X2           * LOAD DATA B INTO STACK              7 11378  L K5A 0!0          231 14251     000+2
 2441         * SUBSCRIPT (C[3])
 2442         * STATIC VARIABLE (C : 4064)
 2443         * PUSH (4064:3)
 2444                MA    LWDAAA,X2          * ADD 3 TO X2                         7 11385  # K1B 094          232 14212     094
 2445                LCA   4064,0&X2          * LOAD DATA 4064 INTO STACK           7 11392  L 06U 0!0          232  4064     000+2
 2446                A     LAIAAA,0&X2        * ADD OFFSET 3 TO POINT ELEMENT 3     7 11399  A !2B 0!0          232 14022     000+2
 2447         * END SUBSCRIPT (C[3])
1                                                                                                         PAGE   48
0 SEQ PG LIN  LABEL  OP    OPERANDS                                            SFX CT  LOCN  INSTRUCTION TYPE  CARD A-ADDR  B-ADDR

 2448         * POP (X1:3)
 2449                LCA   0&X2,X1            * LOAD DATA IN STACK INTO MEMORY      7 11406  L 0!0 089          232   000+2   089
 2450                MA    LZDAAA,X2          * ADD -3 TO X2                        7 11413  # K3E 094          232 14235     094
 2451         * POP (0+X1:1)
 2452                LCA   0&X2,0&X1          * LOAD DATA IN STACK INTO MEMORY      7 11420  L 0!0 0'0          233   000+2   000+1
 2453                MA    LBEAAA,X2          * ADD -1 TO X2                        7 11427  # !2E 094          233 14025     094
 2454         * END ASSIGNMENT ((C[3]) = 'B')
 2455         * FUNCTION CALL PRINTF(CONST_STR_LITERAL-21, C)
 2456         * PUSH (5)
 2457                MA    LDEAAA,X2          * ADD 5 TO X2                         7 11434  # !5? 094          233 14050     094
 2458         * STATIC VARIABLE (C : 4064)
 2459         * PUSH (4064:3)
 2460                MA    LWDAAA,X2          * ADD 3 TO X2                         7 11441  # K1B 094          233 14212     094
 2461                LCA   4064,0&X2          * LOAD DATA 4064 INTO STACK           7 11448  L 06U 0!0          233  4064     000+2
 2462         * STATIC ARRAY (CONST_STR_LITERAL-21:CHAR [6])
 2463         * PUSH (LBIAAA:3)
 2464                MA    LWDAAA,X2          * ADD 3 TO X2                         7 11455  # K1B 094          234 14212     094
 2465                LCA   LBIAAA,0&X2        * LOAD DATA 13V INTO STACK            7 11462  L !3D 0!0          234 14034     000+2
 2466         * PUSH (X3:3)
 2467                MA    LWDAAA,X2          * ADD 3 TO X2                         7 11469  # K1B 094          234 14212     094
 2468                LCA   X3,0&X2            * LOAD DATA X3 INTO STACK             7 11476  L 099 0!0          234   099     000+2
 2469                MCW   X2,X3              * COPY X2 INTO X3                     7 11483  M 094 099          234   094     099
 2470                B     LPCAAA             * JUMP TO FUNCTION PRINTF             4 11490  B 85Y              234  4858
 2471         * POP (X3:3)
 2472                LCA   0&X2,X3            * LOAD DATA IN STACK INTO MEMORY      7 11494  L 0!0 099          235   000+2   099
 2473                MA    LZDAAA,X2          * ADD -3 TO X2                        7 11501  # K3E 094          235 14235     094
 2474         * POP (3)
 2475                MA    LZDAAA,X2          * ADD -3 TO X2                        7 11508  # K3E 094          235 14235     094
 2476         * POP (3)
 2477                MA    LZDAAA,X2          * ADD -3 TO X2                        7 11515  # K3E 094          235 14235     094
 2478         * POP (5)
 2479                MA    LFEAAA,X2          * ADD -5 TO X2                        7 11522  # !6H 094          235 14068     094
 2480         * FUNCTION CALL PRINTF(CONST_STR_LITERAL-22, ((INT) C))
 2481         * PUSH (5)
 2482                MA    LDEAAA,X2          * ADD 5 TO X2                         7 11529  # !5? 094          236 14050     094
 2483         * STATIC VARIABLE (C : 4064)
 2484         * PUSH (4064:3)
 2485                MA    LWDAAA,X2          * ADD 3 TO X2                         7 11536  # K1B 094          236 14212     094
 2486                LCA   4064,0&X2          * LOAD DATA 4064 INTO STACK           7 11543  L 06U 0!0          236  4064     000+2
 2487         * CAST POINTER(C) TO NUMBER
 2488                B     LLGAAA             * JUMP TO SNIPPET POINTER_TO_NUMB     4 11550  B Y4A              236 13841
 2489         * STATIC ARRAY (CONST_STR_LITERAL-22:CHAR [6])
 2490         * PUSH (LCIAAA:3)
 2491                MA    LWDAAA,X2          * ADD 3 TO X2                         7 11554  # K1B 094          236 14212     094
 2492                LCA   LCIAAA,0&X2        * LOAD DATA 14/ INTO STACK            7 11561  L !4G 0!0          236 14047     000+2
 2493         * PUSH (X3:3)
 2494                MA    LWDAAA,X2          * ADD 3 TO X2                         7 11568  # K1B 094          237 14212     094
 2495                LCA   X3,0&X2            * LOAD DATA X3 INTO STACK             7 11575  L 099 0!0          237   099     000+2
 2496                MCW   X2,X3              * COPY X2 INTO X3                     7 11582  M 094 099          237   094     099
 2497                B     LPCAAA             * JUMP TO FUNCTION PRINTF             4 11589  B 85Y              237  4858
1                                                                                                         PAGE   49
0 SEQ PG LIN  LABEL  OP    OPERANDS                                            SFX CT  LOCN  INSTRUCTION TYPE  CARD A-ADDR  B-ADDR

 2498         * POP (X3:3)
 2499                LCA   0&X2,X3            * LOAD DATA IN STACK INTO MEMORY      7 11593  L 0!0 099          237   000+2   099
 2500                MA    LZDAAA,X2          * ADD -3 TO X2                        7 11600  # K3E 094          237 14235     094
 2501         * POP (3)
 2502                MA    LZDAAA,X2          * ADD -3 TO X2                        7 11607  # K3E 094          238 14235     094
 2503         * POP (5)
 2504                MA    LFEAAA,X2          * ADD -5 TO X2                        7 11614  # !6H 094          238 14068     094
 2505         * POP (5)
 2506                MA    LFEAAA,X2          * ADD -5 TO X2                        7 11621  # !6H 094          238 14068     094
 2507         * FUNCTION CALL PRINTF(CONST_STR_LITERAL-23, C2)
 2508         * PUSH (5)
 2509                MA    LDEAAA,X2          * ADD 5 TO X2                         7 11628  # !5? 094          238 14050     094
 2510         * STATIC VARIABLE (C2 : 4076)
 2511         * PUSH (4076:3)
 2512                MA    LWDAAA,X2          * ADD 3 TO X2                         7 11635  # K1B 094          238 14212     094
 2513                LCA   4076,0&X2          * LOAD DATA 4076 INTO STACK           7 11642  L 07W 0!0          239  4076     000+2
 2514         * STATIC ARRAY (CONST_STR_LITERAL-23:CHAR [7])
 2515         * PUSH (LDIAAA:3)
 2516                MA    LWDAAA,X2          * ADD 3 TO X2                         7 11649  # K1B 094          239 14212     094
 2517                LCA   LDIAAA,0&X2        * LOAD DATA 14X INTO STACK            7 11656  L !5F 0!0          239 14056     000+2
 2518         * PUSH (X3:3)
 2519                MA    LWDAAA,X2          * ADD 3 TO X2                         7 11663  # K1B 094          239 14212     094
 2520                LCA   X3,0&X2            * LOAD DATA X3 INTO STACK             7 11670  L 099 0!0          239   099     000+2
 2521                MCW   X2,X3              * COPY X2 INTO X3                     7 11677  M 094 099          240   094     099
 2522                B     LPCAAA             * JUMP TO FUNCTION PRINTF             4 11684  B 85Y              240  4858
 2523         * POP (X3:3)
 2524                LCA   0&X2,X3            * LOAD DATA IN STACK INTO MEMORY      7 11688  L 0!0 099          240   000+2   099
 2525                MA    LZDAAA,X2          * ADD -3 TO X2                        7 11695  # K3E 094          240 14235     094
 2526         * POP (3)
 2527                MA    LZDAAA,X2          * ADD -3 TO X2                        7 11702  # K3E 094          240 14235     094
 2528         * POP (3)
 2529                MA    LZDAAA,X2          * ADD -3 TO X2                        7 11709  # K3E 094          240 14235     094
 2530         * POP (5)
 2531                MA    LFEAAA,X2          * ADD -5 TO X2                        7 11716  # !6H 094          241 14068     094
 2532         * FUNCTION CALL PRINTF(CONST_STR_LITERAL-24, ((INT) C2))
 2533         * PUSH (5)
 2534                MA    LDEAAA,X2          * ADD 5 TO X2                         7 11723  # !5? 094          241 14050     094
 2535         * STATIC VARIABLE (C2 : 4076)
 2536         * PUSH (4076:3)
 2537                MA    LWDAAA,X2          * ADD 3 TO X2                         7 11730  # K1B 094          241 14212     094
 2538                LCA   4076,0&X2          * LOAD DATA 4076 INTO STACK           7 11737  L 07W 0!0          241  4076     000+2
 2539         * CAST POINTER(C2) TO NUMBER
 2540                B     LLGAAA             * JUMP TO SNIPPET POINTER_TO_NUMB     4 11744  B Y4A              241 13841
 2541         * STATIC ARRAY (CONST_STR_LITERAL-24:CHAR [7])
 2542         * PUSH (LEIAAA:3)
 2543                MA    LWDAAA,X2          * ADD 3 TO X2                         7 11748  # K1B 094          241 14212     094
 2544                LCA   LEIAAA,0&X2        * LOAD DATA 15U INTO STACK            7 11755  L !6E 0!0          242 14065     000+2
 2545         * PUSH (X3:3)
 2546                MA    LWDAAA,X2          * ADD 3 TO X2                         7 11762  # K1B 094          242 14212     094
 2547                LCA   X3,0&X2            * LOAD DATA X3 INTO STACK             7 11769  L 099 0!0          242   099     000+2
1                                                                                                         PAGE   50
0 SEQ PG LIN  LABEL  OP    OPERANDS                                            SFX CT  LOCN  INSTRUCTION TYPE  CARD A-ADDR  B-ADDR

 2548                MCW   X2,X3              * COPY X2 INTO X3                     7 11776  M 094 099          242   094     099
 2549                B     LPCAAA             * JUMP TO FUNCTION PRINTF             4 11783  B 85Y              242  4858
 2550         * POP (X3:3)
 2551                LCA   0&X2,X3            * LOAD DATA IN STACK INTO MEMORY      7 11787  L 0!0 099          242   000+2   099
 2552                MA    LZDAAA,X2          * ADD -3 TO X2                        7 11794  # K3E 094          243 14235     094
 2553         * POP (3)
 2554                MA    LZDAAA,X2          * ADD -3 TO X2                        7 11801  # K3E 094          243 14235     094
 2555         * POP (5)
 2556                MA    LFEAAA,X2          * ADD -5 TO X2                        7 11808  # !6H 094          243 14068     094
 2557         * POP (5)
 2558                MA    LFEAAA,X2          * ADD -5 TO X2                        7 11815  # !6H 094          243 14068     094
 2559         * FUNCTION CALL PRINTF(CONST_STR_LITERAL-25, C3)
 2560         * PUSH (5)
 2561                MA    LDEAAA,X2          * ADD 5 TO X2                         7 11822  # !5? 094          243 14050     094
 2562         * LOCAL VARIABLE (C3 : 6+X3)
 2563         * PUSH (6+X3:3)
 2564                MA    LWDAAA,X2          * ADD 3 TO X2                         7 11829  # K1B 094          244 14212     094
 2565                LCA   6&X3,0&X2          * LOAD DATA 6&X3 INTO STACK           7 11836  L 0?6 0!0          244   006+3   000+2
 2566         * STATIC ARRAY (CONST_STR_LITERAL-25:CHAR [7])
 2567         * PUSH (LFIAAA:3)
 2568                MA    LWDAAA,X2          * ADD 3 TO X2                         7 11843  # K1B 094          244 14212     094
 2569                LCA   LFIAAA,0&X2        * LOAD DATA 16/ INTO STACK            7 11850  L !7D 0!0          244 14074     000+2
 2570         * PUSH (X3:3)
 2571                MA    LWDAAA,X2          * ADD 3 TO X2                         7 11857  # K1B 094          244 14212     094
 2572                LCA   X3,0&X2            * LOAD DATA X3 INTO STACK             7 11864  L 099 0!0          245   099     000+2
 2573                MCW   X2,X3              * COPY X2 INTO X3                     7 11871  M 094 099          245   094     099
 2574                B     LPCAAA             * JUMP TO FUNCTION PRINTF             4 11878  B 85Y              245  4858
 2575         * POP (X3:3)
 2576                LCA   0&X2,X3            * LOAD DATA IN STACK INTO MEMORY      7 11882  L 0!0 099          245   000+2   099
 2577                MA    LZDAAA,X2          * ADD -3 TO X2                        7 11889  # K3E 094          245 14235     094
 2578         * POP (3)
 2579                MA    LZDAAA,X2          * ADD -3 TO X2                        7 11896  # K3E 094          245 14235     094
 2580         * POP (3)
 2581                MA    LZDAAA,X2          * ADD -3 TO X2                        7 11903  # K3E 094          246 14235     094
 2582         * POP (5)
 2583                MA    LFEAAA,X2          * ADD -5 TO X2                        7 11910  # !6H 094          246 14068     094
 2584         * FUNCTION CALL PRINTF(CONST_STR_LITERAL-26, ((INT) C3))
 2585         * PUSH (5)
 2586                MA    LDEAAA,X2          * ADD 5 TO X2                         7 11917  # !5? 094          246 14050     094
 2587         * LOCAL VARIABLE (C3 : 6+X3)
 2588         * PUSH (6+X3:3)
 2589                MA    LWDAAA,X2          * ADD 3 TO X2                         7 11924  # K1B 094          246 14212     094
 2590                LCA   6&X3,0&X2          * LOAD DATA 6&X3 INTO STACK           7 11931  L 0?6 0!0          246   006+3   000+2
 2591         * CAST POINTER(C3) TO NUMBER
 2592                B     LLGAAA             * JUMP TO SNIPPET POINTER_TO_NUMB     4 11938  B Y4A              246 13841
 2593         * STATIC ARRAY (CONST_STR_LITERAL-26:CHAR [7])
 2594         * PUSH (LGIAAA:3)
 2595                MA    LWDAAA,X2          * ADD 3 TO X2                         7 11942  # K1B 094          247 14212     094
 2596                LCA   LGIAAA,0&X2        * LOAD DATA 16Y INTO STACK            7 11949  L !8I 0!0          247 14089     000+2
 2597         * PUSH (X3:3)
1                                                                                                         PAGE   51
0 SEQ PG LIN  LABEL  OP    OPERANDS                                            SFX CT  LOCN  INSTRUCTION TYPE  CARD A-ADDR  B-ADDR

 2598                MA    LWDAAA,X2          * ADD 3 TO X2                         7 11956  # K1B 094          247 14212     094
 2599                LCA   X3,0&X2            * LOAD DATA X3 INTO STACK             7 11963  L 099 0!0          247   099     000+2
 2600                MCW   X2,X3              * COPY X2 INTO X3                     7 11970  M 094 099          247   094     099
 2601                B     LPCAAA             * JUMP TO FUNCTION PRINTF             4 11977  B 85Y              247  4858
 2602         * POP (X3:3)
 2603                LCA   0&X2,X3            * LOAD DATA IN STACK INTO MEMORY      7 11981  L 0!0 099          248   000+2   099
 2604                MA    LZDAAA,X2          * ADD -3 TO X2                        7 11988  # K3E 094          248 14235     094
 2605         * POP (3)
 2606                MA    LZDAAA,X2          * ADD -3 TO X2                        7 11995  # K3E 094          248 14235     094
 2607         * POP (5)
 2608                MA    LFEAAA,X2          * ADD -5 TO X2                        7 12002  # !6H 094          248 14068     094
 2609         * POP (5)
 2610                MA    LFEAAA,X2          * ADD -5 TO X2                        7 12009  # !6H 094          248 14068     094
 2611         * FUNCTION CALL PRINTF(CONST_STR_LITERAL-27, X)
 2612         * PUSH (5)
 2613                MA    LDEAAA,X2          * ADD 5 TO X2                         7 12016  # !5? 094          249 14050     094
 2614         * STATIC VARIABLE (X : 4061)
 2615         * PUSH (4061:5)
 2616                MA    LDEAAA,X2          * ADD 5 TO X2                         7 12023  # !5? 094          249 14050     094
 2617                LCA   4061,0&X2          * LOAD DATA 4061 INTO STACK           7 12030  L 06/ 0!0          249  4061     000+2
 2618         * STATIC ARRAY (CONST_STR_LITERAL-27:CHAR [6])
 2619         * PUSH (LHIAAA:3)
 2620                MA    LWDAAA,X2          * ADD 3 TO X2                         7 12037  # K1B 094          249 14212     094
 2621                LCA   LHIAAA,0&X2        * LOAD DATA 17V INTO STACK            7 12044  L J0F 0!0          249 14106     000+2
 2622         * PUSH (X3:3)
 2623                MA    LWDAAA,X2          * ADD 3 TO X2                         7 12051  # K1B 094          250 14212     094
 2624                LCA   X3,0&X2            * LOAD DATA X3 INTO STACK             7 12058  L 099 0!0          250   099     000+2
 2625                MCW   X2,X3              * COPY X2 INTO X3                     7 12065  M 094 099          250   094     099
 2626                B     LPCAAA             * JUMP TO FUNCTION PRINTF             4 12072  B 85Y              250  4858
 2627         * POP (X3:3)
 2628                LCA   0&X2,X3            * LOAD DATA IN STACK INTO MEMORY      7 12076  L 0!0 099          250   000+2   099
 2629                MA    LZDAAA,X2          * ADD -3 TO X2                        7 12083  # K3E 094          250 14235     094
 2630         * POP (3)
 2631                MA    LZDAAA,X2          * ADD -3 TO X2                        7 12090  # K3E 094          251 14235     094
 2632         * POP (5)
 2633                MA    LFEAAA,X2          * ADD -5 TO X2                        7 12097  # !6H 094          251 14068     094
 2634         * POP (5)
 2635                MA    LFEAAA,X2          * ADD -5 TO X2                        7 12104  # !6H 094          251 14068     094
 2636         * FUNCTION CALL PRINTF(CONST_STR_LITERAL-28, E)
 2637         * PUSH (5)
 2638                MA    LDEAAA,X2          * ADD 5 TO X2                         7 12111  # !5? 094          251 14050     094
 2639         * LOCAL VARIABLE (E : 21+X3)
 2640         * PUSH (21+X3:5)
 2641                MA    LDEAAA,X2          * ADD 5 TO X2                         7 12118  # !5? 094          251 14050     094
 2642                LCA   21&X3,0&X2         * LOAD DATA 21&X3 INTO STACK          7 12125  L 0B1 0!0          252   021+3   000+2
 2643         * STATIC ARRAY (CONST_STR_LITERAL-28:CHAR [6])
 2644         * PUSH (LIIAAA:3)
 2645                MA    LWDAAA,X2          * ADD 3 TO X2                         7 12132  # K1B 094          252 14212     094
 2646                LCA   LIIAAA,0&X2        * LOAD DATA 18/ INTO STACK            7 12139  L J1G 0!0          252 14117     000+2
 2647         * PUSH (X3:3)
1                                                                                                         PAGE   52
0 SEQ PG LIN  LABEL  OP    OPERANDS                                            SFX CT  LOCN  INSTRUCTION TYPE  CARD A-ADDR  B-ADDR

 2648                MA    LWDAAA,X2          * ADD 3 TO X2                         7 12146  # K1B 094          252 14212     094
 2649                LCA   X3,0&X2            * LOAD DATA X3 INTO STACK             7 12153  L 099 0!0          252   099     000+2
 2650                MCW   X2,X3              * COPY X2 INTO X3                     7 12160  M 094 099          253   094     099
 2651                B     LPCAAA             * JUMP TO FUNCTION PRINTF             4 12167  B 85Y              253  4858
 2652         * POP (X3:3)
 2653                LCA   0&X2,X3            * LOAD DATA IN STACK INTO MEMORY      7 12171  L 0!0 099          253   000+2   099
 2654                MA    LZDAAA,X2          * ADD -3 TO X2                        7 12178  # K3E 094          253 14235     094
 2655         * POP (3)
 2656                MA    LZDAAA,X2          * ADD -3 TO X2                        7 12185  # K3E 094          253 14235     094
 2657         * POP (5)
 2658                MA    LFEAAA,X2          * ADD -5 TO X2                        7 12192  # !6H 094          253 14068     094
 2659         * POP (5)
 2660                MA    LFEAAA,X2          * ADD -5 TO X2                        7 12199  # !6H 094          254 14068     094
 2661         * ASSIGNMENT (X = 222)
 2662         * CONSTANT (222 : LJIAAA)
 2663         * PUSH (LJIAAA:5)
 2664                MA    LDEAAA,X2          * ADD 5 TO X2                         7 12206  # !5? 094          254 14050     094
 2665                LCA   LJIAAA,0&X2        * LOAD DATA 00222 INTO STACK          7 12213  L J2E 0!0          254 14125     000+2
 2666         * PUSH (LKIAAA:3)
 2667                MA    LWDAAA,X2          * ADD 3 TO X2                         7 12220  # K1B 094          254 14212     094
 2668                LCA   LKIAAA,0&X2        * LOAD DATA 06/ INTO STACK            7 12227  L J3I 0!0          254 14139     000+2
 2669         * POP (X1:3)
 2670                LCA   0&X2,X1            * LOAD DATA IN STACK INTO MEMORY      7 12234  L 0!0 089          255   000+2   089
 2671                MA    LZDAAA,X2          * ADD -3 TO X2                        7 12241  # K3E 094          255 14235     094
 2672         * POP (0+X1:5)
 2673                LCA   0&X2,0&X1          * LOAD DATA IN STACK INTO MEMORY      7 12248  L 0!0 0'0          255   000+2   000+1
 2674                MA    LFEAAA,X2          * ADD -5 TO X2                        7 12255  # !6H 094          255 14068     094
 2675         * END ASSIGNMENT (X = 222)
 2676         * FUNCTION CALL PRINTF(CONST_STR_LITERAL-29, E)
 2677         * PUSH (5)
 2678                MA    LDEAAA,X2          * ADD 5 TO X2                         7 12262  # !5? 094          255 14050     094
 2679         * LOCAL VARIABLE (E : 21+X3)
 2680         * PUSH (21+X3:5)
 2681                MA    LDEAAA,X2          * ADD 5 TO X2                         7 12269  # !5? 094          256 14050     094
 2682                LCA   21&X3,0&X2         * LOAD DATA 21&X3 INTO STACK          7 12276  L 0B1 0!0          256   021+3   000+2
 2683         * STATIC ARRAY (CONST_STR_LITERAL-29:CHAR [6])
 2684         * PUSH (LLIAAA:3)
 2685                MA    LWDAAA,X2          * ADD 3 TO X2                         7 12283  # K1B 094          256 14212     094
 2686                LCA   LLIAAA,0&X2        * LOAD DATA 18X INTO STACK            7 12290  L J4E 0!0          256 14145     000+2
 2687         * PUSH (X3:3)
 2688                MA    LWDAAA,X2          * ADD 3 TO X2                         7 12297  # K1B 094          256 14212     094
 2689                LCA   X3,0&X2            * LOAD DATA X3 INTO STACK             7 12304  L 099 0!0          257   099     000+2
 2690                MCW   X2,X3              * COPY X2 INTO X3                     7 12311  M 094 099          257   094     099
 2691                B     LPCAAA             * JUMP TO FUNCTION PRINTF             4 12318  B 85Y              257  4858
 2692         * POP (X3:3)
 2693                LCA   0&X2,X3            * LOAD DATA IN STACK INTO MEMORY      7 12322  L 0!0 099          257   000+2   099
 2694                MA    LZDAAA,X2          * ADD -3 TO X2                        7 12329  # K3E 094          257 14235     094
 2695         * POP (3)
 2696                MA    LZDAAA,X2          * ADD -3 TO X2                        7 12336  # K3E 094          257 14235     094
 2697         * POP (5)
1                                                                                                         PAGE   53
0 SEQ PG LIN  LABEL  OP    OPERANDS                                            SFX CT  LOCN  INSTRUCTION TYPE  CARD A-ADDR  B-ADDR

 2698                MA    LFEAAA,X2          * ADD -5 TO X2                        7 12343  # !6H 094          258 14068     094
 2699         * POP (5)
 2700                MA    LFEAAA,X2          * ADD -5 TO X2                        7 12350  # !6H 094          258 14068     094
 2701         * FUNCTION CALL PRINTF(CONST_STR_LITERAL-30, X)
 2702         * PUSH (5)
 2703                MA    LDEAAA,X2          * ADD 5 TO X2                         7 12357  # !5? 094          258 14050     094
 2704         * STATIC VARIABLE (X : 4061)
 2705         * PUSH (4061:5)
 2706                MA    LDEAAA,X2          * ADD 5 TO X2                         7 12364  # !5? 094          258 14050     094
 2707                LCA   4061,0&X2          * LOAD DATA 4061 INTO STACK           7 12371  L 06/ 0!0          258  4061     000+2
 2708         * STATIC ARRAY (CONST_STR_LITERAL-30:CHAR [6])
 2709         * PUSH (LMIAAA:3)
 2710                MA    LWDAAA,X2          * ADD 3 TO X2                         7 12378  # K1B 094          259 14212     094
 2711                LCA   LMIAAA,0&X2        * LOAD DATA 19T INTO STACK            7 12385  L J5A 0!0          259 14151     000+2
 2712         * PUSH (X3:3)
 2713                MA    LWDAAA,X2          * ADD 3 TO X2                         7 12392  # K1B 094          259 14212     094
 2714                LCA   X3,0&X2            * LOAD DATA X3 INTO STACK             7 12399  L 099 0!0          259   099     000+2
 2715                MCW   X2,X3              * COPY X2 INTO X3                     7 12406  M 094 099          259   094     099
 2716                B     LPCAAA             * JUMP TO FUNCTION PRINTF             4 12413  B 85Y              259  4858
 2717         * POP (X3:3)
 2718                LCA   0&X2,X3            * LOAD DATA IN STACK INTO MEMORY      7 12417  L 0!0 099          260   000+2   099
 2719                MA    LZDAAA,X2          * ADD -3 TO X2                        7 12424  # K3E 094          260 14235     094
 2720         * POP (3)
 2721                MA    LZDAAA,X2          * ADD -3 TO X2                        7 12431  # K3E 094          260 14235     094
 2722         * POP (5)
 2723                MA    LFEAAA,X2          * ADD -5 TO X2                        7 12438  # !6H 094          260 14068     094
 2724         * POP (5)
 2725                MA    LFEAAA,X2          * ADD -5 TO X2                        7 12445  # !6H 094          260 14068     094
 2726         * FUNCTION CALL PRINTF(CONST_STR_LITERAL-31, A, B)
 2727         * PUSH (5)
 2728                MA    LDEAAA,X2          * ADD 5 TO X2                         7 12452  # !5? 094          261 14050     094
 2729         * LOCAL VARIABLE (B : 16+X3)
 2730         * PUSH (16+X3:5)
 2731                MA    LDEAAA,X2          * ADD 5 TO X2                         7 12459  # !5? 094          261 14050     094
 2732                LCA   16&X3,0&X2         * LOAD DATA 16&X3 INTO STACK          7 12466  L 0A6 0!0          261   016+3   000+2
 2733         * LOCAL VARIABLE (A : 11+X3)
 2734         * PUSH (11+X3:5)
 2735                MA    LDEAAA,X2          * ADD 5 TO X2                         7 12473  # !5? 094          261 14050     094
 2736                LCA   11&X3,0&X2         * LOAD DATA 11&X3 INTO STACK          7 12480  L 0A1 0!0          261   011+3   000+2
 2737         * STATIC ARRAY (CONST_STR_LITERAL-31:CHAR [11])
 2738         * PUSH (LNIAAA:3)
 2739                MA    LWDAAA,X2          * ADD 3 TO X2                         7 12487  # K1B 094          262 14212     094
 2740                LCA   LNIAAA,0&X2        * LOAD DATA 19Z INTO STACK            7 12494  L J5I 0!0          262 14159     000+2
 2741         * PUSH (X3:3)
 2742                MA    LWDAAA,X2          * ADD 3 TO X2                         7 12501  # K1B 094          262 14212     094
 2743                LCA   X3,0&X2            * LOAD DATA X3 INTO STACK             7 12508  L 099 0!0          262   099     000+2
 2744                MCW   X2,X3              * COPY X2 INTO X3                     7 12515  M 094 099          262   094     099
 2745                B     LPCAAA             * JUMP TO FUNCTION PRINTF             4 12522  B 85Y              262  4858
 2746         * POP (X3:3)
 2747                LCA   0&X2,X3            * LOAD DATA IN STACK INTO MEMORY      7 12526  L 0!0 099          263   000+2   099
1                                                                                                         PAGE   54
0 SEQ PG LIN  LABEL  OP    OPERANDS                                            SFX CT  LOCN  INSTRUCTION TYPE  CARD A-ADDR  B-ADDR

 2748                MA    LZDAAA,X2          * ADD -3 TO X2                        7 12533  # K3E 094          263 14235     094
 2749         * POP (3)
 2750                MA    LZDAAA,X2          * ADD -3 TO X2                        7 12540  # K3E 094          263 14235     094
 2751         * POP (5)
 2752                MA    LFEAAA,X2          * ADD -5 TO X2                        7 12547  # !6H 094          263 14068     094
 2753         * POP (5)
 2754                MA    LFEAAA,X2          * ADD -5 TO X2                        7 12554  # !6H 094          263 14068     094
 2755         * POP (5)
 2756                MA    LFEAAA,X2          * ADD -5 TO X2                        7 12561  # !6H 094          264 14068     094
 2757         * ASSIGNMENT (A = 2)
 2758         * CONSTANT (2 : LOIAAA)
 2759         * PUSH (LOIAAA:5)
 2760                MA    LDEAAA,X2          * ADD 5 TO X2                         7 12568  # !5? 094          264 14050     094
 2761                LCA   LOIAAA,0&X2        * LOAD DATA 00002 INTO STACK          7 12575  L J7? 0!0          264 14170     000+2
 2762         * PUSH (LGEAAA:3)
 2763                MA    LWDAAA,X2          * ADD 3 TO X2                         7 12582  # K1B 094          264 14212     094
 2764                LCA   LGEAAA,0&X2        * LOAD DATA 011 INTO STACK            7 12589  L !7G 0!0          264 14077     000+2
 2765                MA    X3,0&X2                                                  7 12596  # 099 0!0          265   099     000+2
 2766         * POP (X1:3)
 2767                LCA   0&X2,X1            * LOAD DATA IN STACK INTO MEMORY      7 12603  L 0!0 089          265   000+2   089
 2768                MA    LZDAAA,X2          * ADD -3 TO X2                        7 12610  # K3E 094          265 14235     094
 2769         * POP (0+X1:5)
 2770                LCA   0&X2,0&X1          * LOAD DATA IN STACK INTO MEMORY      7 12617  L 0!0 0'0          265   000+2   000+1
 2771                MA    LFEAAA,X2          * ADD -5 TO X2                        7 12624  # !6H 094          265 14068     094
 2772         * END ASSIGNMENT (A = 2)
 2773         * FUNCTION CALL PRINTF(CONST_STR_LITERAL-32, A, B)
 2774         * PUSH (5)
 2775                MA    LDEAAA,X2          * ADD 5 TO X2                         7 12631  # !5? 094          266 14050     094
 2776         * LOCAL VARIABLE (B : 16+X3)
 2777         * PUSH (16+X3:5)
 2778                MA    LDEAAA,X2          * ADD 5 TO X2                         7 12638  # !5? 094          266 14050     094
 2779                LCA   16&X3,0&X2         * LOAD DATA 16&X3 INTO STACK          7 12645  L 0A6 0!0          266   016+3   000+2
 2780         * LOCAL VARIABLE (A : 11+X3)
 2781         * PUSH (11+X3:5)
 2782                MA    LDEAAA,X2          * ADD 5 TO X2                         7 12652  # !5? 094          266 14050     094
 2783                LCA   11&X3,0&X2         * LOAD DATA 11&X3 INTO STACK          7 12659  L 0A1 0!0          266   011+3   000+2
 2784         * STATIC ARRAY (CONST_STR_LITERAL-32:CHAR [11])
 2785         * PUSH (LPIAAA:3)
 2786                MA    LWDAAA,X2          * ADD 3 TO X2                         7 12666  # K1B 094          267 14212     094
 2787                LCA   LPIAAA,0&X2        * LOAD DATA 21' INTO STACK            7 12673  L J7F 0!0          267 14176     000+2
 2788         * PUSH (X3:3)
 2789                MA    LWDAAA,X2          * ADD 3 TO X2                         7 12680  # K1B 094          267 14212     094
 2790                LCA   X3,0&X2            * LOAD DATA X3 INTO STACK             7 12687  L 099 0!0          267   099     000+2
 2791                MCW   X2,X3              * COPY X2 INTO X3                     7 12694  M 094 099          267   094     099
 2792                B     LPCAAA             * JUMP TO FUNCTION PRINTF             4 12701  B 85Y              267  4858
 2793         * POP (X3:3)
 2794                LCA   0&X2,X3            * LOAD DATA IN STACK INTO MEMORY      7 12705  L 0!0 099          268   000+2   099
 2795                MA    LZDAAA,X2          * ADD -3 TO X2                        7 12712  # K3E 094          268 14235     094
 2796         * POP (3)
 2797                MA    LZDAAA,X2          * ADD -3 TO X2                        7 12719  # K3E 094          268 14235     094
1                                                                                                         PAGE   55
0 SEQ PG LIN  LABEL  OP    OPERANDS                                            SFX CT  LOCN  INSTRUCTION TYPE  CARD A-ADDR  B-ADDR

 2798         * POP (5)
 2799                MA    LFEAAA,X2          * ADD -5 TO X2                        7 12726  # !6H 094          268 14068     094
 2800         * POP (5)
 2801                MA    LFEAAA,X2          * ADD -5 TO X2                        7 12733  # !6H 094          268 14068     094
 2802         * POP (5)
 2803                MA    LFEAAA,X2          * ADD -5 TO X2                        7 12740  # !6H 094          269 14068     094
 2804         * ASSIGNMENT (B = 3)
 2805         * CONSTANT (3 : LAIAAA)
 2806         * PUSH (LAIAAA:5)
 2807                MA    LDEAAA,X2          * ADD 5 TO X2                         7 12747  # !5? 094          269 14050     094
 2808                LCA   LAIAAA,0&X2        * LOAD DATA 00003 INTO STACK          7 12754  L !2B 0!0          269 14022     000+2
 2809         * PUSH (LQIAAA:3)
 2810                MA    LWDAAA,X2          * ADD 3 TO X2                         7 12761  # K1B 094          269 14212     094
 2811                LCA   LQIAAA,0&X2        * LOAD DATA 016 INTO STACK            7 12768  L J8B 0!0          269 14182     000+2
 2812                MA    X3,0&X2                                                  7 12775  # 099 0!0          270   099     000+2
 2813         * POP (X1:3)
 2814                LCA   0&X2,X1            * LOAD DATA IN STACK INTO MEMORY      7 12782  L 0!0 089          270   000+2   089
 2815                MA    LZDAAA,X2          * ADD -3 TO X2                        7 12789  # K3E 094          270 14235     094
 2816         * POP (0+X1:5)
 2817                LCA   0&X2,0&X1          * LOAD DATA IN STACK INTO MEMORY      7 12796  L 0!0 0'0          270   000+2   000+1
 2818                MA    LFEAAA,X2          * ADD -5 TO X2                        7 12803  # !6H 094          270 14068     094
 2819         * END ASSIGNMENT (B = 3)
 2820         * FUNCTION CALL PRINTF(CONST_STR_LITERAL-33, A, B)
 2821         * PUSH (5)
 2822                MA    LDEAAA,X2          * ADD 5 TO X2                         7 12810  # !5? 094          271 14050     094
 2823         * LOCAL VARIABLE (B : 16+X3)
 2824         * PUSH (16+X3:5)
 2825                MA    LDEAAA,X2          * ADD 5 TO X2                         7 12817  # !5? 094          271 14050     094
 2826                LCA   16&X3,0&X2         * LOAD DATA 16&X3 INTO STACK          7 12824  L 0A6 0!0          271   016+3   000+2
 2827         * LOCAL VARIABLE (A : 11+X3)
 2828         * PUSH (11+X3:5)
 2829                MA    LDEAAA,X2          * ADD 5 TO X2                         7 12831  # !5? 094          271 14050     094
 2830                LCA   11&X3,0&X2         * LOAD DATA 11&X3 INTO STACK          7 12838  L 0A1 0!0          271   011+3   000+2
 2831         * STATIC ARRAY (CONST_STR_LITERAL-33:CHAR [11])
 2832         * PUSH (LRIAAA:3)
 2833                MA    LWDAAA,X2          * ADD 3 TO X2                         7 12845  # K1B 094          272 14212     094
 2834                LCA   LRIAAA,0&X2        * LOAD DATA 22/ INTO STACK            7 12852  L J8I 0!0          272 14189     000+2
 2835         * PUSH (X3:3)
 2836                MA    LWDAAA,X2          * ADD 3 TO X2                         7 12859  # K1B 094          272 14212     094
 2837                LCA   X3,0&X2            * LOAD DATA X3 INTO STACK             7 12866  L 099 0!0          272   099     000+2
 2838                MCW   X2,X3              * COPY X2 INTO X3                     7 12873  M 094 099          272   094     099
 2839                B     LPCAAA             * JUMP TO FUNCTION PRINTF             4 12880  B 85Y              272  4858
 2840         * POP (X3:3)
 2841                LCA   0&X2,X3            * LOAD DATA IN STACK INTO MEMORY      7 12884  L 0!0 099          273   000+2   099
 2842                MA    LZDAAA,X2          * ADD -3 TO X2                        7 12891  # K3E 094          273 14235     094
 2843         * POP (3)
 2844                MA    LZDAAA,X2          * ADD -3 TO X2                        7 12898  # K3E 094          273 14235     094
 2845         * POP (5)
 2846                MA    LFEAAA,X2          * ADD -5 TO X2                        7 12905  # !6H 094          273 14068     094
 2847         * POP (5)
1                                                                                                         PAGE   56
0 SEQ PG LIN  LABEL  OP    OPERANDS                                            SFX CT  LOCN  INSTRUCTION TYPE  CARD A-ADDR  B-ADDR

 2848                MA    LFEAAA,X2          * ADD -5 TO X2                        7 12912  # !6H 094          273 14068     094
 2849         * POP (5)
 2850                MA    LFEAAA,X2          * ADD -5 TO X2                        7 12919  # !6H 094          274 14068     094
 2851         * FUNCTION CALL FUNC(A, B)
 2852         * PUSH (5)
 2853                MA    LDEAAA,X2          * ADD 5 TO X2                         7 12926  # !5? 094          274 14050     094
 2854         * LOCAL VARIABLE (B : 16+X3)
 2855         * PUSH (16+X3:5)
 2856                MA    LDEAAA,X2          * ADD 5 TO X2                         7 12933  # !5? 094          274 14050     094
 2857                LCA   16&X3,0&X2         * LOAD DATA 16&X3 INTO STACK          7 12940  L 0A6 0!0          274   016+3   000+2
 2858         * LOCAL VARIABLE (A : 11+X3)
 2859         * PUSH (11+X3:5)
 2860                MA    LDEAAA,X2          * ADD 5 TO X2                         7 12947  # !5? 094          274 14050     094
 2861                LCA   11&X3,0&X2         * LOAD DATA 11&X3 INTO STACK          7 12954  L 0A1 0!0          275   011+3   000+2
 2862         * PUSH (X3:3)
 2863                MA    LWDAAA,X2          * ADD 3 TO X2                         7 12961  # K1B 094          275 14212     094
 2864                LCA   X3,0&X2            * LOAD DATA X3 INTO STACK             7 12968  L 099 0!0          275   099     000+2
 2865                MCW   X2,X3              * COPY X2 INTO X3                     7 12975  M 094 099          275   094     099
 2866                B     LSDAAA             * JUMP TO FUNCTION FUNC               4 12982  B J7K              275 10172
 2867         * POP (X3:3)
 2868                LCA   0&X2,X3            * LOAD DATA IN STACK INTO MEMORY      7 12986  L 0!0 099          275   000+2   099
 2869                MA    LZDAAA,X2          * ADD -3 TO X2                        7 12993  # K3E 094          276 14235     094
 2870         * POP (5)
 2871                MA    LFEAAA,X2          * ADD -5 TO X2                        7 13000  # !6H 094          276 14068     094
 2872         * POP (5)
 2873                MA    LFEAAA,X2          * ADD -5 TO X2                        7 13007  # !6H 094          276 14068     094
 2874         * POP (5)
 2875                MA    LFEAAA,X2          * ADD -5 TO X2                        7 13014  # !6H 094          276 14068     094
 2876         * FUNCTION CALL PRINTF(CONST_STR_LITERAL-34)
 2877         * PUSH (5)
 2878                MA    LDEAAA,X2          * ADD 5 TO X2                         7 13021  # !5? 094          276 14050     094
 2879         * STATIC ARRAY (CONST_STR_LITERAL-34:CHAR [8])
 2880         * PUSH (LSIAAA:3)
 2881                MA    LWDAAA,X2          * ADD 3 TO X2                         7 13028  # K1B 094          277 14212     094
 2882                LCA   LSIAAA,0&X2        * LOAD DATA 23S INTO STACK            7 13035  L J9F 0!0          277 14196     000+2
 2883         * PUSH (X3:3)
 2884                MA    LWDAAA,X2          * ADD 3 TO X2                         7 13042  # K1B 094          277 14212     094
 2885                LCA   X3,0&X2            * LOAD DATA X3 INTO STACK             7 13049  L 099 0!0          277   099     000+2
 2886                MCW   X2,X3              * COPY X2 INTO X3                     7 13056  M 094 099          277   094     099
 2887                B     LPCAAA             * JUMP TO FUNCTION PRINTF             4 13063  B 85Y              277  4858
 2888         * POP (X3:3)
 2889                LCA   0&X2,X3            * LOAD DATA IN STACK INTO MEMORY      7 13067  L 0!0 099          278   000+2   099
 2890                MA    LZDAAA,X2          * ADD -3 TO X2                        7 13074  # K3E 094          278 14235     094
 2891         * POP (3)
 2892                MA    LZDAAA,X2          * ADD -3 TO X2                        7 13081  # K3E 094          278 14235     094
 2893         * POP (5)
 2894                MA    LFEAAA,X2          * ADD -5 TO X2                        7 13088  # !6H 094          278 14068     094
 2895         LVDAAA NOP                      * RETURN                              1 13095  N                  278
 2896                MA    LTIAAA,X2          * RESERVE 21 BYTES OF SPACE ON ST     7 13096  # K0B 094          278 14202     094
 2897                MCW   @ @,RF             * CLEAR THE RETURN FLAG               7 13103  M K4B 340          279 14242     340
1                                                                                                         PAGE   57
0 SEQ PG LIN  LABEL  OP    OPERANDS                                            SFX CT  LOCN  INSTRUCTION TYPE  CARD A-ADDR  B-ADDR

 2898         * ENDBLOCK [BLOCK LVDAAA:NULL]
 2899         ***************************************
 2900         *
 2901                LCA   3&X3,X1            * LOAD RETURN ADDRESS TO X1           7 13110  L 0?3 089          279   003+3   089
 2902                B     0&X1               * JUMP BACK TO CALLER                 4 13117  B 0'0              279   000+1
 2903         *
 2904         ***************************************************************************
 2905         * END FUNCTION : MAIN
 2906         ***************************************************************************
 2907         *
 2908         ***************************************************************************
 2909         * FUNCTION : STRCPY
 2910         ***************************************************************************
 2911         LJAAAA SBR   3&X3               * SAVE RETURN ADDRESS IN REGISTER     4 13121  H 0?3              279   003+3
 2912                SW    1&X3               * SET THE WM                          4 13125  , 0?1              279   001+3
 2913                CW    2&X3               * CLEAN WM                            4 13129  ) 0?2              279   002+3
 2914                CW    3&X3               * CLEAN WM                            4 13133  ) 0?3              279   003+3
 2915         *
 2916         ***************************************
 2917         * BEGINBLOCK [BLOCK LKAAAA:NULL]
 2918                MA    LWDAAA,X2          * RESERVE 3 BYTES OF SPACE ON STA     7 13137  # K1B 094          280 14212     094
 2919         * WHILE [WHILE ((((*(DEST++)) = (*(SRC++))) != '\0')) [] TOP:LLAAAA BOTTOM:
 2920         LLAAAA NOP                      * TOP OF THE LOOP                     1 13144  N                  280
 2921         * NOTEQUAL (!=) (((*(DEST++)) = (*(SRC++))) != '\0')
 2922         * ASSIGNMENT ((*(DEST++)) = (*(SRC++)))
 2923         * DEREFERENCEEXPRESSION (*(SRC++))
 2924         * POSTINCREMENT (SRC++)
 2925         * PUSH (LWIAAA:3)
 2926                MA    LWDAAA,X2          * ADD 3 TO X2                         7 13145  # K1B 094          280 14212     094
 2927                LCA   LWIAAA,0&X2        * LOAD DATA I9D INTO STACK            7 13152  L K1I 0!0          280 14219     000+2
 2928                MA    X3,0&X2                                                  7 13159  # 099 0!0          280   099     000+2
 2929         * POP (X1:3)
 2930                LCA   0&X2,X1            * LOAD DATA IN STACK INTO MEMORY      7 13166  L 0!0 089          280   000+2   089
 2931                MA    LZDAAA,X2          * ADD -3 TO X2                        7 13173  # K3E 094          281 14235     094
 2932         * PUSH (0+X1:3)
 2933                MA    LWDAAA,X2          * ADD 3 TO X2                         7 13180  # K1B 094          281 14212     094
 2934                LCA   0&X1,0&X2          * LOAD DATA 0&X1 INTO STACK           7 13187  L 0'0 0!0          281   000+1   000+2
 2935                MA    LAEAAA,0&X1        * POSTINCREMENT POINTER POINTED B     7 13194  # !1D 0'0          281 14014     000+1
 2936         * POP (X1:3)
 2937                LCA   0&X2,X1            * LOAD DATA IN STACK INTO MEMORY      7 13201  L 0!0 089          281   000+2   089
 2938                MA    LZDAAA,X2          * ADD -3 TO X2                        7 13208  # K3E 094          282 14235     094
 2939         * PUSH (0+X1:1)
 2940                MA    LAEAAA,X2          * ADD 1 TO X2                         7 13215  # !1D 094          282 14014     094
 2941                LCA   0&X1,0&X2          * LOAD DATA 0&X1 INTO STACK           7 13222  L 0'0 0!0          282   000+1   000+2
 2942         * END DEREFERENCEEXPRESSION (*(SRC++))
 2943         * POSTINCREMENT (DEST++)
 2944         * PUSH (LZDAAA:3)
 2945                MA    LWDAAA,X2          * ADD 3 TO X2                         7 13229  # K1B 094          282 14212     094
 2946                LCA   LZDAAA,0&X2        * LOAD DATA I9G INTO STACK            7 13236  L K3E 0!0          282 14235     000+2
 2947                MA    X3,0&X2                                                  7 13243  # 099 0!0          283   099     000+2
1                                                                                                         PAGE   58
0 SEQ PG LIN  LABEL  OP    OPERANDS                                            SFX CT  LOCN  INSTRUCTION TYPE  CARD A-ADDR  B-ADDR

 2948         * POP (X1:3)
 2949                LCA   0&X2,X1            * LOAD DATA IN STACK INTO MEMORY      7 13250  L 0!0 089          283   000+2   089
 2950                MA    LZDAAA,X2          * ADD -3 TO X2                        7 13257  # K3E 094          283 14235     094
 2951         * PUSH (0+X1:3)
 2952                MA    LWDAAA,X2          * ADD 3 TO X2                         7 13264  # K1B 094          283 14212     094
 2953                LCA   0&X1,0&X2          * LOAD DATA 0&X1 INTO STACK           7 13271  L 0'0 0!0          283   000+1   000+2
 2954                MA    LAEAAA,0&X1        * POSTINCREMENT POINTER POINTED B     7 13278  # !1D 0'0          284 14014     000+1
 2955         * POP (X1:3)
 2956                LCA   0&X2,X1            * LOAD DATA IN STACK INTO MEMORY      7 13285  L 0!0 089          284   000+2   089
 2957                MA    LZDAAA,X2          * ADD -3 TO X2                        7 13292  # K3E 094          284 14235     094
 2958                LCA   0&X2,0&X1          * LOAD DATA IN STACK INTO X1          7 13299  L 0!0 0'0          284   000+2   000+1
 2959         * END ASSIGNMENT ((*(DEST++)) = (*(SRC++)))
 2960         * CONSTANT ('\0' : EOS)
 2961         * PUSH (EOS:1)
 2962                MA    LAEAAA,X2          * ADD 1 TO X2                         7 13306  # !1D 094          284 14014     094
 2963                LCA   EOS,0&X2           * LOAD DATA EOS INTO STACK            7 13313  L 345 0!0          285   345     000+2
 2964                C     0&X2,15999&X2      * COMPARE                             7 13320  C 0!0 IRI          285   000+2 15999+2
 2965         * POP (1)
 2966                MA    LBEAAA,X2          * ADD -1 TO X2                        7 13327  # !2E 094          285 14025     094
 2967         * POP (1)
 2968                MA    LBEAAA,X2          * ADD -1 TO X2                        7 13334  # !2E 094          285 14025     094
 2969         * PUSH (LCEAAA:5)
 2970                MA    LDEAAA,X2          * ADD 5 TO X2                         7 13341  # !5? 094          285 14050     094
 2971                LCA   LCEAAA,0&X2        * LOAD DATA 00001 INTO STACK          7 13348  L !3I 0!0          286 14039     000+2
 2972                BE    LUIAAA             * JUMP IF EQUAL                       5 13355  B T6D S            286 13364
 2973                B     LVIAAA             * JUMP TO END                         4 13360  B T7A              286 13371
 2974         LUIAAA MCW   LEEAAA,0&X2        * EQUAL: SET STACK LOCATION TO 0      7 13364  M !6A 0!0          286 14061     000+2
 2975         LVIAAA NOP                      * END OF NOTEQUAL                     1 13371  N                  286
 2976                MCS   0&X2,0&X2          * CLEAR WM                            7 13372  Z 0!0 0!0          286   000+2   000+2
 2977         * POP (5)
 2978                MA    LFEAAA,X2          * ADD -5 TO X2                        7 13379  # !6H 094          286 14068     094
 2979                BCE   LMAAAA,5&X2,       * JUMP TO BOTTOM                      8 13386  B T9H 0!5          287 13398     005+2
 2980                B     LLAAAA             * JUMP TO TOP                         4 13394  B /4D              287 13144
 2981         LMAAAA NOP                      * BOTTOM OF THE WHILE LOOP            1 13398  N                  287
 2982         *
 2983         LKAAAA NOP                      * RETURN                              1 13399  N                  287
 2984                MA    LZDAAA,X2          * RESERVE 3 BYTES OF SPACE ON STA     7 13400  # K3E 094          287 14235     094
 2985                MCW   @ @,RF             * CLEAR THE RETURN FLAG               7 13407  M K4B 340          287 14242     340
 2986         * ENDBLOCK [BLOCK LKAAAA:NULL]
 2987         ***************************************
 2988         *
 2989                LCA   3&X3,X1            * LOAD RETURN ADDRESS TO X1           7 13414  L 0?3 089          287   003+3   089
 2990                B     0&X1               * JUMP BACK TO CALLER                 4 13421  B 0'0              288   000+1
 2991         *
 2992         ***************************************************************************
 2993         * END FUNCTION : STRCPY
 2994         ***************************************************************************
 2995         ****************************************************************
 2996         ** CLEAN NUMBER SNIPPET                                       **
 2997         ****************************************************************
1                                                                                                         PAGE   59
0 SEQ PG LIN  LABEL  OP    OPERANDS                                            SFX CT  LOCN  INSTRUCTION TYPE  CARD A-ADDR  B-ADDR

 2998         *
 2999         * NORMALIZES THE ZONE BITS OF A NUMBER, LEAVING EITHER A=0B=0
 3000         * FOR A POSITIVE OR A=0B=1 FOR A NEGATIVE
 3001         LJFAAA SBR   X1                                                       4 13425  H 089              288   089
 3002         * DO NOTHING ON EITHER NO ZONE BITS OR ONLY A B ZONE BIT
 3003                BWZ   LKFAAA,0&X2,2                                            8 13429  V U5B 0!0 2        288 13452     000+2
 3004                BWZ   LKFAAA,0&X2,K                                            8 13437  V U5B 0!0 K        288 13452     000+2
 3005         * ELSE CLEAR THE ZONE BITS, AS IT IS POSITIVE
 3006                MZ    @ @,0&X2                                                 7 13445  Y K4B 0!0          288 14242     000+2
 3007         LKFAAA B     0&X1                                                     4 13452  B 0'0              288   000+1
 3008         *
 3009         ****************************************************************
 3010         ****************************************************************
 3011         ** DIVISION SNIPPET                                           **
 3012         ****************************************************************
 3013         *
 3014         LSFAAA SBR   LTFAAA&3           * SETUP RETURN ADDRESS                4 13456  H W1A              288 13611
 3015         * POP DIVIDEND
 3016                MCW   0&X2, LUFAAA                                             7 13460  M 0!0 W2A          289   000+2 13621
 3017                SBR   X2, 15995&X2                                             7 13467  H 094 IRE          289   094   15995+2
 3018         *
 3019         * POP DIVISOR
 3020                MCW   0&X2, LVFAAA                                             7 13474  M 0!0 W1F          289   000+2 13616
 3021                SBR   X2, 15995&X2                                             7 13481  H 094 IRE          289   094   15995+2
 3022         *
 3023                B     *&17                                                     4 13488  B V0H              289 13508
 3024         *
 3025                DCW   @00000@                                                  5 13496                     289
 3026                DC    @00000000000@                                           11 13507                     290
 3027         *
 3028                ZA    LUFAAA, *-7         * PUT DIVIDEND INTO WORKING BL       7 13508  ? W2A V0G          290 13621   13507
 3029                D     LVFAAA, *-19        * DIVIDE                             7 13515  % W1F V0B          290 13616   13502
 3030                MZ    *-22, *-21          * KILL THE ZONE BIT                  7 13522  Y V0F V0G          290 13506   13507
 3031                MZ    *-29, *-34          * KILL THE ZONE BIT                  7 13529  Y V0F V0A          290 13506   13501
 3032                MCW   *-41, LWFAAA        * PICK UP ANSWER                     7 13536  M V0A W2F          291 13501   13626
 3033                SW    *-44                * SO I CAN PICKUP REMAINDER          4 13543  , V0B              291 13502
 3034                MCW   *-46, LXFAAA        * GET REMAINDER                      7 13547  M V0G W3A          291 13507   13631
 3035                CW    *-55                * CLEAR THE WM                       4 13554  ) V0B              291 13502
 3036                MZ    LWFAAA-1, LWFAAA    * CLEANUP QUOTIENT BITZONE           7 13558  Y W2E W2F          291 13625   13626
 3037                MZ    LXFAAA-1, LXFAAA    * CLEANUP REMAINDER BITZONE          7 13565  Y W3? W3A          291 13630   13631
 3038         *
 3039         * PUSH REMAINDER
 3040                SBR   X2, 5&X2                                                 7 13572  H 094 0!5          292   094     005+2
 3041                SW    15996&X2                                                 4 13579  , IRF              292 15996+2
 3042                MCW   LXFAAA, 0&X2                                             7 13583  M W3A 0!0          292 13631     000+2
 3043         *
 3044         * PUSH QUOTIENT
 3045                SBR   X2, 5&X2                                                 7 13590  H 094 0!5          292   094     005+2
 3046                SW    15996&X2                                                 4 13597  , IRF              292 15996+2
 3047                MCW   LWFAAA, 0&X2                                             7 13601  M W2F 0!0          292 13626     000+2
1                                                                                                         PAGE   60
0 SEQ PG LIN  LABEL  OP    OPERANDS                                            SFX CT  LOCN  INSTRUCTION TYPE  CARD A-ADDR  B-ADDR

 3048         *
 3049         LTFAAA B     000                 * JUMP BACK                          4 13608  B 000              293   000
 3050         *
 3051         LVFAAA DCW   00000               * DIVISOR                            5 13616                     293
 3052         LUFAAA DCW   00000               * DIVIDEND                           5 13621                     293
 3053         LWFAAA DCW   00000               * QUOTIENT                           5 13626                     293
 3054         LXFAAA DCW   00000               * REMAINDER                          5 13631                     293
 3055         *
 3056         ****************************************************************
 3057         *
 3058         ****************************************************************
 3059         ** CAST NUMBER TO POINTER SNIPPET                             **
 3060         ****************************************************************
 3061         *
 3062         LAGAAA SBR   X1                                                       4 13632  H 089              293   089
 3063         * CASTS A 5-DIGIT NUMBER TO A 3-DIGIT ADDRESS
 3064         * MAKE A COPY OF THE TOP OF THE STACK
 3065                SW    15998&X2                                                 4 13636  , IRH              293 15998+2
 3066                LCA   0&X2,3&X2                                                7 13640  L 0!0 0!3          294   000+2   003+2
 3067                CW    15998&X2                                                 4 13647  ) IRH              294 15998+2
 3068         * ZERO OUT THE ZONE BITS OF OUR COPY
 3069                MZ    @0@,3&X2                                                 7 13651  Y K5? 0!3          294 14250     003+2
 3070                MZ    @0@,2&X2                                                 7 13658  Y K5? 0!2          294 14250     002+2
 3071                MZ    @0@,1&X2                                                 7 13665  Y K5? 0!1          294 14250     001+2
 3072         * SET THE LOW-ORDER DIGIT'S ZONE BITS
 3073                C     @04000@,0&X2                                             7 13672  C K5F 0!0          294 14256     000+2
 3074                BL    LDGAAA                                                   5 13679  B X5H T            295 13758
 3075                C     @08000@,0&X2                                             7 13684  C K6A 0!0          295 14261     000+2
 3076                BL    LCGAAA                                                   5 13691  B X4D T            295 13744
 3077                C     @12000@,0&X2                                             7 13696  C K6F 0!0          295 14266     000+2
 3078                BL    LBGAAA                                                   5 13703  B X2F T            295 13726
 3079                S     @12000@,0&X2                                             7 13708  S K7A 0!0          295 14271     000+2
 3080                MZ    @A@,3&X2                                                 7 13715  Y K7B 0!3          296 14272     003+2
 3081                B     LDGAAA                                                   4 13722  B X5H              296 13758
 3082         LBGAAA S     @08000@,0&X2                                             7 13726  S K7G 0!0          296 14277     000+2
 3083                MZ    @I@,3&X2                                                 7 13733  Y K7H 0!3          296 14278     003+2
 3084                B     LDGAAA                                                   4 13740  B X5H              296 13758
 3085         LCGAAA S     @04000@,0&X2                                             7 13744  S K8C 0!0          296 14283     000+2
 3086                MZ    @S@,3&X2                                                 7 13751  Y K4E 0!3          297 14245     003+2
 3087         * FOR SOME REASON THE ZONE BITS GET SET - IT STILL WORKS THOUGH.
 3088         LDGAAA C     @01000@,0&X2                                             7 13758  C K8H 0!0          297 14288     000+2
 3089                BL    LGGAAA                                                   5 13765  B Y2C T            297 13823
 3090                C     @02000@,0&X2                                             7 13770  C K9C 0!0          297 14293     000+2
 3091                BL    LFGAAA                                                   5 13777  B Y1F T            297 13816
 3092                C     @03000@,0&X2                                             7 13782  C K9H 0!0          297 14298     000+2
 3093                BL    LEGAAA                                                   5 13789  B Y0E T            298 13805
 3094                MZ    @A@,1&X2                                                 7 13794  Y K7B 0!1          298 14272     001+2
 3095                B     LGGAAA                                                   4 13801  B Y2C              298 13823
 3096         LEGAAA MZ    @I@,1&X2                                                 7 13805  Y K7H 0!1          298 14278     001+2
 3097                B     LGGAAA                                                   4 13812  B Y2C              298 13823
1                                                                                                         PAGE   61
0 SEQ PG LIN  LABEL  OP    OPERANDS                                            SFX CT  LOCN  INSTRUCTION TYPE  CARD A-ADDR  B-ADDR

 3098         LFGAAA MZ    @S@,1&X2                                                 7 13816  Y K4E 0!1          298 14245     001+2
 3099         LGGAAA LCA   3&X2,15998&X2                                            7 13823  L 0!3 IRH          299   003+2 15998+2
 3100                SBR   X2,15998&X2                                              7 13830  H 094 IRH          299   094   15998+2
 3101                B     0&X1                                                     4 13837  B 0'0              299   000+1
 3102         *
 3103         ****************************************************************
 3104         *
 3105         ****************************************************************
 3106         ** CAST POINTER TO NUMBER SNIPPET                             **
 3107         ****************************************************************
 3108         *
 3109         LLGAAA SBR   X1                                                       4 13841  H 089              299   089
 3110         * CASTS A 3-DIGIT ADDRESS TO A 5-DIGIT NUMBER
 3111         * MAKE ROOM ON THE STACK FOR AN INT
 3112                MA    @002@,X2                                                 7 13845  # L0A 094          299 14301     094
 3113         * MAKE A COPY OF THE TOP OF THE STACK
 3114                LCA   15998&X2,3&X2                                            7 13852  L IRH 0!3          299 15998+2   003+2
 3115         * NOW ZERO OUT THE TOP OF THE STACK
 3116                LCA   @00000@,0&X2                                             7 13859  L L0F 0!0          300 14306     000+2
 3117         * NOW COPY BACK, SHIFTED OVER 2 DIGITS
 3118                MCW   3&X2,0&X2                                                7 13866  M 0!3 0!0          300   003+2   000+2
 3119         * NOW ZERO OUT THE ZONE BITS ON THE STACK
 3120                MZ    @0@,0&X2                                                 7 13873  Y K5? 0!0          300 14250     000+2
 3121                MZ    @0@,15999&X2                                             7 13880  Y K5? IRI          300 14250   15999+2
 3122                MZ    @0@,15998&X2                                             7 13887  Y K5? IRH          300 14250   15998+2
 3123         * CHECK THE HIGH-ORDER DIGIT'S ZONE BITS
 3124                BWZ   LMGAAA,1&X2,S                                            8 13894  V Z2B 0!1 S        301 13922     001+2
 3125                BWZ   LNGAAA,1&X2,K                                            8 13902  V Z3C 0!1 K        301 13933     001+2
 3126                BWZ   LOGAAA,1&X2,B                                            8 13910  V Z4D 0!1 B        301 13944     001+2
 3127                B     LPGAAA                                                   4 13918  B Z5A              301 13951
 3128         LMGAAA A     @01000@,0&X2                                             7 13922  A L1A 0!0          301 14311     000+2
 3129                B     LPGAAA                                                   4 13929  B Z5A              301 13951
 3130         LNGAAA A     @02000@,0&X2                                             7 13933  A L1F 0!0          302 14316     000+2
 3131                B     LPGAAA                                                   4 13940  B Z5A              302 13951
 3132         LOGAAA A     @03000@,0&X2                                             7 13944  A L2A 0!0          302 14321     000+2
 3133         LPGAAA BWZ   LQGAAA,3&X2,S                                            8 13951  V Z7I 0!3 S        302 13979     003+2
 3134                BWZ   LRGAAA,3&X2,K                                            8 13959  V Z9? 0!3 K        302 13990     003+2
 3135                BWZ   LSGAAA,3&X2,B                                            8 13967  V !0A 0!3 B        303 14001     003+2
 3136                B     LTGAAA                                                   4 13975  B !0H              303 14008
 3137         LQGAAA A     @04000@,0&X2                                             7 13979  A L2F 0!0          303 14326     000+2
 3138                B     LTGAAA                                                   4 13986  B !0H              303 14008
 3139         LRGAAA A     @08000@,0&X2                                             7 13990  A L3A 0!0          303 14331     000+2
 3140                B     LTGAAA                                                   4 13997  B !0H              303 14008
 3141         LSGAAA A     @12000@,0&X2                                             7 14001  A L3F 0!0          304 14336     000+2
 3142         LTGAAA B     0&X1                                                     4 14008  B 0'0              304   000+1
 3143         *
 3144         ****************************************************************
 3145         *
 3146         LAEAAA DCW   @001@              * POINTER 0                           3 14014                     304
 3147         LAFAAA DCW   @012@              * POINTER 0                           3 14017                     304
1                                                                                                         PAGE   62
0 SEQ PG LIN  LABEL  OP    OPERANDS                                            SFX CT  LOCN  INSTRUCTION TYPE  CARD A-ADDR  B-ADDR

 3148         LAIAAA DCW   @00003@            * VALUE 00003                         5 14022                     304
 3149         LBEAAA DCW   @I9I@              * POINTER 0                           3 14025                     304
 3150         LBFAAA DCW   @I9C@              * POINTER 0                           3 14028                     304
 3151         LBHAAA DCW   @333@              * POINTER 0                           3 14031                     305
 3152         LBIAAA DCW   @13V@              * POINTER 0                           3 14034                     305
 3153         LCEAAA DCW   @00001@            * VALUE 00001                         5 14039                     305
 3154         LCHAAA DCW   @0000J@            * VALUE 0000J                         5 14044                     305
 3155         LCIAAA DCW   @14/@              * POINTER 0                           3 14047                     305
 3156         LDEAAA DCW   @005@              * POINTER 0                           3 14050                     305
 3157         LDHAAA DCW   @008@              * POINTER 0                           3 14053                     305
 3158         LDIAAA DCW   @14X@              * POINTER 0                           3 14056                     306
 3159         LEEAAA DCW   @00000@            * VALUE 00000                         5 14061                     306
 3160         LEFAAA DCW   @P@                * VALUE P                             1 14062                     306
 3161         LEIAAA DCW   @15U@              * POINTER 0                           3 14065                     306
 3162         LFEAAA DCW   @I9E@              * POINTER 0                           3 14068                     306
 3163         LFFAAA DCW   @010@              * POINTER 0                           3 14071                     306
 3164         LFIAAA DCW   @16/@              * POINTER 0                           3 14074                     306
 3165         LGEAAA DCW   @011@              * POINTER 0                           3 14077                     307
 3166         LGFAAA DCW   @I8I@              * POINTER 0                           3 14080                     307
 3167         LGHAAA DCW   @100000@           * VALUE 100000                        6 14086                     307
 3168         LGIAAA DCW   @16Y@              * POINTER 0                           3 14089                     307
 3169         LHEAAA DCW   @006@              * POINTER 0                           3 14092                     307
 3170         LHFAAA DCW   @00V@              * POINTER 0                           3 14095                     307
 3171         LHGAAA DCW   @I8F@              * POINTER 0                           3 14098                     307
 3172         LHHAAA DCW   @00042@            * VALUE 00042                         5 14103                     308
 3173         LHIAAA DCW   @17V@              * POINTER 0                           3 14106                     308
 3174         LIFAAA DCW   @014@              * POINTER 0                           3 14109                     308
 3175         LIHAAA DCW   @00019@            * VALUE 00019                         5 14114                     308
 3176         LIIAAA DCW   @18/@              * POINTER 0                           3 14117                     308
 3177         LJHAAA DCW   @00U@              * POINTER 0                           3 14120                     308
 3178         LJIAAA DCW   @00222@            * VALUE 00222                         5 14125                     308
 3179         LKEAAA DCW   @007@              * POINTER 0                           3 14128                     309
 3180         LKGAAA DCW   @02U@              * POINTER 0                           3 14131                     309
 3181         LKHAAA DCW   @00111@            * VALUE 00111                         5 14136                     309
 3182         LKIAAA DCW   @06/@              * POINTER 0                           3 14139                     309
 3183         LLHAAA DCW   @013@              * POINTER 0                           3 14142                     309
 3184         LLIAAA DCW   @18X@              * POINTER 0                           3 14145                     309
 3185         LMHAAA DCW   @03/@              * POINTER 0                           3 14148                     309
 3186         LMIAAA DCW   @19T@              * POINTER 0                           3 14151                     310
 3187         LNEAAA DCW   @%@                * VALUE %                             1 14152                     310
 3188         LNFAAA DCW   @-@                * VALUE -                             1 14153                     310
 3189         LNHAAA DCW   @03Y@              * POINTER 0                           3 14156                     310
 3190         LNIAAA DCW   @19Z@              * POINTER 0                           3 14159                     310
 3191         LOFAAA DCW   @I9B@              * POINTER 0                           3 14162                     310
 3192         LOHAAA DCW   @04V@              * POINTER 0                           3 14165                     310
 3193         LOIAAA DCW   @00002@            * VALUE 00002                         5 14170                     311
 3194         LPHAAA DCW   @05/@              * POINTER 0                           3 14173                     311
 3195         LPIAAA DCW   @21'@              * POINTER 0                           3 14176                     311
 3196         LQHAAA DCW   @I8G@              * POINTER 0                           3 14179                     311
 3197         LQIAAA DCW   @016@              * POINTER 0                           3 14182                     311
1                                                                                                         PAGE   63
0 SEQ PG LIN  LABEL  OP    OPERANDS                                            SFX CT  LOCN  INSTRUCTION TYPE  CARD A-ADDR  B-ADDR

 3198         LRFAAA DCW   @0@                * VALUE 0                             1 14183                     311
 3199         LRHAAA DCW   @08W@              * POINTER 0                           3 14186                     311
 3200         LRIAAA DCW   @22/@              * POINTER 0                           3 14189                     312
 3201         LSEAAA DCW   @C@                * VALUE C                             1 14190                     312
 3202         LSHAAA DCW   @021@              * POINTER 0                           3 14193                     312
 3203         LSIAAA DCW   @23S@              * POINTER 0                           3 14196                     312
 3204         LTHAAA DCW   @09V@              * POINTER 0                           3 14199                     312
 3205         LTIAAA DCW   @I7I@              * POINTER 0                           3 14202                     312
 3206         LUHAAA DCW   @10S@              * POINTER 0                           3 14205                     312
 3207         LVEAAA DCW   @S@                * VALUE S                             1 14206                     313
 3208         LVHAAA DCW   @10Z@              * POINTER 0                           3 14209                     313
 3209         LWDAAA DCW   @003@              * POINTER 0                           3 14212                     313
 3210         LWGAAA DCW   @ @                * VALUE                               1 14213                     313
 3211         LWHAAA DCW   @11V@              * POINTER 0                           3 14216                     313
 3212         LWIAAA DCW   @I9D@              * POINTER 0                           3 14219                     313
 3213         LXGAAA DCW   @02X@              * POINTER 0                           3 14222                     313
 3214         LXHAAA DCW   @12/@              * POINTER 0                           3 14225                     314
 3215         LYEAAA DCW   @D@                * VALUE D                             1 14226                     314
 3216         LYGAAA DCW   @201@              * POINTER 0                           3 14229                     314
 3217         LYHAAA DCW   @12Y@              * POINTER 0                           3 14232                     314
 3218         LZDAAA DCW   @I9G@              * POINTER 0                           3 14235                     314
 3219         LZEAAA DCW   @00010@            * VALUE 00010                         5 14240                     314
 3220         LZHAAA DCW   @B@                * VALUE B                             1 14241                     314
 3221         *
                     DCW   @ @                                                      1 14242              LIT    315
                     DCW   @%@                                                      1 14243              LIT    315
                     DCW   @C@                                                      1 14244              LIT    315
                     DCW   @S@                                                      1 14245              LIT    315
                     DCW   @D@                                                      1 14246              LIT    315
                     DCW   @P@                                                      1 14247              LIT    315
                     DCW   @R@                                                      1 14248              LIT    315
                     DCW   @-@                                                      1 14249              LIT    316
                     DCW   @0@                                                      1 14250              LIT    316
                     DCW   @B@                                                      1 14251              LIT    316
                     DCW   @04000@                                                  5 14256              LIT    316
                     DCW   @08000@                                                  5 14261              LIT    316
                     DCW   @12000@                                                  5 14266              LIT    316
                     DCW   @12000@                                                  5 14271              LIT    316
                     DCW   @A@                                                      1 14272              LIT    317
                     DCW   @08000@                                                  5 14277              LIT    317
                     DCW   @I@                                                      1 14278              LIT    317
                     DCW   @04000@                                                  5 14283              LIT    317
                     DCW   @01000@                                                  5 14288              LIT    317
                     DCW   @02000@                                                  5 14293              LIT    317
                     DCW   @03000@                                                  5 14298              LIT    317
                     DCW   @002@                                                    3 14301              LIT    318
                     DCW   @00000@                                                  5 14306              LIT    318
                     DCW   @01000@                                                  5 14311              LIT    318
                     DCW   @02000@                                                  5 14316              LIT    318
                     DCW   @03000@                                                  5 14321              LIT    318
1                                                                                                         PAGE   64
0 SEQ PG LIN  LABEL  OP    OPERANDS                                            SFX CT  LOCN  INSTRUCTION TYPE  CARD A-ADDR  B-ADDR

                     DCW   @04000@                                                  5 14326              LIT    318
                     DCW   @08000@                                                  5 14331              LIT    318
                     DCW   @12000@                                                  5 14336              LIT    319
 3222                END   START              * END OF PROGRAM CODE.                         / 50' 080               4500
1                                                                                                         PAGE   65
0SYMBOL   ADDRESS    SYMBOL   ADDRESS    SYMBOL   ADDRESS    SYMBOL   ADDRESS    SYMBOL   ADDRESS    SYMBOL   ADDRESS

 EOL      0346: 0    EOS      0345: 0    LABAAA   7656: 0    LACAAA   4831: 0    LADAAA   7215: 0    LAEAAA  14014: 0   
 LAFAAA  14017: 0    LAGAAA  13632: 0    LAHAAA   9420: 0    LAIAAA  14022: 0    LBAAAA   9936: 0    LBBAAA   7938: 0   
 LBDAAA   7236: 0    LBEAAA  14025: 0    LBFAAA  14028: 0    LBGAAA  13726: 0    LBHAAA  14031: 0    LBIAAA  14034: 0   
 LCAAAA  10146: 0    LCBAAA   7947: 0    LCDAAA   6777: 0    LCEAAA  14039: 0    LCFAAA   6850: 0    LCGAAA  13744: 0   
 LCHAAA  14044: 0    LCIAAA  14047: 0    LDBAAA   7669: 0    LDDAAA   7237: 0    LDEAAA  14050: 0    LDFAAA   6857: 0   
 LDGAAA  13758: 0    LDHAAA  14053: 0    LDIAAA  14056: 0    LEBAAA   7948: 0    LEDAAA   6324: 0    LEEAAA  14061: 0   
 LEFAAA  14062: 0    LEGAAA  13805: 0    LEHAAA   9836: 0    LEIAAA  14065: 0    LFAAAA   9592: 0    LFBAAA   8180: 0   
 LFDAAA   7238: 0    LFEAAA  14068: 0    LFFAAA  14071: 0    LFGAAA  13816: 0    LFHAAA   9843: 0    LFIAAA  14074: 0   
 LGAAAA   9910: 0    LGBAAA   7949: 0    LGDAAA   6015: 0    LGEAAA  14077: 0    LGFAAA  14080: 0    LGGAAA  13823: 0   
 LGHAAA  14086: 0    LGIAAA  14089: 0    LHAAAA   9622: 0    LHBAAA   8193: 0    LHDAAA   7239: 0    LHEAAA  14092: 0   
 LHFAAA  14095: 0    LHGAAA  14098: 0    LHHAAA  14103: 0    LHIAAA  14106: 0    LIAAAA   9870: 0    LIBAAA   8643: 0   
 LIDAAA   5706: 0    LIEAAA   5164: 0    LIFAAA  14109: 0    LIGAAA   8873: 0    LIHAAA  14114: 0    LIIAAA  14117: 0   
 LJAAAA  13121: 0    LJBAAA   8194: 0    LJDAAA   7240: 0    LJEAAA   5171: 0    LJFAAA  13425: 0    LJGAAA   8880: 0   
 LJHAAA  14120: 0    LJIAAA  14125: 0    LKAAAA  13399: 0    LKBAAA   8656: 0    LKDAAA   5383: 0    LKEAAA  14128: 0   
 LKFAAA  13452: 0    LKGAAA  14131: 0    LKHAAA  14136: 0    LKIAAA  14139: 0    LLAAAA  13144: 0    LLBAAA   8778: 0   
 LLDAAA   7250: 0    LLEAAA   5266: 0    LLFAAA   7457: 0    LLGAAA  13841: 0    LLHAAA  14142: 0    LLIAAA  14145: 0   
 LMAAAA  13398: 0    LMBAAA   9566: 0    LMDAAA   4979: 0    LMEAAA   5273: 0    LMFAAA   7464: 0    LMGAAA  13922: 0   
 LMHAAA  14148: 0    LMIAAA  14151: 0    LNBAAA   8994: 0    LNDAAA   7264: 0    LNEAAA  14152: 0    LNFAAA  14153: 0   
 LNGAAA  13933: 0    LNHAAA  14156: 0    LNIAAA  14159: 0    LOBAAA   9331: 0    LOEAAA   5589: 0    LOFAAA  14162: 0   
 LOGAAA  13944: 0    LOHAAA  14165: 0    LOIAAA  14170: 0    LPBAAA   9204: 0    LPCAAA   4858: 0    LPEAAA   5596: 0   
 LPFAAA   7750: 0    LPGAAA  13951: 0    LPHAAA  14173: 0    LPIAAA  14176: 0    LQBAAA   9008: 0    LQCAAA   7265: 0   
 LQEAAA   5779: 0    LQFAAA   7757: 0    LQGAAA  13979: 0    LQHAAA  14179: 0    LQIAAA  14182: 0    LRBAAA   9217: 0   
 LRCAAA   7251: 0    LREAAA   5786: 0    LRFAAA  14183: 0    LRGAAA  13990: 0    LRHAAA  14186: 0    LRIAAA  14189: 0   
 LSBAAA   9007: 0    LSCAAA   5370: 0    LSDAAA  10172: 0    LSEAAA  14190: 0    LSFAAA  13456: 0    LSGAAA  14001: 0   
 LSHAAA  14193: 0    LSIAAA  14196: 0    LTBAAA   9340: 0    LTCAAA   7241: 0    LTDAAA  10712: 0    LTEAAA   6088: 0   
 LTFAAA  13608: 0    LTGAAA  14008: 0    LTHAAA  14199: 0    LTIAAA  14202: 0    LUBAAA   9556: 0    LUCAAA   5693: 0   
 LUDAAA  10738: 0    LUEAAA   6095: 0    LUFAAA  13621: 0    LUGAAA   9083: 0    LUHAAA  14205: 0    LUIAAA  13364: 0   
 LVBAAA   9565: 0    LVCAAA   6002: 0    LVDAAA  13095: 0    LVEAAA  14206: 0    LVFAAA  13616: 0    LVGAAA   9090: 0   
 LVHAAA  14209: 0    LVIAAA  13371: 0    LWBAAA   4520: 0    LWCAAA   6311: 0    LWDAAA  14212: 0    LWEAAA   6397: 0   
 LWFAAA  13626: 0    LWGAAA  14213: 0    LWHAAA  14216: 0    LWIAAA  14219: 0    LXBAAA   4832: 0    LXCAAA   6757: 0   
 LXDAAA   4644: 0    LXEAAA   6404: 0    LXFAAA  13631: 0    LXGAAA  14222: 0    LXHAAA  14225: 0    LYAAAA   7291: 0   
 LYBAAA   4818: 0    LYCAAA   7202: 0    LYDAAA   4651: 0    LYEAAA  14226: 0    LYFAAA   8048: 0    LYGAAA  14229: 0   
 LYHAAA  14232: 0    LZAAAA   8752: 0    LZBAAA   4543: 0    LZCAAA   7227: 0    LZDAAA  14235: 0    LZEAAA  14240: 0   
 LZFAAA   8055: 0    LZGAAA   9413: 0    LZHAAA  14241: 0    PRCPOS   0335: 0    PRINT    0201: 0    PRTSIZ   0344: 0   
 PUCPOS   0338: 0    PUNCH    0101: 0    PUNSIZ   0341: 0    READ     0001: 0    RF       0340: 0    START    4500: 0   
 X1       0089: 0    X2       0094: 0    X3       0099: 0   

0UNREFERENCED SYMBOLS

 LABAAA LBAAAA LEFAAA LFAAAA LFBAAA LIBAAA LJAAAA LKAAAA LNBAAA LNEAAA LNFAAA LPBAAA LRFAAA LSCAAA LSEAAA LUBAAA LUCAAA
 LVCAAA LVDAAA LVEAAA LWCAAA LWGAAA LXCAAA LYBAAA LYCAAA LYEAAA LZHAAA PRCPOS PRINT  PRTSIZ PUCPOS PUNCH  PUNSIZ READ
