 CLEAR STORAGE 1     ,008015,022026,030037,044,049,053053N000000N00001026                                         1
 CLEAR STORAGE 2     L068116,105106,110117B101/I9I#071029C029056B026/B001/0991,001/001117I0?                      2
 BOOTSTRAP           ,008015,022029,036040,047054,061068,072/061039              ,0010011040                      3
0                                                                                                         PAGE    1
0 SEQ PG LIN  LABEL  OP    OPERANDS                                            SFX CT  LOCN  INSTRUCTION TYPE  CARD A-ADDR  B-ADDR

  101         ****************************************************************
  102         ***  TEST_ASM.S
  103         ***  GENERATED BY SMALL-C COMPILER ON 29-APR-2015 8:58:59 PM
  104         ****************************************************************
  105         ****************************************************************
  106         *
  107         READ   EQU   001                * READ AREA                              0001
  108         PUNCH  EQU   101                * PUNCH AREA                             0101
  109         PRINT  EQU   201                * PRINT AREA                             0201
  110         *
  111         PRCPOS DCW   000                * CHAR POSITION IN PRINT AREA         3  0335                       4
  112         PUCPOS DCW   000                * CHAR POSITION IN PUNCH AREA         3  0338                       4
  113         PUNSIZ DCW   @080@              * SIZE OF PUNCH AREA                  3  0341                       4
  114         PRTSIZ DCW   @132@              * SIZE OF PRINT AREA                  3  0344                       4
  115         EOS    DCW   @'@                * END OF STRING CHAR                  1  0345                       4
  116         EOL    DCW   @;@                * END OF LINE CHAR                    1  0346                       4
  117         *
  118                ORG   87                                                                 0087
  119         X1     DSA   0                  * INDEX REGISTER 1                    3  0089  000                  5   000
  120                ORG   92                                                                 0092
  121         X2     DSA   0                  * INDEX REGISTER 2 (STACK POINTER     3  0094  000                  6   000
  122                ORG   97                                                                 0097
  123         X3     DSA   0                  * INDEX REGISTER 3 (STACK FRAME P     3  0099  000                  7   000
  124         *
  125         ****************************************************************
  126         *
  127         * GLOBAL/STATIC DATA AND VARIABLES
  128         *
  129         * START POSITION OF PROGRAM CODE
  130                ORG   1000                                                               1000
  131         START  NOP                      * PROGRAM STARTS HERE                 1  1000  N                    8
  132         *
  133         * SET X2 TO BE THE STACK POINTER (STACK GROWS UPWARD)
  134                SBR   X2,399             * SET X2 TO STACK POINTER VALUE       7  1001  H 094 399            8   094     399
  135                MCW   X2,X3              * COPY STACK POINTER IN X3            7  1008  M 094 099            8   094     099
  136         *
  137                B     LBAAAA             * JUMP TO FUNCTION MAIN               4  1015  B '20                8  1020
  138                H                        * PROGRAM EXECUTED. SYSTEM HALTS      1  1019  .                    8
  139         *
  140         ***************************************************************************
  141         * FUNCTION : MAIN
  142         ***************************************************************************
  143         LBAAAA SBR   3&X3               * SAVE RETURN ADDRESS IN REGISTER     4  1020  H 0?3                8   003+3
  144         * SET THE RIGHT WM AND CLEAR THE WRONG ONES
  145                SW    1&X3               * SET WM AT 1&X3                      4  1024  , 0?1                8   001+3
  146                CW    2&X3               * CLEAR WM AT 2&X3                    4  1028  ) 0?2                9   002+3
  147                CW    3&X3               * CLEAR WM AT 3&X3                    4  1032  ) 0?3                9   003+3
1                                                                                                         PAGE    2
0 SEQ PG LIN  LABEL  OP    OPERANDS                                            SFX CT  LOCN  INSTRUCTION TYPE  CARD A-ADDR  B-ADDR

  148         *
  149         ***************************************
  150         * BEGIN [BLOCK ENDING AT LCAAAA]
  151         * PRINT SIZE:3 OFFSET:3
  152         * I SIZE:5 OFFSET:6
  153         * J SIZE:5 OFFSET:11
  154         * C SIZE:5 OFFSET:16
  155         * R SIZE:5 OFFSET:21
  156         *
  157                LCA   LJAAAA,6&X3        * LOAD *CHAR 201 INTO MEMORY 6&X3     7  1036  L J56 0?6            9  2156     006+3
  158                LCA   LKAAAA,11&X3       * LOAD INT 232 INTO MEMORY 11&X3      7  1043  L J61 0A1            9  2161     011+3
  159                LCA   LLAAAA,16&X3       * LOAD INT 4 INTO MEMORY 16&X3        7  1050  L J66 0A6            9  2166     016+3
  160                LCA   LMAAAA,21&X3       * LOAD INT 0 INTO MEMORY 21&X3        7  1057  L J71 0B1            9  2171     021+3
  161                LCA   LNAAAA,26&X3       * LOAD INT 1 INTO MEMORY 26&X3        7  1064  L J76 0B6           10  2176     026+3
  162         * PUSH (26)
  163                MA    LOAAAA,X2          * ADD 26 TO STACK POINTER             7  1071  # J79 094           10  2179     094
  164         * ASSIGNMENT (C = (I + J))
  165         * ADDITION (I + J)
  166         * LOCAL VARIABLE (I : 11+X3)
  167         * PUSH (11+X3:5)
  168                MA    LPAAAA,X2          * ADD 5 TO STACK POINTER              7  1078  # J82 094           10  2182     094
  169                LCA   11&X3,0&X2         * LOAD MEMORY 11&X3 IN STACK          7  1085  L 0A1 0!0           10   011+3   000+2
  170         * LOCAL VARIABLE (J : 16+X3)
  171         * PUSH (16+X3:5)
  172                MA    LPAAAA,X2          * ADD 5 TO STACK POINTER              7  1092  # J82 094           10  2182     094
  173                LCA   16&X3,0&X2         * LOAD MEMORY 16&X3 IN STACK          7  1099  L 0A6 0!0           11   016+3   000+2
  174                A     0&X2,15995&X2      * ADD STACK TO STACK AT -5            7  1106  A 0!0 IRE           11   000+2 15995+2
  175         * POP (5)
  176                MA    LQAAAA,X2          * ADD -5 TO STACK POINTER             7  1113  # J85 094           11  2185     094
  177         * PUSH (LRAAAA:3)
  178                MA    LSAAAA,X2          * ADD 3 TO STACK POINTER              7  1120  # J91 094           11  2191     094
  179                LCA   LRAAAA,0&X2        * LOAD DATA 021 IN STACK              7  1127  L J88 0!0           11  2188     000+2
  180                MA    X3,0&X2            * ADD X3 TO STACK                     7  1134  # 099 0!0           12   099     000+2
  181         * POP (X1:3)
  182                LCA   0&X2,X1            * LOAD STACK IN X1                    7  1141  L 0!0 089           12   000+2   089
  183                MA    LTAAAA,X2          * ADD -3 TO STACK POINTER             7  1148  # J94 094           12  2194     094
  184         * POP (0+X1:5)
  185                LCA   0&X2,0&X1          * LOAD STACK IN 0&X1                  7  1155  L 0!0 0'0           12   000+2   000+1
  186                MA    LQAAAA,X2          * ADD -5 TO STACK POINTER             7  1162  # J85 094           12  2185     094
  187         * END ASSIGNMENT (C = (I + J))
  188         *
  189         * WHILE [WHILE (((R * 10) < C)) [BLOCK ENDING AT LDAAAA] TOP:LEAAAA BOTTOM:
  190         LEAAAA NOP                      * TOP OF WHILE                        1  1169  N                   12
  191         * LESS ((R * 10) < C)
  192         * MULTIPLY (R * 10)
  193         * LOCAL VARIABLE (R : 26+X3)
  194         * PUSH (26+X3:5)
  195                MA    LPAAAA,X2          * ADD 5 TO STACK POINTER              7  1170  # J82 094           13  2182     094
  196                LCA   26&X3,0&X2         * LOAD MEMORY 26&X3 IN STACK          7  1177  L 0B6 0!0           13   026+3   000+2
  197         * CONSTANT (10 : LUAAAA)
1                                                                                                         PAGE    3
0 SEQ PG LIN  LABEL  OP    OPERANDS                                            SFX CT  LOCN  INSTRUCTION TYPE  CARD A-ADDR  B-ADDR

  198         * PUSH (LUAAAA:5)
  199                MA    LPAAAA,X2          * ADD 5 TO STACK POINTER              7  1184  # J82 094           13  2182     094
  200                LCA   LUAAAA,0&X2        * LOAD DATA 00010 IN STACK            7  1191  L J99 0!0           13  2199     000+2
  201                M     15995&X2,6&X2      * MULTIPLY STACK AT -5 TO STACK A     7  1198  @ IRE 0!6           13 15995+2   006+2
  202                SW    2&X2               * SET WM IN STACK AT 2                4  1205  , 0!2               13   002+2
  203                LCA   6&X2,15995&X2      * LOAD STACK AT 6 TO STACK AT -5      7  1209  L 0!6 IRE           14   006+2 15995+2
  204         * POP (5)
  205                MA    LQAAAA,X2          * ADD -5 TO STACK POINTER             7  1216  # J85 094           14  2185     094
  206                B     CLNNMN             * JUMP TO SNIPPET CLEAN_NUMBER        4  1223  B J14               14  2114
  207         *
  208         * LOCAL VARIABLE (C : 21+X3)
  209         * PUSH (21+X3:5)
  210                MA    LPAAAA,X2          * ADD 5 TO STACK POINTER              7  1227  # J82 094           14  2182     094
  211                LCA   21&X3,0&X2         * LOAD MEMORY 21&X3 IN STACK          7  1234  L 0B1 0!0           14   021+3   000+2
  212                B     CLNNMN             * JUMP TO SNIPPET CLEAN_NUMBER        4  1241  B J14               14  2114
  213         *
  214                C     0&X2,15995&X2      * COMPARE STACK TO STACK AT -5        7  1245  C 0!0 IRE           15   000+2 15995+2
  215         * POP (5)
  216                MA    LQAAAA,X2          * ADD -5 TO STACK POINTER             7  1252  # J85 094           15  2185     094
  217                MCW   LMAAAA,0&X2        * MOVE 0 IN STACK                     7  1259  M J71 0!0           15  2171     000+2
  218                BL    LVAAAA             * JUMP IF LESS                        5  1266  B S75 T             15  1275
  219                B     LWAAAA             * JUMP TO END                         4  1271  B S82               15  1282
  220         LVAAAA MCW   LNAAAA,0&X2        * MOVE 1 IN STACK                     7  1275  M J76 0!0           15  2176     000+2
  221         LWAAAA NOP                      * END OF LESS                         1  1282  N                   15
  222                MCS   0&X2,0&X2          * CLEAR WM IN STACK                   7  1283  Z 0!0 0!0           16   000+2   000+2
  223         * POP (5)
  224                MA    LQAAAA,X2          * ADD -5 TO STACK POINTER             7  1290  # J85 094           16  2185     094
  225                BCE   LFAAAA,5&X2,       * JUMP TO BOTTOM OF WHILE             8  1297  B U12 0!5           16  1412     005+2
  226         *
  227         ***************************************
  228         * BEGIN [BLOCK ENDING AT LDAAAA]
  229         *
  230         * ASSIGNMENT (R = (R * 10))
  231         * MULTIPLY (R * 10)
  232         * LOCAL VARIABLE (R : 26+X3)
  233         * PUSH (26+X3:5)
  234                MA    LPAAAA,X2          * ADD 5 TO STACK POINTER              7  1305  # J82 094           16  2182     094
  235                LCA   26&X3,0&X2         * LOAD MEMORY 26&X3 IN STACK          7  1312  L 0B6 0!0           16   026+3   000+2
  236         * CONSTANT (10 : LUAAAA)
  237         * PUSH (LUAAAA:5)
  238                MA    LPAAAA,X2          * ADD 5 TO STACK POINTER              7  1319  # J82 094           17  2182     094
  239                LCA   LUAAAA,0&X2        * LOAD DATA 00010 IN STACK            7  1326  L J99 0!0           17  2199     000+2
  240                M     15995&X2,6&X2      * MULTIPLY STACK AT -5 TO STACK A     7  1333  @ IRE 0!6           17 15995+2   006+2
  241                SW    2&X2               * SET WM IN STACK AT 2                4  1340  , 0!2               17   002+2
  242                LCA   6&X2,15995&X2      * LOAD STACK AT 6 TO STACK AT -5      7  1344  L 0!6 IRE           17   006+2 15995+2
  243         * POP (5)
  244                MA    LQAAAA,X2          * ADD -5 TO STACK POINTER             7  1351  # J85 094           17  2185     094
  245         * PUSH (LOAAAA:3)
  246                MA    LSAAAA,X2          * ADD 3 TO STACK POINTER              7  1358  # J91 094           18  2191     094
  247                LCA   LOAAAA,0&X2        * LOAD DATA 026 IN STACK              7  1365  L J79 0!0           18  2179     000+2
1                                                                                                         PAGE    4
0 SEQ PG LIN  LABEL  OP    OPERANDS                                            SFX CT  LOCN  INSTRUCTION TYPE  CARD A-ADDR  B-ADDR

  248                MA    X3,0&X2            * ADD X3 TO STACK                     7  1372  # 099 0!0           18   099     000+2
  249         * POP (X1:3)
  250                LCA   0&X2,X1            * LOAD STACK IN X1                    7  1379  L 0!0 089           18   000+2   089
  251                MA    LTAAAA,X2          * ADD -3 TO STACK POINTER             7  1386  # J94 094           18  2194     094
  252         * POP (0+X1:5)
  253                LCA   0&X2,0&X1          * LOAD STACK IN 0&X1                  7  1393  L 0!0 0'0           19   000+2   000+1
  254                MA    LQAAAA,X2          * ADD -5 TO STACK POINTER             7  1400  # J85 094           19  2185     094
  255         * END ASSIGNMENT (R = (R * 10))
  256         *
  257         LDAAAA NOP                      * LAST BLOCK INSTRUCTION              1  1407  N                   19
  258         * END [BLOCK ENDING AT LDAAAA]
  259         ***************************************
  260         *
  261                B     LEAAAA             * JUMP TO TOP OF WHILE                4  1408  B /69               19  1169
  262         *
  263         LFAAAA NOP                      * BOTTOM OF WHILE                     1  1412  N                   19
  264         * END WHILE [WHILE (((R * 10) < C)) [BLOCK ENDING AT LDAAAA] TOP:LEAAAA BOT
  265         *
  266         * WHILE [WHILE (C) [BLOCK ENDING AT LGAAAA] TOP:LHAAAA BOTTOM:LIAAAA]
  267         LHAAAA NOP                      * TOP OF WHILE                        1  1413  N                   19
  268         * LOCAL VARIABLE (C : 21+X3)
  269         * PUSH (21+X3:5)
  270                MA    LPAAAA,X2          * ADD 5 TO STACK POINTER              7  1414  # J82 094           19  2182     094
  271                LCA   21&X3,0&X2         * LOAD MEMORY 21&X3 IN STACK          7  1421  L 0B1 0!0           20   021+3   000+2
  272                MCS   0&X2,0&X2          * CLEAR WM IN STACK                   7  1428  Z 0!0 0!0           20   000+2   000+2
  273         * POP (5)
  274                MA    LQAAAA,X2          * ADD -5 TO STACK POINTER             7  1435  # J85 094           20  2185     094
  275                BCE   LIAAAA,5&X2,       * JUMP TO BOTTOM OF WHILE             8  1442  B Y84 0!5           20  1884     005+2
  276         *
  277         ***************************************
  278         * BEGIN [BLOCK ENDING AT LGAAAA]
  279         * D SIZE:1 OFFSET:26
  280         *
  281                LCA   LXAAAA,27&X3       * LOAD CHAR 48 INTO MEMORY 27&X3      7  1450  L K00 0B7           20  2200     027+3
  282         * PUSH (1)
  283                MA    LYAAAA,X2          * ADD 1 TO STACK POINTER              7  1457  # K03 094           21  2203     094
  284         * ASSIGNMENT (D = (((CHAR) (C / R)) + '0'))
  285         * ADDITION (((CHAR) (C / R)) + '0')
  286         * DIVIDE (C / R)
  287         * LOCAL VARIABLE (R : 26+X3)
  288         * PUSH (26+X3:5)
  289                MA    LPAAAA,X2          * ADD 5 TO STACK POINTER              7  1464  # J82 094           21  2182     094
  290                LCA   26&X3,0&X2         * LOAD MEMORY 26&X3 IN STACK          7  1471  L 0B6 0!0           21   026+3   000+2
  291         * LOCAL VARIABLE (C : 21+X3)
  292         * PUSH (21+X3:5)
  293                MA    LPAAAA,X2          * ADD 5 TO STACK POINTER              7  1478  # J82 094           21  2182     094
  294                LCA   21&X3,0&X2         * LOAD MEMORY 21&X3 IN STACK          7  1485  L 0B1 0!0           21   021+3   000+2
  295                B     SNPDIV             * JUMP TO SNIPPET SNIP_DIV            4  1492  B Z38               21  1938
  296         *
  297                MCW   0&X2,15995&X2      * MOVE STACK IN STACK AT -5           7  1496  M 0!0 IRE           22   000+2 15995+2
1                                                                                                         PAGE    5
0 SEQ PG LIN  LABEL  OP    OPERANDS                                            SFX CT  LOCN  INSTRUCTION TYPE  CARD A-ADDR  B-ADDR

  298         * POP (5)
  299                MA    LQAAAA,X2          * ADD -5 TO STACK POINTER             7  1503  # J85 094           22  2185     094
  300         * CAST NUMBER((C / R)) TO CHAR
  301                B     NMNCHR             * JUMP TO SNIPPET NUMBER_TO_CHAR      4  1510  B Z05               22  1905
  302         *
  303         * CONSTANT ('0' : LXAAAA)
  304         * PUSH (LXAAAA:1)
  305                MA    LYAAAA,X2          * ADD 1 TO STACK POINTER              7  1514  # K03 094           22  2203     094
  306                LCA   LXAAAA,0&X2        * LOAD DATA 0 IN STACK                7  1521  L K00 0!0           22  2200     000+2
  307                A     0&X2,15999&X2      * ADD STACK TO STACK AT -1            7  1528  A 0!0 IRI           22   000+2 15999+2
  308         * POP (1)
  309                MA    LZAAAA,X2          * ADD -1 TO STACK POINTER             7  1535  # K06 094           23  2206     094
  310         * PUSH (LABAAA:3)
  311                MA    LSAAAA,X2          * ADD 3 TO STACK POINTER              7  1542  # J91 094           23  2191     094
  312                LCA   LABAAA,0&X2        * LOAD DATA 027 IN STACK              7  1549  L J47 0!0           23  2147     000+2
  313                MA    X3,0&X2            * ADD X3 TO STACK                     7  1556  # 099 0!0           23   099     000+2
  314         * POP (X1:3)
  315                LCA   0&X2,X1            * LOAD STACK IN X1                    7  1563  L 0!0 089           23   000+2   089
  316                MA    LTAAAA,X2          * ADD -3 TO STACK POINTER             7  1570  # J94 094           24  2194     094
  317         * POP (0+X1:1)
  318                LCA   0&X2,0&X1          * LOAD STACK IN 0&X1                  7  1577  L 0!0 0'0           24   000+2   000+1
  319                MA    LZAAAA,X2          * ADD -1 TO STACK POINTER             7  1584  # K06 094           24  2206     094
  320         * END ASSIGNMENT (D = (((CHAR) (C / R)) + '0'))
  321         *
  322         * ASSIGNMENT ((*PRINT) = D)
  323         * LOCAL VARIABLE (D : 27+X3)
  324         * PUSH (27+X3:1)
  325                MA    LYAAAA,X2          * ADD 1 TO STACK POINTER              7  1591  # K03 094           24  2203     094
  326                LCA   27&X3,0&X2         * LOAD MEMORY 27&X3 IN STACK          7  1598  L 0B7 0!0           24   027+3   000+2
  327         * LOCAL VARIABLE (PRINT : 6+X3)
  328         * PUSH (6+X3:3)
  329                MA    LSAAAA,X2          * ADD 3 TO STACK POINTER              7  1605  # J91 094           25  2191     094
  330                LCA   6&X3,0&X2          * LOAD MEMORY 6&X3 IN STACK           7  1612  L 0?6 0!0           25   006+3   000+2
  331         * POP (X1:3)
  332                LCA   0&X2,X1            * LOAD STACK IN X1                    7  1619  L 0!0 089           25   000+2   089
  333                MA    LTAAAA,X2          * ADD -3 TO STACK POINTER             7  1626  # J94 094           25  2194     094
  334         * POP (0+X1:1)
  335                LCA   0&X2,0&X1          * LOAD STACK IN 0&X1                  7  1633  L 0!0 0'0           25   000+2   000+1
  336                MA    LZAAAA,X2          * ADD -1 TO STACK POINTER             7  1640  # K06 094           26  2206     094
  337         * END ASSIGNMENT ((*PRINT) = D)
  338         *
  339         * POSTINCREMENT (PRINT++)
  340         * PUSH (LBBAAA:3)
  341                MA    LSAAAA,X2          * ADD 3 TO STACK POINTER              7  1647  # J91 094           26  2191     094
  342                LCA   LBBAAA,0&X2        * LOAD DATA 006 IN STACK              7  1654  L J50 0!0           26  2150     000+2
  343                MA    X3,0&X2            * ADD X3 TO STACK                     7  1661  # 099 0!0           26   099     000+2
  344         * POP (X1:3)
  345                LCA   0&X2,X1            * LOAD STACK IN X1                    7  1668  L 0!0 089           26   000+2   089
  346                MA    LTAAAA,X2          * ADD -3 TO STACK POINTER             7  1675  # J94 094           27  2194     094
  347                MA    LYAAAA,0&X1        * POSTINCREMENT POINTER AT X1         7  1682  # K03 0'0           27  2203     000+1
1                                                                                                         PAGE    6
0 SEQ PG LIN  LABEL  OP    OPERANDS                                            SFX CT  LOCN  INSTRUCTION TYPE  CARD A-ADDR  B-ADDR

  348         * ASSIGNMENT (C = (C % R))
  349         * MODULO (%) (C % R)
  350         * LOCAL VARIABLE (R : 26+X3)
  351         * PUSH (26+X3:5)
  352                MA    LPAAAA,X2          * ADD 5 TO STACK POINTER              7  1689  # J82 094           27  2182     094
  353                LCA   26&X3,0&X2         * LOAD MEMORY 26&X3 IN STACK          7  1696  L 0B6 0!0           27   026+3   000+2
  354         * LOCAL VARIABLE (C : 21+X3)
  355         * PUSH (21+X3:5)
  356                MA    LPAAAA,X2          * ADD 5 TO STACK POINTER              7  1703  # J82 094           27  2182     094
  357                LCA   21&X3,0&X2         * LOAD MEMORY 21&X3 IN STACK          7  1710  L 0B1 0!0           28   021+3   000+2
  358                B     SNPDIV             * JUMP TO SNIPPET SNIP_DIV            4  1717  B Z38               28  1938
  359         *
  360         * POP (5)
  361                MA    LQAAAA,X2          * ADD -5 TO STACK POINTER             7  1721  # J85 094           28  2185     094
  362         * PUSH (LRAAAA:3)
  363                MA    LSAAAA,X2          * ADD 3 TO STACK POINTER              7  1728  # J91 094           28  2191     094
  364                LCA   LRAAAA,0&X2        * LOAD DATA 021 IN STACK              7  1735  L J88 0!0           28  2188     000+2
  365                MA    X3,0&X2            * ADD X3 TO STACK                     7  1742  # 099 0!0           28   099     000+2
  366         * POP (X1:3)
  367                LCA   0&X2,X1            * LOAD STACK IN X1                    7  1749  L 0!0 089           29   000+2   089
  368                MA    LTAAAA,X2          * ADD -3 TO STACK POINTER             7  1756  # J94 094           29  2194     094
  369         * POP (0+X1:5)
  370                LCA   0&X2,0&X1          * LOAD STACK IN 0&X1                  7  1763  L 0!0 0'0           29   000+2   000+1
  371                MA    LQAAAA,X2          * ADD -5 TO STACK POINTER             7  1770  # J85 094           29  2185     094
  372         * END ASSIGNMENT (C = (C % R))
  373         *
  374         * ASSIGNMENT (R = (R / 10))
  375         * DIVIDE (R / 10)
  376         * CONSTANT (10 : LUAAAA)
  377         * PUSH (LUAAAA:5)
  378                MA    LPAAAA,X2          * ADD 5 TO STACK POINTER              7  1777  # J82 094           29  2182     094
  379                LCA   LUAAAA,0&X2        * LOAD DATA 00010 IN STACK            7  1784  L J99 0!0           30  2199     000+2
  380         * LOCAL VARIABLE (R : 26+X3)
  381         * PUSH (26+X3:5)
  382                MA    LPAAAA,X2          * ADD 5 TO STACK POINTER              7  1791  # J82 094           30  2182     094
  383                LCA   26&X3,0&X2         * LOAD MEMORY 26&X3 IN STACK          7  1798  L 0B6 0!0           30   026+3   000+2
  384                B     SNPDIV             * JUMP TO SNIPPET SNIP_DIV            4  1805  B Z38               30  1938
  385         *
  386                MCW   0&X2,15995&X2      * MOVE STACK IN STACK AT -5           7  1809  M 0!0 IRE           30   000+2 15995+2
  387         * POP (5)
  388                MA    LQAAAA,X2          * ADD -5 TO STACK POINTER             7  1816  # J85 094           30  2185     094
  389         * PUSH (LOAAAA:3)
  390                MA    LSAAAA,X2          * ADD 3 TO STACK POINTER              7  1823  # J91 094           31  2191     094
  391                LCA   LOAAAA,0&X2        * LOAD DATA 026 IN STACK              7  1830  L J79 0!0           31  2179     000+2
  392                MA    X3,0&X2            * ADD X3 TO STACK                     7  1837  # 099 0!0           31   099     000+2
  393         * POP (X1:3)
  394                LCA   0&X2,X1            * LOAD STACK IN X1                    7  1844  L 0!0 089           31   000+2   089
  395                MA    LTAAAA,X2          * ADD -3 TO STACK POINTER             7  1851  # J94 094           31  2194     094
  396         * POP (0+X1:5)
  397                LCA   0&X2,0&X1          * LOAD STACK IN 0&X1                  7  1858  L 0!0 0'0           32   000+2   000+1
1                                                                                                         PAGE    7
0 SEQ PG LIN  LABEL  OP    OPERANDS                                            SFX CT  LOCN  INSTRUCTION TYPE  CARD A-ADDR  B-ADDR

  398                MA    LQAAAA,X2          * ADD -5 TO STACK POINTER             7  1865  # J85 094           32  2185     094
  399         * END ASSIGNMENT (R = (R / 10))
  400         *
  401         LGAAAA NOP                      * LAST BLOCK INSTRUCTION              1  1872  N                   32
  402         * POP (1)
  403                MA    LZAAAA,X2          * ADD -1 TO STACK POINTER             7  1873  # K06 094           32  2206     094
  404         * END [BLOCK ENDING AT LGAAAA]
  405         ***************************************
  406         *
  407                B     LHAAAA             * JUMP TO TOP OF WHILE                4  1880  B U13               32  1413
  408         *
  409         LIAAAA NOP                      * BOTTOM OF WHILE                     1  1884  N                   32
  410         * END WHILE [WHILE (C) [BLOCK ENDING AT LGAAAA] TOP:LHAAAA BOTTOM:LIAAAA]
  411         *
  412         * START ASM BLOCK
  413                W                                                              1  1885  2                   32
  414         * END ASM BLOCK
  415         LCAAAA NOP                      * LAST BLOCK INSTRUCTION              1  1886  N                   33
  416         * POP (26)
  417                MA    LCBAAA,X2          * ADD -26 TO STACK POINTER            7  1887  # J53 094           33  2153     094
  418         * END [BLOCK ENDING AT LCAAAA]
  419         ***************************************
  420         *
  421                LCA   3&X3,X1            * LOAD RETURN ADDRESS IN X1           7  1894  L 0?3 089           33   003+3   089
  422                B     0&X1               * JUMP BACK TO CALLER IN X1           4  1901  B 0'0               33   000+1
  423         *
  424         ***************************************************************************
  425         * END FUNCTION : MAIN
  426         ***************************************************************************
  427         ****************************************************************
  428         ** CAST INTEGER TO CHAR SNIPPET                               **
  429         ****************************************************************
  430         *
  431         NMNCHR SBR   X1                                                       4  1905  H 089               33   089
  432         * CASTS A 5-DIGIT NUMBER TO A 1-DIGIT CHAR
  433         * COPY THE BYTE IN LAST POSITION OF INTEGER IN THE FIRST POSITION
  434                SW    0&X2                                                     4  1909  , 0!0               33   000+2
  435                LCA   0&X2,15996&X2                                            7  1913  L 0!0 IRF           33   000+2 15996+2
  436         * MAKE SPACE ON STACK FOR A CHAR INSTEAD OF AN INT BY SUBTRACTING 2 BYTES T
  437                MA    @I9H@,X2                                                 7  1920  # K09 094           34  2209     094
  438         * JUMPS BACK TO CALLER
  439                SBR   X2,15998&X2                                              7  1927  H 094 IRH           34   094   15998+2
  440                B     0&X1                                                     4  1934  B 0'0               34   000+1
  441         *
  442         ****************************************************************
  443         *
  444         ****************************************************************
  445         ** DIVISION SNIPPET                                           **
  446         ****************************************************************
  447         * SETUP RETURN ADDRESS
1                                                                                                         PAGE    8
0 SEQ PG LIN  LABEL  OP    OPERANDS                                            SFX CT  LOCN  INSTRUCTION TYPE  CARD A-ADDR  B-ADDR

  448         SNPDIV SBR   DIVEND&3                                                 4  1938  H !93               34  2093
  449         *
  450         * POP DIVIDEND
  451                MCW   0&X2,CDIV2                                               7  1942  M 0!0 J03           34   000+2  2103
  452                SBR   X2,15995&X2                                              7  1949  H 094 IRE           34   094   15995+2
  453         *
  454         * POP DIVISOR
  455                MCW   0&X2,CDIV1                                               7  1956  M 0!0 !98           35   000+2  2098
  456                SBR   X2,15995&X2                                              7  1963  H 094 IRE           35   094   15995+2
  457         *
  458         *
  459                B     *&17               * BRANCH 17 PLACES DOWN?              4  1970  B Z90               35  1990
  460         *
  461                DCW   @00000@                                                  5  1978                      35
  462                DC    @00000000000@                                           11  1989                      35
  463         *
  464                ZA    CDIV2,*-7        * PUT DIVIDEND INTO WORKING BL          7  1990  ? J03 Z89           36  2103    1989
  465                D     CDIV1,*-19       * DIVIDE                                7  1997  % !98 Z84           36  2098    1984
  466                MZ    *-22,*-21        * KILL THE ZONE BIT                     7  2004  Y Z88 Z89           36  1988    1989
  467                MZ    *-29,*-34        * KILL THE ZONE BIT                     7  2011  Y Z88 Z83           36  1988    1983
  468                MCW   *-41,CDIV3       * PICK UP ANSWER                        7  2018  M Z83 J08           36  1983    2108
  469                SW    *-44              * SO I CAN PICKUP REMAINDER            4  2025  , Z84               36  1984
  470                MCW   *-46,CDIV4       * GET REMAINDER                         7  2029  M Z89 J13           37  1989    2113
  471                CW    *-55              * CLEAR THE WM                         4  2036  ) Z84               37  1984
  472                MZ    CDIV3-1,CDIV3    * CLEANUP QUOTIENT BITZONE              7  2040  Y J07 J08           37  2107    2108
  473                MZ    CDIV4-1,CDIV4    * CLEANUP REMAINDER BITZONE             7  2047  Y J12 J13           37  2112    2113
  474         *
  475         * PUSH REMAINDER
  476                SBR   X2,5&X2                                                  7  2054  H 094 0!5           37   094     005+2
  477                SW    15996&X2                                                 4  2061  , IRF               37 15996+2
  478                MCW   CDIV4,0&X2                                               7  2065  M J13 0!0           38  2113     000+2
  479         *
  480         * PUSH QUOTIENT
  481                SBR   X2,5&X2                                                  7  2072  H 094 0!5           38   094     005+2
  482                SW    15996&X2                                                 4  2079  , IRF               38 15996+2
  483                MCW   CDIV3,0&X2                                               7  2083  M J08 0!0           38  2108     000+2
  484         *
  485         * JUMP BACK
  486         DIVEND B     000                                                      4  2090  B 000               38   000
  487         *
  488         * DIVISOR
  489         CDIV1  DCW   00000                                                    5  2098                      38
  490         * DIVIDEND
  491         CDIV2  DCW   00000                                                    5  2103                      38
  492         * QUOTIENT
  493         CDIV3  DCW   00000                                                    5  2108                      39
  494         * REMAINDER
  495         CDIV4  DCW   00000                                                    5  2113                      39
  496         *
  497         ****************************************************************
1                                                                                                         PAGE    9
0 SEQ PG LIN  LABEL  OP    OPERANDS                                            SFX CT  LOCN  INSTRUCTION TYPE  CARD A-ADDR  B-ADDR

  498         ****************************************************************
  499         ** CLEAN NUMBER SNIPPET                                       **
  500         ****************************************************************
  501         *
  502         * NORMALIZES THE ZONE BITS OF A NUMBER, LEAVING EITHER A=0B=0
  503         * FOR A POSITIVE OR A=0B=1 FOR A NEGATIVE
  504         CLNNMN SBR   X1                                                       4  2114  H 089               39   089
  505         * DO NOTHING ON EITHER NO ZONE BITS OR ONLY A B ZONE BIT
  506                BWZ   CLNNME,0&X2,2                                            8  2118  V J41 0!0 2         39  2141     000+2
  507                BWZ   CLNNME,0&X2,K                                            8  2126  V J41 0!0 K         39  2141     000+2
  508         * ELSE CLEAR THE ZONE BITS, AS IT IS POSITIVE
  509                MZ    @ @,0&X2                                                 7  2134  Y K10 0!0           39  2210     000+2
  510         CLNNME B     0&X1                                                     4  2141  B 0'0               40   000+1
  511         *
  512         ****************************************************************
  513         *
  514         LABAAA DCW   @027@              * POINTER 0                           3  2147                      40
  515         LBBAAA DCW   @006@              * POINTER 0                           3  2150                      40
  516         LCBAAA DCW   @I7D@              * POINTER 0                           3  2153                      40
  517         LJAAAA DCW   @201@              * POINTER 0                           3  2156                      40
  518         LKAAAA DCW   @00232@            * VALUE 00232                         5  2161                      40
  519         LLAAAA DCW   @00004@            * VALUE 00004                         5  2166                      40
  520         LMAAAA DCW   @00000@            * VALUE 00000                         5  2171                      41
  521         LNAAAA DCW   @00001@            * VALUE 00001                         5  2176                      41
  522         LOAAAA DCW   @026@              * POINTER 0                           3  2179                      41
  523         LPAAAA DCW   @005@              * POINTER 0                           3  2182                      41
  524         LQAAAA DCW   @I9E@              * POINTER 0                           3  2185                      41
  525         LRAAAA DCW   @021@              * POINTER 0                           3  2188                      41
  526         LSAAAA DCW   @003@              * POINTER 0                           3  2191                      41
  527         LTAAAA DCW   @I9G@              * POINTER 0                           3  2194                      42
  528         LUAAAA DCW   @00010@            * VALUE 00010                         5  2199                      42
  529         LXAAAA DCW   @0@                * VALUE 0                             1  2200                      42
  530         LYAAAA DCW   @001@              * POINTER 0                           3  2203                      42
  531         LZAAAA DCW   @I9I@              * POINTER 0                           3  2206                      42
  532         *
                     DCW   @I9H@                                                    3  2209              LIT     42
                     DCW   @ @                                                      1  2210              LIT     42
  533                END   START              * END OF PROGRAM CODE.                         / '00 080               1000
1                                                                                                         PAGE   10
0SYMBOL   ADDRESS    SYMBOL   ADDRESS    SYMBOL   ADDRESS    SYMBOL   ADDRESS    SYMBOL   ADDRESS    SYMBOL   ADDRESS

 CDIV1    2098: 0    CDIV2    2103: 0    CDIV3    2108: 0    CDIV4    2113: 0    CLNNME   2141: 0    CLNNMN   2114: 0   
 DIVEND   2090: 0    EOL      0346: 0    EOS      0345: 0    LABAAA   2147: 0    LBAAAA   1020: 0    LBBAAA   2150: 0   
 LCAAAA   1886: 0    LCBAAA   2153: 0    LDAAAA   1407: 0    LEAAAA   1169: 0    LFAAAA   1412: 0    LGAAAA   1872: 0   
 LHAAAA   1413: 0    LIAAAA   1884: 0    LJAAAA   2156: 0    LKAAAA   2161: 0    LLAAAA   2166: 0    LMAAAA   2171: 0   
 LNAAAA   2176: 0    LOAAAA   2179: 0    LPAAAA   2182: 0    LQAAAA   2185: 0    LRAAAA   2188: 0    LSAAAA   2191: 0   
 LTAAAA   2194: 0    LUAAAA   2199: 0    LVAAAA   1275: 0    LWAAAA   1282: 0    LXAAAA   2200: 0    LYAAAA   2203: 0   
 LZAAAA   2206: 0    NMNCHR   1905: 0    PRCPOS   0335: 0    PRINT    0201: 0    PRTSIZ   0344: 0    PUCPOS   0338: 0   
 PUNCH    0101: 0    PUNSIZ   0341: 0    READ     0001: 0    SNPDIV   1938: 0    START    1000: 0    X1       0089: 0   
 X2       0094: 0    X3       0099: 0   

0UNREFERENCED SYMBOLS

 EOL    EOS    LCAAAA LDAAAA LGAAAA PRCPOS PRINT  PRTSIZ PUCPOS PUNCH  PUNSIZ READ
