 CLEAR STORAGE 1     ,008015,022026,030037,044,049,053053N000000N00001026                                         1
 CLEAR STORAGE 2     L068116,105106,110117B101/I9I#071029C029056B026/B001/0991,001/001117I0?                      2
 BOOTSTRAP           ,008015,022029,036040,047054,061068,072/061039              ,0010011040                      3
0                                                                                                         PAGE    1
0 SEQ PG LIN  LABEL  OP    OPERANDS                                            SFX CT  LOCN  INSTRUCTION TYPE  CARD A-ADDR  B-ADDR

  101         ****************************************************************
  102         ***  TEST_PRINTF.S
  103         ***  GENERATED BY SMALL-C COMPILER ON 3-MAY-2015 12:51:43 AM
  104         ****************************************************************
  105         ****************************************************************
  106         *
  107         READ   EQU   001                * READ AREA                              0001
  108         PUNCH  EQU   101                * PUNCH AREA                             0101
  109         PRINT  EQU   201                * PRINT AREA                             0201
  110         *
  111         PRCPOS DCW   000                * CHAR POSITION IN PRINT AREA         3  0335                       4
  112         PUCPOS DCW   000                * CHAR POSITION IN PUNCH AREA         3  0338                       4
  113         PUNSIZ DCW   @080@              * SIZE OF PUNCH AREA                  3  0341                       4
  114         PRTSIZ DCW   @132@              * SIZE OF PRINT AREA                  3  0344                       4
  115         EOS    DCW   @'@                * END OF STRING CHAR                  1  0345                       4
  116         EOL    DCW   @;@                * END OF LINE CHAR                    1  0346                       4
  117         *
  118                ORG   87                                                                 0087
  119         X1     DSA   0                  * INDEX REGISTER 1                    3  0089  000                  5   000
  120                ORG   92                                                                 0092
  121         X2     DSA   0                  * INDEX REGISTER 2 (STACK POINTER     3  0094  000                  6   000
  122                ORG   97                                                                 0097
  123         X3     DSA   0                  * INDEX REGISTER 3 (STACK FRAME P     3  0099  000                  7   000
  124         *
  125         ****************************************************************
  126         *
  127         * GLOBAL/STATIC DATA AND VARIABLES
  128         * SEED SIZE:5 OFFSET:700
  129         * CONST_STR_LITERAL_1 SIZE:17 OFFSET:705
  130         * __PUTCHAR_POS SIZE:3 OFFSET:722
  131         * __PUTCHAR_LAST SIZE:3 OFFSET:725
  132         * __GETCHARPOSITION SIZE:3 OFFSET:728
  133         * X SIZE:5 OFFSET:731
  134         * CONST_STR_LITERAL_8 SIZE:4 OFFSET:736
  135         * CONST_STR_LITERAL_9 SIZE:4 OFFSET:740
  136         * CONST_STR_LITERAL_10 SIZE:4 OFFSET:744
  137         *
  138                ORG   700                * SEED                                          0700
  139                DCW   @69105@                                                  5  0704                       8
  140         *
  141                ORG   705                * CONST_STR_LITERAL_1                           0705
  142                DCW   @0@                                                      1  0705                       8
  143                DCW   @1@                                                      1  0706                       8
  144                DCW   @2@                                                      1  0707                       8
  145                DCW   @3@                                                      1  0708                       8
  146                DCW   @4@                                                      1  0709                       8
  147                DCW   @5@                                                      1  0710                       8
1                                                                                                         PAGE    2
0 SEQ PG LIN  LABEL  OP    OPERANDS                                            SFX CT  LOCN  INSTRUCTION TYPE  CARD A-ADDR  B-ADDR

  148                DCW   @6@                                                      1  0711                       9
  149                DCW   @7@                                                      1  0712                       9
  150                DCW   @8@                                                      1  0713                       9
  151                DCW   @9@                                                      1  0714                       9
  152                DCW   @A@                                                      1  0715                       9
  153                DCW   @B@                                                      1  0716                       9
  154                DCW   @C@                                                      1  0717                       9
  155                DCW   @D@                                                      1  0718                      10
  156                DCW   @E@                                                      1  0719                      10
  157                DCW   @F@                                                      1  0720                      10
  158                DCW   @'@                                                      1  0721                      10
  159         *
  160                ORG   722                * __PUTCHAR_POS                                 0722
  161                DCW   @201@                                                    3  0724                      10
  162         *
  163                ORG   725                * __PUTCHAR_LAST                                0725
  164                DCW   @200@                                                    3  0727                      10
  165         *
  166                ORG   728                * __GETCHARPOSITION                             0728
  167                DCW   @081@                                                    3  0730                      10
  168         *
  169                ORG   731                * X                                             0731
  170                DCW   @00000@                                                  5  0735                      11
  171         *
  172                ORG   736                * CONST_STR_LITERAL_8                           0736
  173                DCW   @%@                                                      1  0736                      11
  174                DCW   @D@                                                      1  0737                      11
  175                DCW   @;@                                                      1  0738                      11
  176                DCW   @'@                                                      1  0739                      11
  177         *
  178                ORG   740                * CONST_STR_LITERAL_9                           0740
  179                DCW   @%@                                                      1  0740                      11
  180                DCW   @D@                                                      1  0741                      11
  181                DCW   @;@                                                      1  0742                      12
  182                DCW   @'@                                                      1  0743                      12
  183         *
  184                ORG   744                * CONST_STR_LITERAL_10                          0744
  185                DCW   @%@                                                      1  0744                      12
  186                DCW   @D@                                                      1  0745                      12
  187                DCW   @;@                                                      1  0746                      12
  188                DCW   @'@                                                      1  0747                      12
  189         *
  190         * START POSITION OF PROGRAM CODE
  191                ORG   748                                                                0748
  192         START  NOP                      * PROGRAM STARTS HERE                 1  0748  N                   12
  193         *
  194         * SET X2 TO BE THE STACK POINTER (STACK GROWS UPWARD)
  195                SBR   X2,399             * SET X2 TO STACK POINTER VALUE       7  0749  H 094 399           13   094     399
  196                MCW   X2,X3              * COPY STACK POINTER IN X3            7  0756  M 094 099           13   094     099
  197         *
1                                                                                                         PAGE    3
0 SEQ PG LIN  LABEL  OP    OPERANDS                                            SFX CT  LOCN  INSTRUCTION TYPE  CARD A-ADDR  B-ADDR

  198                B     LDFAAA             * JUMP TO FUNCTION MAIN               4  0763  B 768               13   768
  199                H                        * PROGRAM EXECUTED. SYSTEM HALTS      1  0767  .                   13
  200         *
  201         ***************************************************************************
  202         * FUNCTION : MAIN
  203         ***************************************************************************
  204         LDFAAA SBR   3&X3               * SAVE RETURN ADDRESS IN REGISTER     4  0768  H 0?3               13   003+3
  205         * SET THE RIGHT WM AND CLEAR THE WRONG ONES
  206                SW    1&X3               * SET WM AT 1&X3                      4  0772  , 0?1               13   001+3
  207                CW    2&X3               * CLEAR WM AT 2&X3                    4  0776  ) 0?2               13   002+3
  208                CW    3&X3               * CLEAR WM AT 3&X3                    4  0780  ) 0?3               14   003+3
  209         *
  210         ***************************************
  211         * BEGIN [BLOCK ENDING AT LEFAAA]
  212         * I SIZE:5 OFFSET:3
  213         *
  214                LCA   LTFAAA,8&X3        * LOAD INT 1 INTO MEMORY 8&X3         7  0784  L 19P 0?8           14  8197     008+3
  215         * PUSH (8)
  216                MA    LJGAAA,X2          * ADD 8 TO STACK POINTER              7  0791  # 13M 094           14  8134     094
  217         *
  218         * SWITCH [SWITCH ((++I))]
  219         * PREINCREMENT((++I)
  220         * PUSH (LJGAAA:3)
  221                MA    LKFAAA,X2          * ADD 3 TO STACK POINTER              7  0798  # 13P 094           14  8137     094
  222                LCA   LJGAAA,0&X2        * LOAD DATA 008 IN STACK              7  0805  L 13M 0!0           14  8134     000+2
  223                MA    X3,0&X2            * ADD X3 TO STACK                     7  0812  # 099 0!0           14   099     000+2
  224         * POP (X1:3)
  225                LCA   0&X2,X1            * LOAD STACK IN X1                    7  0819  L 0!0 089           15   000+2   089
  226                MA    LRFAAA,X2          * ADD -3 TO STACK POINTER             7  0826  # 18L 094           15  8183     094
  227                A     LTFAAA,0&X1        * PREINCREMENT MEMORY AT X1           7  0833  A 19P 0'0           15  8197     000+1
  228         * PUSH (0+X1:5)
  229                MA    LMFAAA,X2          * ADD 5 TO STACK POINTER              7  0840  # 14R 094           15  8149     094
  230                LCA   0&X1,0&X2          * LOAD MEMORY 0&X1 IN STACK           7  0847  L 0'0 0!0           15   000+1   000+2
  231         * CONSTANT (1 : LTFAAA)
  232         * PUSH (LTFAAA:5)
  233                MA    LMFAAA,X2          * ADD 5 TO STACK POINTER              7  0854  # 14R 094           16  8149     094
  234                LCA   LTFAAA,0&X2        * LOAD DATA 00001 IN STACK            7  0861  L 19P 0!0           16  8197     000+2
  235                C     0&X2,15995&X2      * COMPARE STACK TO STACK AT -5        7  0868  C 0!0 IRE           16   000+2 15995+2
  236         * POP (5)
  237                MA    LOFAAA,X2          * ADD -5 TO STACK POINTER             7  0875  # 16L 094           16  8163     094
  238                BU    LKGAAA             * IF DIFFERENT JUMP TO NEXT CASE      5  0882  B 898 /             16   898
  239         * POP (5)
  240                MA    LOFAAA,X2          * ADD -5 TO STACK POINTER             7  0887  # 16L 094           17  8163     094
  241                B     LLGAAA             * JUMP TO CASE: 1                     4  0894  B '00               17  1000
  242         LKGAAA NOP                      * COMPARE TO CASE: 2                  1  0898  N                   17
  243         * CONSTANT (2 : LMGAAA)
  244         * PUSH (LMGAAA:5)
  245                MA    LMFAAA,X2          * ADD 5 TO STACK POINTER              7  0899  # 14R 094           17  8149     094
  246                LCA   LMGAAA,0&X2        * LOAD DATA 00002 IN STACK            7  0906  L 15M 0!0           17  8154     000+2
  247                C     0&X2,15995&X2      * COMPARE STACK TO STACK AT -5        7  0913  C 0!0 IRE           17   000+2 15995+2
1                                                                                                         PAGE    4
0 SEQ PG LIN  LABEL  OP    OPERANDS                                            SFX CT  LOCN  INSTRUCTION TYPE  CARD A-ADDR  B-ADDR

  248         * POP (5)
  249                MA    LOFAAA,X2          * ADD -5 TO STACK POINTER             7  0920  # 16L 094           18  8163     094
  250                BU    LNGAAA             * IF DIFFERENT JUMP TO NEXT CASE      5  0927  B 943 /             18   943
  251         * POP (5)
  252                MA    LOFAAA,X2          * ADD -5 TO STACK POINTER             7  0932  # 16L 094           18  8163     094
  253                B     LOGAAA             * JUMP TO CASE: 2                     4  0939  B '96               18  1096
  254         LNGAAA NOP                      * COMPARE TO CASE: 3                  1  0943  N                   18
  255         * CONSTANT (3 : LPGAAA)
  256         * PUSH (LPGAAA:5)
  257                MA    LMFAAA,X2          * ADD 5 TO STACK POINTER              7  0944  # 14R 094           18  8149     094
  258                LCA   LPGAAA,0&X2        * LOAD DATA 00003 IN STACK            7  0951  L 17L 0!0           18  8173     000+2
  259                C     0&X2,15995&X2      * COMPARE STACK TO STACK AT -5        7  0958  C 0!0 IRE           19   000+2 15995+2
  260         * POP (5)
  261                MA    LOFAAA,X2          * ADD -5 TO STACK POINTER             7  0965  # 16L 094           19  8163     094
  262                BU    LQGAAA             * IF DIFFERENT JUMP TO NEXT CASE      5  0972  B 988 /             19   988
  263         * POP (5)
  264                MA    LOFAAA,X2          * ADD -5 TO STACK POINTER             7  0977  # 16L 094           19  8163     094
  265                B     LRGAAA             * JUMP TO CASE: 3                     4  0984  B /92               19  1192
  266         LQGAAA NOP                      * END OF SWITCH CASES                 1  0988  N                   19
  267         * POP (5)
  268                MA    LOFAAA,X2          * ADD -5 TO STACK POINTER             7  0989  # 16L 094           19  8163     094
  269                B     LSGAAA             * JUMP TO DEFAULT                     4  0996  B S88               20  1288
  270         *
  271         ***************************************
  272         * BEGIN [BLOCK ENDING AT LFFAAA]
  273         *
  274         * CASE: 1
  275         LLGAAA NOP                                                            1  1000  N                   20
  276         * ASSIGNMENT (I = (I + 1))
  277         * ADDITION (I + 1)
  278         * LOCAL VARIABLE (I : 8+X3)
  279         * PUSH (8+X3:5)
  280                MA    LMFAAA,X2          * ADD 5 TO STACK POINTER              7  1001  # 14R 094           20  8149     094
  281                LCA   8&X3,0&X2          * LOAD MEMORY 8&X3 IN STACK           7  1008  L 0?8 0!0           20   008+3   000+2
  282         * CONSTANT (1 : LTFAAA)
  283         * PUSH (LTFAAA:5)
  284                MA    LMFAAA,X2          * ADD 5 TO STACK POINTER              7  1015  # 14R 094           20  8149     094
  285                LCA   LTFAAA,0&X2        * LOAD DATA 00001 IN STACK            7  1022  L 19P 0!0           20  8197     000+2
  286                A     0&X2,15995&X2      * ADD STACK TO STACK AT -5            7  1029  A 0!0 IRE           21   000+2 15995+2
  287         * POP (5)
  288                MA    LOFAAA,X2          * ADD -5 TO STACK POINTER             7  1036  # 16L 094           21  8163     094
  289         * PUSH (LJGAAA:3)
  290                MA    LKFAAA,X2          * ADD 3 TO STACK POINTER              7  1043  # 13P 094           21  8137     094
  291                LCA   LJGAAA,0&X2        * LOAD DATA 008 IN STACK              7  1050  L 13M 0!0           21  8134     000+2
  292                MA    X3,0&X2            * ADD X3 TO STACK                     7  1057  # 099 0!0           21   099     000+2
  293         * POP (X1:3)
  294                LCA   0&X2,X1            * LOAD STACK IN X1                    7  1064  L 0!0 089           22   000+2   089
  295                MA    LRFAAA,X2          * ADD -3 TO STACK POINTER             7  1071  # 18L 094           22  8183     094
  296         * POP (0+X1:5)
  297                LCA   0&X2,0&X1          * LOAD STACK IN 0&X1                  7  1078  L 0!0 0'0           22   000+2   000+1
1                                                                                                         PAGE    5
0 SEQ PG LIN  LABEL  OP    OPERANDS                                            SFX CT  LOCN  INSTRUCTION TYPE  CARD A-ADDR  B-ADDR

  298                MA    LOFAAA,X2          * ADD -5 TO STACK POINTER             7  1085  # 16L 094           22  8163     094
  299         * END ASSIGNMENT (I = (I + 1))
  300         *
  301                B     LGFAAA             * BREAK OUT OF THE SWITCH BLOCK       4  1092  B T85               22  1385
  302         * CASE: 2
  303         LOGAAA NOP                                                            1  1096  N                   22
  304         * ASSIGNMENT (I = (I + 2))
  305         * ADDITION (I + 2)
  306         * LOCAL VARIABLE (I : 8+X3)
  307         * PUSH (8+X3:5)
  308                MA    LMFAAA,X2          * ADD 5 TO STACK POINTER              7  1097  # 14R 094           23  8149     094
  309                LCA   8&X3,0&X2          * LOAD MEMORY 8&X3 IN STACK           7  1104  L 0?8 0!0           23   008+3   000+2
  310         * CONSTANT (2 : LMGAAA)
  311         * PUSH (LMGAAA:5)
  312                MA    LMFAAA,X2          * ADD 5 TO STACK POINTER              7  1111  # 14R 094           23  8149     094
  313                LCA   LMGAAA,0&X2        * LOAD DATA 00002 IN STACK            7  1118  L 15M 0!0           23  8154     000+2
  314                A     0&X2,15995&X2      * ADD STACK TO STACK AT -5            7  1125  A 0!0 IRE           23   000+2 15995+2
  315         * POP (5)
  316                MA    LOFAAA,X2          * ADD -5 TO STACK POINTER             7  1132  # 16L 094           24  8163     094
  317         * PUSH (LJGAAA:3)
  318                MA    LKFAAA,X2          * ADD 3 TO STACK POINTER              7  1139  # 13P 094           24  8137     094
  319                LCA   LJGAAA,0&X2        * LOAD DATA 008 IN STACK              7  1146  L 13M 0!0           24  8134     000+2
  320                MA    X3,0&X2            * ADD X3 TO STACK                     7  1153  # 099 0!0           24   099     000+2
  321         * POP (X1:3)
  322                LCA   0&X2,X1            * LOAD STACK IN X1                    7  1160  L 0!0 089           24   000+2   089
  323                MA    LRFAAA,X2          * ADD -3 TO STACK POINTER             7  1167  # 18L 094           25  8183     094
  324         * POP (0+X1:5)
  325                LCA   0&X2,0&X1          * LOAD STACK IN 0&X1                  7  1174  L 0!0 0'0           25   000+2   000+1
  326                MA    LOFAAA,X2          * ADD -5 TO STACK POINTER             7  1181  # 16L 094           25  8163     094
  327         * END ASSIGNMENT (I = (I + 2))
  328         *
  329                B     LGFAAA             * BREAK OUT OF THE SWITCH BLOCK       4  1188  B T85               25  1385
  330         * CASE: 3
  331         LRGAAA NOP                                                            1  1192  N                   25
  332         * ASSIGNMENT (I = (I + 3))
  333         * ADDITION (I + 3)
  334         * LOCAL VARIABLE (I : 8+X3)
  335         * PUSH (8+X3:5)
  336                MA    LMFAAA,X2          * ADD 5 TO STACK POINTER              7  1193  # 14R 094           25  8149     094
  337                LCA   8&X3,0&X2          * LOAD MEMORY 8&X3 IN STACK           7  1200  L 0?8 0!0           26   008+3   000+2
  338         * CONSTANT (3 : LPGAAA)
  339         * PUSH (LPGAAA:5)
  340                MA    LMFAAA,X2          * ADD 5 TO STACK POINTER              7  1207  # 14R 094           26  8149     094
  341                LCA   LPGAAA,0&X2        * LOAD DATA 00003 IN STACK            7  1214  L 17L 0!0           26  8173     000+2
  342                A     0&X2,15995&X2      * ADD STACK TO STACK AT -5            7  1221  A 0!0 IRE           26   000+2 15995+2
  343         * POP (5)
  344                MA    LOFAAA,X2          * ADD -5 TO STACK POINTER             7  1228  # 16L 094           26  8163     094
  345         * PUSH (LJGAAA:3)
  346                MA    LKFAAA,X2          * ADD 3 TO STACK POINTER              7  1235  # 13P 094           27  8137     094
  347                LCA   LJGAAA,0&X2        * LOAD DATA 008 IN STACK              7  1242  L 13M 0!0           27  8134     000+2
1                                                                                                         PAGE    6
0 SEQ PG LIN  LABEL  OP    OPERANDS                                            SFX CT  LOCN  INSTRUCTION TYPE  CARD A-ADDR  B-ADDR

  348                MA    X3,0&X2            * ADD X3 TO STACK                     7  1249  # 099 0!0           27   099     000+2
  349         * POP (X1:3)
  350                LCA   0&X2,X1            * LOAD STACK IN X1                    7  1256  L 0!0 089           27   000+2   089
  351                MA    LRFAAA,X2          * ADD -3 TO STACK POINTER             7  1263  # 18L 094           27  8183     094
  352         * POP (0+X1:5)
  353                LCA   0&X2,0&X1          * LOAD STACK IN 0&X1                  7  1270  L 0!0 0'0           28   000+2   000+1
  354                MA    LOFAAA,X2          * ADD -5 TO STACK POINTER             7  1277  # 16L 094           28  8163     094
  355         * END ASSIGNMENT (I = (I + 3))
  356         *
  357                B     LGFAAA             * BREAK OUT OF THE SWITCH BLOCK       4  1284  B T85               28  1385
  358         * DEFAULT
  359         LSGAAA NOP                                                            1  1288  N                   28
  360         * ASSIGNMENT (I = (I + 4))
  361         * ADDITION (I + 4)
  362         * LOCAL VARIABLE (I : 8+X3)
  363         * PUSH (8+X3:5)
  364                MA    LMFAAA,X2          * ADD 5 TO STACK POINTER              7  1289  # 14R 094           28  8149     094
  365                LCA   8&X3,0&X2          * LOAD MEMORY 8&X3 IN STACK           7  1296  L 0?8 0!0           28   008+3   000+2
  366         * CONSTANT (4 : LTGAAA)
  367         * PUSH (LTGAAA:5)
  368                MA    LMFAAA,X2          * ADD 5 TO STACK POINTER              7  1303  # 14R 094           29  8149     094
  369                LCA   LTGAAA,0&X2        * LOAD DATA 00004 IN STACK            7  1310  L 20K 0!0           29  8202     000+2
  370                A     0&X2,15995&X2      * ADD STACK TO STACK AT -5            7  1317  A 0!0 IRE           29   000+2 15995+2
  371         * POP (5)
  372                MA    LOFAAA,X2          * ADD -5 TO STACK POINTER             7  1324  # 16L 094           29  8163     094
  373         * PUSH (LJGAAA:3)
  374                MA    LKFAAA,X2          * ADD 3 TO STACK POINTER              7  1331  # 13P 094           29  8137     094
  375                LCA   LJGAAA,0&X2        * LOAD DATA 008 IN STACK              7  1338  L 13M 0!0           30  8134     000+2
  376                MA    X3,0&X2            * ADD X3 TO STACK                     7  1345  # 099 0!0           30   099     000+2
  377         * POP (X1:3)
  378                LCA   0&X2,X1            * LOAD STACK IN X1                    7  1352  L 0!0 089           30   000+2   089
  379                MA    LRFAAA,X2          * ADD -3 TO STACK POINTER             7  1359  # 18L 094           30  8183     094
  380         * POP (0+X1:5)
  381                LCA   0&X2,0&X1          * LOAD STACK IN 0&X1                  7  1366  L 0!0 0'0           30   000+2   000+1
  382                MA    LOFAAA,X2          * ADD -5 TO STACK POINTER             7  1373  # 16L 094           31  8163     094
  383         * END ASSIGNMENT (I = (I + 4))
  384         *
  385                B     LGFAAA             * BREAK OUT OF THE SWITCH BLOCK       4  1380  B T85               31  1385
  386         LFFAAA NOP                      * LAST BLOCK INSTRUCTION              1  1384  N                   31
  387         * END [BLOCK ENDING AT LFFAAA]
  388         ***************************************
  389         *
  390         LGFAAA NOP                      * LAST SWITCH BLOCK INSTRUCTION       1  1385  N                   31
  391         * END SWITCH ((++I))
  392         *
  393         * FUNCTION CALL PRINTF(CONST_STR_LITERAL_8, I)
  394         * PUSH (5)
  395                MA    LMFAAA,X2          * ADD 5 TO STACK POINTER              7  1386  # 14R 094           31  8149     094
  396         * LOCAL VARIABLE (I : 8+X3)
  397         * PUSH (8+X3:5)
1                                                                                                         PAGE    7
0 SEQ PG LIN  LABEL  OP    OPERANDS                                            SFX CT  LOCN  INSTRUCTION TYPE  CARD A-ADDR  B-ADDR

  398                MA    LMFAAA,X2          * ADD 5 TO STACK POINTER              7  1393  # 14R 094           31  8149     094
  399                LCA   8&X3,0&X2          * LOAD MEMORY 8&X3 IN STACK           7  1400  L 0?8 0!0           31   008+3   000+2
  400         * STATIC ARRAY (CONST_STR_LITERAL_8:CHAR [4])
  401         * PUSH (LUGAAA:3)
  402                MA    LKFAAA,X2          * ADD 3 TO STACK POINTER              7  1407  # 13P 094           32  8137     094
  403                LCA   LUGAAA,0&X2        * LOAD DATA 736 IN STACK              7  1414  L 21L 0!0           32  8213     000+2
  404         * CREATE A STACK FRAME WITH X3 POINTER TO IT
  405         * PUSH (X3:3)
  406                MA    LKFAAA,X2          * ADD 3 TO STACK POINTER              7  1421  # 13P 094           32  8137     094
  407                LCA   X3,0&X2            * LOAD X3 IN STACK                    7  1428  L 099 0!0           32   099     000+2
  408                MCW   X2,X3              * MOVE X2 IN X3                       7  1435  M 094 099           32   094     099
  409         *
  410                B     LAEAAA             * JUMP TO FUNCTION PRINTF             4  1442  B D41               32  3441
  411         *
  412         * POP (X3:3)
  413                LCA   0&X2,X3            * LOAD STACK IN X3                    7  1446  L 0!0 099           33   000+2   099
  414                MA    LRFAAA,X2          * ADD -3 TO STACK POINTER             7  1453  # 18L 094           33  8183     094
  415         * POP (3)
  416                MA    LRFAAA,X2          * ADD -3 TO STACK POINTER             7  1460  # 18L 094           33  8183     094
  417         * POP (5)
  418                MA    LOFAAA,X2          * ADD -5 TO STACK POINTER             7  1467  # 16L 094           33  8163     094
  419         * POP (5)
  420                MA    LOFAAA,X2          * ADD -5 TO STACK POINTER             7  1474  # 16L 094           33  8163     094
  421         * END FUNCTION CALL PRINTF(CONST_STR_LITERAL_8, I)
  422         *
  423         * WHILE [WHILE ((I < 20)) [BLOCK ENDING AT LHFAAA] TOP:LIFAAA BOTTOM:LJFAAA
  424         LIFAAA NOP                      * TOP OF WHILE                        1  1481  N                   33
  425         * LESS (I < 20)
  426         * LOCAL VARIABLE (I : 8+X3)
  427         * PUSH (8+X3:5)
  428                MA    LMFAAA,X2          * ADD 5 TO STACK POINTER              7  1482  # 14R 094           34  8149     094
  429                LCA   8&X3,0&X2          * LOAD MEMORY 8&X3 IN STACK           7  1489  L 0?8 0!0           34   008+3   000+2
  430                B     CLNNMN             * JUMP TO SNIPPET CLEAN_NUMBER        4  1496  B 06N               34  8065
  431         *
  432         * CONSTANT (20 : LVGAAA)
  433         * PUSH (LVGAAA:5)
  434                MA    LMFAAA,X2          * ADD 5 TO STACK POINTER              7  1500  # 14R 094           34  8149     094
  435                LCA   LVGAAA,0&X2        * LOAD DATA 00020 IN STACK            7  1507  L 22M 0!0           34  8224     000+2
  436                B     CLNNMN             * JUMP TO SNIPPET CLEAN_NUMBER        4  1514  B 06N               34  8065
  437         *
  438                C     0&X2,15995&X2      * COMPARE STACK TO STACK AT -5        7  1518  C 0!0 IRE           35   000+2 15995+2
  439         * POP (5)
  440                MA    LOFAAA,X2          * ADD -5 TO STACK POINTER             7  1525  # 16L 094           35  8163     094
  441                MCW   LWFAAA,0&X2        * MOVE 0 IN STACK                     7  1532  M 23K 0!0           35  8232     000+2
  442                BL    LWGAAA             * JUMP IF LESS                        5  1539  B V48 T             35  1548
  443                B     LXGAAA             * JUMP TO END                         4  1544  B V55               35  1555
  444         LWGAAA MCW   LTFAAA,0&X2        * MOVE 1 IN STACK                     7  1548  M 19P 0!0           35  8197     000+2
  445         LXGAAA NOP                      * END OF LESS                         1  1555  N                   35
  446                MCS   0&X2,0&X2          * CLEAR WM IN STACK                   7  1556  Z 0!0 0!0           36   000+2   000+2
  447         * POP (5)
1                                                                                                         PAGE    8
0 SEQ PG LIN  LABEL  OP    OPERANDS                                            SFX CT  LOCN  INSTRUCTION TYPE  CARD A-ADDR  B-ADDR

  448                MA    LOFAAA,X2          * ADD -5 TO STACK POINTER             7  1563  # 16L 094           36  8163     094
  449                BCE   LJFAAA,5&X2,       * JUMP TO BOTTOM OF WHILE             8  1570  B W78 0!5           36  1678     005+2
  450         *
  451         ***************************************
  452         * BEGIN [BLOCK ENDING AT LHFAAA]
  453         *
  454         * FUNCTION CALL PRINTF(CONST_STR_LITERAL_9, I)
  455         * PUSH (5)
  456                MA    LMFAAA,X2          * ADD 5 TO STACK POINTER              7  1578  # 14R 094           36  8149     094
  457         * LOCAL VARIABLE (I : 8+X3)
  458         * PUSH (8+X3:5)
  459                MA    LMFAAA,X2          * ADD 5 TO STACK POINTER              7  1585  # 14R 094           36  8149     094
  460                LCA   8&X3,0&X2          * LOAD MEMORY 8&X3 IN STACK           7  1592  L 0?8 0!0           37   008+3   000+2
  461         * STATIC ARRAY (CONST_STR_LITERAL_9:CHAR [4])
  462         * PUSH (LYGAAA:3)
  463                MA    LKFAAA,X2          * ADD 3 TO STACK POINTER              7  1599  # 13P 094           37  8137     094
  464                LCA   LYGAAA,0&X2        * LOAD DATA 740 IN STACK              7  1606  L 23N 0!0           37  8235     000+2
  465         * CREATE A STACK FRAME WITH X3 POINTER TO IT
  466         * PUSH (X3:3)
  467                MA    LKFAAA,X2          * ADD 3 TO STACK POINTER              7  1613  # 13P 094           37  8137     094
  468                LCA   X3,0&X2            * LOAD X3 IN STACK                    7  1620  L 099 0!0           37   099     000+2
  469                MCW   X2,X3              * MOVE X2 IN X3                       7  1627  M 094 099           38   094     099
  470         *
  471                B     LAEAAA             * JUMP TO FUNCTION PRINTF             4  1634  B D41               38  3441
  472         *
  473         * POP (X3:3)
  474                LCA   0&X2,X3            * LOAD STACK IN X3                    7  1638  L 0!0 099           38   000+2   099
  475                MA    LRFAAA,X2          * ADD -3 TO STACK POINTER             7  1645  # 18L 094           38  8183     094
  476         * POP (3)
  477                MA    LRFAAA,X2          * ADD -3 TO STACK POINTER             7  1652  # 18L 094           38  8183     094
  478         * POP (5)
  479                MA    LOFAAA,X2          * ADD -5 TO STACK POINTER             7  1659  # 16L 094           38  8163     094
  480         * POP (5)
  481                MA    LOFAAA,X2          * ADD -5 TO STACK POINTER             7  1666  # 16L 094           39  8163     094
  482         * END FUNCTION CALL PRINTF(CONST_STR_LITERAL_9, I)
  483         *
  484         LHFAAA NOP                      * LAST BLOCK INSTRUCTION              1  1673  N                   39
  485         * END [BLOCK ENDING AT LHFAAA]
  486         ***************************************
  487         *
  488                B     LIFAAA             * JUMP TO TOP OF WHILE                4  1674  B U81               39  1481
  489         *
  490         LJFAAA NOP                      * BOTTOM OF WHILE                     1  1678  N                   39
  491         * END WHILE [WHILE ((I < 20)) [BLOCK ENDING AT LHFAAA] TOP:LIFAAA BOTTOM:LJ
  492         *
  493         * FUNCTION CALL PRINTF(CONST_STR_LITERAL_10, 20000)
  494         * PUSH (5)
  495                MA    LMFAAA,X2          * ADD 5 TO STACK POINTER              7  1679  # 14R 094           39  8149     094
  496         * CONSTANT (20000 : LZGAAA)
  497         * PUSH (LZGAAA:5)
1                                                                                                         PAGE    9
0 SEQ PG LIN  LABEL  OP    OPERANDS                                            SFX CT  LOCN  INSTRUCTION TYPE  CARD A-ADDR  B-ADDR

  498                MA    LMFAAA,X2          * ADD 5 TO STACK POINTER              7  1686  # 14R 094           39  8149     094
  499                LCA   LZGAAA,0&X2        * LOAD DATA 20000 IN STACK            7  1693  L 24K 0!0           39  8242     000+2
  500         * STATIC ARRAY (CONST_STR_LITERAL_10:CHAR [4])
  501         * PUSH (LAHAAA:3)
  502                MA    LKFAAA,X2          * ADD 3 TO STACK POINTER              7  1700  # 13P 094           40  8137     094
  503                LCA   LAHAAA,0&X2        * LOAD DATA 744 IN STACK              7  1707  L 10J 0!0           40  8101     000+2
  504         * CREATE A STACK FRAME WITH X3 POINTER TO IT
  505         * PUSH (X3:3)
  506                MA    LKFAAA,X2          * ADD 3 TO STACK POINTER              7  1714  # 13P 094           40  8137     094
  507                LCA   X3,0&X2            * LOAD X3 IN STACK                    7  1721  L 099 0!0           40   099     000+2
  508                MCW   X2,X3              * MOVE X2 IN X3                       7  1728  M 094 099           40   094     099
  509         *
  510                B     LAEAAA             * JUMP TO FUNCTION PRINTF             4  1735  B D41               40  3441
  511         *
  512         * POP (X3:3)
  513                LCA   0&X2,X3            * LOAD STACK IN X3                    7  1739  L 0!0 099           41   000+2   099
  514                MA    LRFAAA,X2          * ADD -3 TO STACK POINTER             7  1746  # 18L 094           41  8183     094
  515         * POP (3)
  516                MA    LRFAAA,X2          * ADD -3 TO STACK POINTER             7  1753  # 18L 094           41  8183     094
  517         * POP (5)
  518                MA    LOFAAA,X2          * ADD -5 TO STACK POINTER             7  1760  # 16L 094           41  8163     094
  519         * POP (5)
  520                MA    LOFAAA,X2          * ADD -5 TO STACK POINTER             7  1767  # 16L 094           41  8163     094
  521         * END FUNCTION CALL PRINTF(CONST_STR_LITERAL_10, 20000)
  522         *
  523         LEFAAA NOP                      * LAST BLOCK INSTRUCTION              1  1774  N                   41
  524         * POP (8)
  525                MA    LBGAAA,X2          * ADD -8 TO STACK POINTER             7  1775  # 10P 094           42  8107     094
  526         * END [BLOCK ENDING AT LEFAAA]
  527         ***************************************
  528         *
  529                LCA   3&X3,X1            * LOAD RETURN ADDRESS IN X1           7  1782  L 0?3 089           42   003+3   089
  530                B     0&X1               * JUMP BACK TO CALLER IN X1           4  1789  B 0'0               42   000+1
  531         *
  532         ***************************************************************************
  533         * END FUNCTION : MAIN
  534         ***************************************************************************
  535         *
  536         ***************************************************************************
  537         * FUNCTION : GENRAND
  538         ***************************************************************************
  539         LBAAAA SBR   3&X3               * SAVE RETURN ADDRESS IN REGISTER     4  1793  H 0?3               42   003+3
  540         * SET THE RIGHT WM AND CLEAR THE WRONG ONES
  541                SW    1&X3               * SET WM AT 1&X3                      4  1797  , 0?1               42   001+3
  542                CW    2&X3               * CLEAR WM AT 2&X3                    4  1801  ) 0?2               42   002+3
  543                CW    3&X3               * CLEAR WM AT 3&X3                    4  1805  ) 0?3               42   003+3
  544         *
  545         ***************************************
  546         * BEGIN [BLOCK ENDING AT LCAAAA]
  547         *
1                                                                                                         PAGE   10
0 SEQ PG LIN  LABEL  OP    OPERANDS                                            SFX CT  LOCN  INSTRUCTION TYPE  CARD A-ADDR  B-ADDR

  548         * PUSH (3)
  549                MA    LKFAAA,X2          * ADD 3 TO STACK POINTER              7  1809  # 13P 094           43  8137     094
  550         * ASSIGNMENT (SEED = (((42 * SEED) + 19) % 100000))
  551         * MODULO (%) (((42 * SEED) + 19) % 100000)
  552         * CONSTANT (100000 : LLFAAA)
  553         * PUSH (LLFAAA:5)
  554                MA    LMFAAA,X2          * ADD 5 TO STACK POINTER              7  1816  # 14R 094           43  8149     094
  555                LCA   LLFAAA,0&X2        * LOAD DATA 100000 IN STACK           7  1823  L 14L 0!0           43  8143     000+2
  556         * ADDITION ((42 * SEED) + 19)
  557         * MULTIPLY (42 * SEED)
  558         * CONSTANT (42 : LNFAAA)
  559         * PUSH (LNFAAA:5)
  560                MA    LMFAAA,X2          * ADD 5 TO STACK POINTER              7  1830  # 14R 094           43  8149     094
  561                LCA   LNFAAA,0&X2        * LOAD DATA 00042 IN STACK            7  1837  L 16! 0!0           43  8160     000+2
  562         * STATIC VARIABLE (SEED : 704)
  563         * PUSH (704:5)
  564                MA    LMFAAA,X2          * ADD 5 TO STACK POINTER              7  1844  # 14R 094           44  8149     094
  565                LCA   704,0&X2           * LOAD MEMORY 704 IN STACK            7  1851  L 704 0!0           44   704     000+2
  566                M     15995&X2,6&X2      * MULTIPLY STACK AT -5 TO STACK A     7  1858  @ IRE 0!6           44 15995+2   006+2
  567                SW    2&X2               * SET WM IN STACK AT 2                4  1865  , 0!2               44   002+2
  568                LCA   6&X2,15995&X2      * LOAD STACK AT 6 TO STACK AT -5      7  1869  L 0!6 IRE           44   006+2 15995+2
  569         * POP (5)
  570                MA    LOFAAA,X2          * ADD -5 TO STACK POINTER             7  1876  # 16L 094           44  8163     094
  571         * CONSTANT (19 : LPFAAA)
  572         * PUSH (LPFAAA:5)
  573                MA    LMFAAA,X2          * ADD 5 TO STACK POINTER              7  1883  # 14R 094           45  8149     094
  574                LCA   LPFAAA,0&X2        * LOAD DATA 00019 IN STACK            7  1890  L 16Q 0!0           45  8168     000+2
  575                A     0&X2,15995&X2      * ADD STACK TO STACK AT -5            7  1897  A 0!0 IRE           45   000+2 15995+2
  576         * POP (5)
  577                MA    LOFAAA,X2          * ADD -5 TO STACK POINTER             7  1904  # 16L 094           45  8163     094
  578                B     SNPDIV             * JUMP TO SNIPPET SNIP_DIV            4  1911  B G1Y               45  7718
  579         *
  580         * POP (5)
  581                MA    LOFAAA,X2          * ADD -5 TO STACK POINTER             7  1915  # 16L 094           45  8163     094
  582         * PUSH (LQFAAA:3)
  583                MA    LKFAAA,X2          * ADD 3 TO STACK POINTER              7  1922  # 13P 094           46  8137     094
  584                LCA   LQFAAA,0&X2        * LOAD DATA 704 IN STACK              7  1929  L 17P 0!0           46  8177     000+2
  585         * POP (X1:3)
  586                LCA   0&X2,X1            * LOAD STACK IN X1                    7  1936  L 0!0 089           46   000+2   089
  587                MA    LRFAAA,X2          * ADD -3 TO STACK POINTER             7  1943  # 18L 094           46  8183     094
  588         * POP (0+X1:5)
  589                LCA   0&X2,0&X1          * LOAD STACK IN 0&X1                  7  1950  L 0!0 0'0           46   000+2   000+1
  590                MA    LOFAAA,X2          * ADD -5 TO STACK POINTER             7  1957  # 16L 094           47  8163     094
  591         * END ASSIGNMENT (SEED = (((42 * SEED) + 19) % 100000))
  592         *
  593         * PUT ON STACK RETURN VALUE (SEED)
  594         * STATIC VARIABLE (SEED : 704)
  595         * PUSH (704:5)
  596                MA    LMFAAA,X2          * ADD 5 TO STACK POINTER              7  1964  # 14R 094           47  8149     094
  597                LCA   704,0&X2           * LOAD MEMORY 704 IN STACK            7  1971  L 704 0!0           47   704     000+2
1                                                                                                         PAGE   11
0 SEQ PG LIN  LABEL  OP    OPERANDS                                            SFX CT  LOCN  INSTRUCTION TYPE  CARD A-ADDR  B-ADDR

  598         * POP (15997+X3:5)
  599                LCA   0&X2,15997&X3      * LOAD STACK IN 15997&X3              7  1978  L 0!0 IIG           47   000+2 15997+3
  600                MA    LOFAAA,X2          * ADD -5 TO STACK POINTER             7  1985  # 16L 094           47  8163     094
  601         *
  602         LCAAAA NOP                      * LAST BLOCK INSTRUCTION              1  1992  N                   47
  603         * POP (3)
  604                MA    LRFAAA,X2          * ADD -3 TO STACK POINTER             7  1993  # 18L 094           48  8183     094
  605         * END [BLOCK ENDING AT LCAAAA]
  606         ***************************************
  607         *
  608                LCA   3&X3,X1            * LOAD RETURN ADDRESS IN X1           7  2000  L 0?3 089           48   003+3   089
  609                B     0&X1               * JUMP BACK TO CALLER IN X1           4  2007  B 0'0               48   000+1
  610         *
  611         ***************************************************************************
  612         * END FUNCTION : GENRAND
  613         ***************************************************************************
  614         *
  615         ***************************************************************************
  616         * FUNCTION : ITOA
  617         ***************************************************************************
  618         LYAAAA SBR   3&X3               * SAVE RETURN ADDRESS IN REGISTER     4  2011  H 0?3               48   003+3
  619         * SET THE RIGHT WM AND CLEAR THE WRONG ONES
  620                SW    1&X3               * SET WM AT 1&X3                      4  2015  , 0?1               48   001+3
  621                CW    2&X3               * CLEAR WM AT 2&X3                    4  2019  ) 0?2               48   002+3
  622                CW    3&X3               * CLEAR WM AT 3&X3                    4  2023  ) 0?3               48   003+3
  623         *
  624         ***************************************
  625         * BEGIN [BLOCK ENDING AT LZAAAA]
  626         * START SIZE:3 OFFSET:3
  627         * DIGITS SIZE:3 OFFSET:6
  628         * EXP SIZE:5 OFFSET:9
  629         *
  630                LCA   LSFAAA,9&X3        * LOAD *CHAR 705 INTO MEMORY 9&X3     7  2027  L 19J 0?9           49  8191     009+3
  631                LCA   LTFAAA,14&X3       * LOAD INT 1 INTO MEMORY 14&X3        7  2034  L 19P 0A4           49  8197     014+3
  632         * PUSH (14)
  633                MA    LUFAAA,X2          * ADD 14 TO STACK POINTER             7  2041  # 21! 094           49  8210     094
  634         * ASSIGNMENT (START = STR)
  635         * PARAMETER VARIABLE (STR : 15992+X3)
  636         * PUSH (15992+X3:3)
  637                MA    LKFAAA,X2          * ADD 3 TO STACK POINTER              7  2048  # 13P 094           49  8137     094
  638                LCA   15992&X3,0&X2      * LOAD MEMORY 15992&X3 IN STACK       7  2055  L IIB 0!0           49 15992+3   000+2
  639         * PUSH (LVFAAA:3)
  640                MA    LKFAAA,X2          * ADD 3 TO STACK POINTER              7  2062  # 13P 094           50  8137     094
  641                LCA   LVFAAA,0&X2        * LOAD DATA 006 IN STACK              7  2069  L 21R 0!0           50  8219     000+2
  642                MA    X3,0&X2            * ADD X3 TO STACK                     7  2076  # 099 0!0           50   099     000+2
  643         * POP (X1:3)
  644                LCA   0&X2,X1            * LOAD STACK IN X1                    7  2083  L 0!0 089           50   000+2   089
  645                MA    LRFAAA,X2          * ADD -3 TO STACK POINTER             7  2090  # 18L 094           50  8183     094
  646         * POP (0+X1:3)
  647                LCA   0&X2,0&X1          * LOAD STACK IN 0&X1                  7  2097  L 0!0 0'0           51   000+2   000+1
1                                                                                                         PAGE   12
0 SEQ PG LIN  LABEL  OP    OPERANDS                                            SFX CT  LOCN  INSTRUCTION TYPE  CARD A-ADDR  B-ADDR

  648                MA    LRFAAA,X2          * ADD -3 TO STACK POINTER             7  2104  # 18L 094           51  8183     094
  649         * END ASSIGNMENT (START = STR)
  650         *
  651         * IF [IF ((VALUE < 0) THEN [BLOCK ENDING AT LABAAA] ELSE [IF ((VALUE == 0)
  652         * LESS (VALUE < 0)
  653         * PARAMETER VARIABLE (VALUE : 15997+X3)
  654         * PUSH (15997+X3:5)
  655                MA    LMFAAA,X2          * ADD 5 TO STACK POINTER              7  2111  # 14R 094           51  8149     094
  656                LCA   15997&X3,0&X2      * LOAD MEMORY 15997&X3 IN STACK       7  2118  L IIG 0!0           51 15997+3   000+2
  657                B     CLNNMN             * JUMP TO SNIPPET CLEAN_NUMBER        4  2125  B 06N               51  8065
  658         *
  659         * CONSTANT (0 : LWFAAA)
  660         * PUSH (LWFAAA:5)
  661                MA    LMFAAA,X2          * ADD 5 TO STACK POINTER              7  2129  # 14R 094           51  8149     094
  662                LCA   LWFAAA,0&X2        * LOAD DATA 00000 IN STACK            7  2136  L 23K 0!0           52  8232     000+2
  663                B     CLNNMN             * JUMP TO SNIPPET CLEAN_NUMBER        4  2143  B 06N               52  8065
  664         *
  665                C     0&X2,15995&X2      * COMPARE STACK TO STACK AT -5        7  2147  C 0!0 IRE           52   000+2 15995+2
  666         * POP (5)
  667                MA    LOFAAA,X2          * ADD -5 TO STACK POINTER             7  2154  # 16L 094           52  8163     094
  668                MCW   LWFAAA,0&X2        * MOVE 0 IN STACK                     7  2161  M 23K 0!0           52  8232     000+2
  669                BL    LXFAAA             * JUMP IF LESS                        5  2168  B J77 T             52  2177
  670                B     LYFAAA             * JUMP TO END                         4  2173  B J84               53  2184
  671         LXFAAA MCW   LTFAAA,0&X2        * MOVE 1 IN STACK                     7  2177  M 19P 0!0           53  8197     000+2
  672         LYFAAA NOP                      * END OF LESS                         1  2184  N                   53
  673                MCS   0&X2,0&X2          * CLEAR WM IN STACK                   7  2185  Z 0!0 0!0           53   000+2   000+2
  674         * POP (5)
  675                MA    LOFAAA,X2          * ADD -5 TO STACK POINTER             7  2192  # 16L 094           53  8163     094
  676                BCE   LDBAAA,5&X2,       * JUMP WHEN FALSE                     8  2199  B L81 0!5           53  2381     005+2
  677         *
  678         ***************************************
  679         * BEGIN [BLOCK ENDING AT LABAAA]
  680         *
  681         * ASSIGNMENT ((*(STR++)) = '-')
  682         * CONSTANT ('-' : LZFAAA)
  683         * PUSH (LZFAAA:1)
  684                MA    LAGAAA,X2          * ADD 1 TO STACK POINTER              7  2207  # 09Q 094           54  8098     094
  685                LCA   LZFAAA,0&X2        * LOAD DATA - IN STACK                7  2214  L 23P 0!0           54  8237     000+2
  686         * POSTINCREMENT (STR++)
  687         * PUSH (LBGAAA:3)
  688                MA    LKFAAA,X2          * ADD 3 TO STACK POINTER              7  2221  # 13P 094           54  8137     094
  689                LCA   LBGAAA,0&X2        * LOAD DATA I9B IN STACK              7  2228  L 10P 0!0           54  8107     000+2
  690                MA    X3,0&X2            * ADD X3 TO STACK                     7  2235  # 099 0!0           54   099     000+2
  691         * POP (X1:3)
  692                LCA   0&X2,X1            * LOAD STACK IN X1                    7  2242  L 0!0 089           55   000+2   089
  693                MA    LRFAAA,X2          * ADD -3 TO STACK POINTER             7  2249  # 18L 094           55  8183     094
  694         * PUSH (0+X1:3)
  695                MA    LKFAAA,X2          * ADD 3 TO STACK POINTER              7  2256  # 13P 094           55  8137     094
  696                LCA   0&X1,0&X2          * LOAD MEMORY 0&X1 IN STACK           7  2263  L 0'0 0!0           55   000+1   000+2
  697                MA    LAGAAA,0&X1        * POSTINCREMENT POINTER AT X1         7  2270  # 09Q 0'0           55  8098     000+1
1                                                                                                         PAGE   13
0 SEQ PG LIN  LABEL  OP    OPERANDS                                            SFX CT  LOCN  INSTRUCTION TYPE  CARD A-ADDR  B-ADDR

  698         * POP (X1:3)
  699                LCA   0&X2,X1            * LOAD STACK IN X1                    7  2277  L 0!0 089           56   000+2   089
  700                MA    LRFAAA,X2          * ADD -3 TO STACK POINTER             7  2284  # 18L 094           56  8183     094
  701         * POP (0+X1:1)
  702                LCA   0&X2,0&X1          * LOAD STACK IN 0&X1                  7  2291  L 0!0 0'0           56   000+2   000+1
  703                MA    LCGAAA,X2          * ADD -1 TO STACK POINTER             7  2298  # 11L 094           56  8113     094
  704         * END ASSIGNMENT ((*(STR++)) = '-')
  705         *
  706         * ASSIGNMENT (VALUE = (-VALUE))
  707         * NEGATE (-VALUE)
  708         * PARAMETER VARIABLE (VALUE : 15997+X3)
  709         * PUSH (15997+X3:5)
  710                MA    LMFAAA,X2          * ADD 5 TO STACK POINTER              7  2305  # 14R 094           56  8149     094
  711                LCA   15997&X3,0&X2      * LOAD MEMORY 15997&X3 IN STACK       7  2312  L IIG 0!0           57 15997+3   000+2
  712                ZS    0&X2                                                     4  2319  ! 0!0               57   000+2
  713                B     CLNNMN             * JUMP TO SNIPPET CLEAN_NUMBER        4  2323  B 06N               57  8065
  714         *
  715         * PUSH (LRFAAA:3)
  716                MA    LKFAAA,X2          * ADD 3 TO STACK POINTER              7  2327  # 13P 094           57  8137     094
  717                LCA   LRFAAA,0&X2        * LOAD DATA I9G IN STACK              7  2334  L 18L 0!0           57  8183     000+2
  718                MA    X3,0&X2            * ADD X3 TO STACK                     7  2341  # 099 0!0           57   099     000+2
  719         * POP (X1:3)
  720                LCA   0&X2,X1            * LOAD STACK IN X1                    7  2348  L 0!0 089           58   000+2   089
  721                MA    LRFAAA,X2          * ADD -3 TO STACK POINTER             7  2355  # 18L 094           58  8183     094
  722         * POP (0+X1:5)
  723                LCA   0&X2,0&X1          * LOAD STACK IN 0&X1                  7  2362  L 0!0 0'0           58   000+2   000+1
  724                MA    LOFAAA,X2          * ADD -5 TO STACK POINTER             7  2369  # 16L 094           58  8163     094
  725         * END ASSIGNMENT (VALUE = (-VALUE))
  726         *
  727         LABAAA NOP                      * LAST BLOCK INSTRUCTION              1  2376  N                   58
  728         * END [BLOCK ENDING AT LABAAA]
  729         ***************************************
  730         *
  731                B     LEBAAA             * JUMP WHEN TRUE                      4  2377  B O45               58  2645
  732         LDBAAA NOP                      * EXECUTED WHEN FALSE                 1  2381  N                   58
  733         * IF [IF ((VALUE == 0) THEN [BLOCK ENDING AT LBBAAA]]
  734         * EQUAL (VALUE == 0)
  735         * PARAMETER VARIABLE (VALUE : 15997+X3)
  736         * PUSH (15997+X3:5)
  737                MA    LMFAAA,X2          * ADD 5 TO STACK POINTER              7  2382  # 14R 094           59  8149     094
  738                LCA   15997&X3,0&X2      * LOAD MEMORY 15997&X3 IN STACK       7  2389  L IIG 0!0           59 15997+3   000+2
  739                B     CLNNMN             * JUMP TO SNIPPET CLEAN_NUMBER        4  2396  B 06N               59  8065
  740         *
  741         * CONSTANT (0 : LWFAAA)
  742         * PUSH (LWFAAA:5)
  743                MA    LMFAAA,X2          * ADD 5 TO STACK POINTER              7  2400  # 14R 094           59  8149     094
  744                LCA   LWFAAA,0&X2        * LOAD DATA 00000 IN STACK            7  2407  L 23K 0!0           59  8232     000+2
  745                B     CLNNMN             * JUMP TO SNIPPET CLEAN_NUMBER        4  2414  B 06N               59  8065
  746         *
  747                C     0&X2,15995&X2      * COMPARE STACK TO STACK AT -5        7  2418  C 0!0 IRE           60   000+2 15995+2
1                                                                                                         PAGE   14
0 SEQ PG LIN  LABEL  OP    OPERANDS                                            SFX CT  LOCN  INSTRUCTION TYPE  CARD A-ADDR  B-ADDR

  748         * POP (5)
  749                MA    LOFAAA,X2          * ADD -5 TO STACK POINTER             7  2425  # 16L 094           60  8163     094
  750         * POP (5)
  751                MA    LOFAAA,X2          * ADD -5 TO STACK POINTER             7  2432  # 16L 094           60  8163     094
  752         * PUSH (LWFAAA:5)
  753                MA    LMFAAA,X2          * ADD 5 TO STACK POINTER              7  2439  # 14R 094           60  8149     094
  754                LCA   LWFAAA,0&X2        * LOAD DATA 00000 IN STACK            7  2446  L 23K 0!0           60  8232     000+2
  755                BE    LDGAAA             * JUMP IF EQUAL                       5  2453  B M62 S             61  2462
  756                B     LEGAAA             * JUMP TO END                         4  2458  B M69               61  2469
  757         LDGAAA MCW   LTFAAA,0&X2        * MOVE 1 IN STACK                     7  2462  M 19P 0!0           61  8197     000+2
  758         LEGAAA NOP                      * END OF EQUAL                        1  2469  N                   61
  759                MCS   0&X2,0&X2          * CLEAR WM IN STACK                   7  2470  Z 0!0 0!0           61   000+2   000+2
  760         * POP (5)
  761                MA    LOFAAA,X2          * ADD -5 TO STACK POINTER             7  2477  # 16L 094           61  8163     094
  762                BCE   LCBAAA,5&X2,       * JUMP WHEN FALSE                     8  2484  B O44 0!5           61  2644     005+2
  763         *
  764         ***************************************
  765         * BEGIN [BLOCK ENDING AT LBBAAA]
  766         *
  767         * ASSIGNMENT ((STR[0]) = '0')
  768         * CONSTANT ('0' : LFGAAA)
  769         * PUSH (LFGAAA:1)
  770                MA    LAGAAA,X2          * ADD 1 TO STACK POINTER              7  2492  # 09Q 094           62  8098     094
  771                LCA   LFGAAA,0&X2        * LOAD DATA 0 IN STACK                7  2499  L 12! 0!0           62  8120     000+2
  772         * SUBSCRIPT (STR[0])
  773         * PARAMETER VARIABLE (STR : 15992+X3)
  774         * PUSH (15992+X3:3)
  775                MA    LKFAAA,X2          * ADD 3 TO STACK POINTER              7  2506  # 13P 094           62  8137     094
  776                LCA   15992&X3,0&X2      * LOAD MEMORY 15992&X3 IN STACK       7  2513  L IIB 0!0           62 15992+3   000+2
  777         * END SUBSCRIPT (STR[0])
  778         * POP (X1:3)
  779                LCA   0&X2,X1            * LOAD STACK IN X1                    7  2520  L 0!0 089           62   000+2   089
  780                MA    LRFAAA,X2          * ADD -3 TO STACK POINTER             7  2527  # 18L 094           63  8183     094
  781         * POP (0+X1:1)
  782                LCA   0&X2,0&X1          * LOAD STACK IN 0&X1                  7  2534  L 0!0 0'0           63   000+2   000+1
  783                MA    LCGAAA,X2          * ADD -1 TO STACK POINTER             7  2541  # 11L 094           63  8113     094
  784         * END ASSIGNMENT ((STR[0]) = '0')
  785         *
  786         * ASSIGNMENT ((STR[1]) = '\0')
  787         * CONSTANT ('\0' : EOS)
  788         * PUSH (EOS:1)
  789                MA    LAGAAA,X2          * ADD 1 TO STACK POINTER              7  2548  # 09Q 094           63  8098     094
  790                LCA   EOS,0&X2           * LOAD MEMORY EOS IN STACK            7  2555  L 345 0!0           63   345     000+2
  791         * SUBSCRIPT (STR[1])
  792         * PARAMETER VARIABLE (STR : 15992+X3)
  793         * PUSH (15992+X3:3)
  794                MA    LKFAAA,X2          * ADD 3 TO STACK POINTER              7  2562  # 13P 094           64  8137     094
  795                LCA   15992&X3,0&X2      * LOAD MEMORY 15992&X3 IN STACK       7  2569  L IIB 0!0           64 15992+3   000+2
  796                A     LTFAAA,0&X2        * ADD OFFSET 1 TO POINT ELEMENT 1     7  2576  A 19P 0!0           64  8197     000+2
  797         * END SUBSCRIPT (STR[1])
1                                                                                                         PAGE   15
0 SEQ PG LIN  LABEL  OP    OPERANDS                                            SFX CT  LOCN  INSTRUCTION TYPE  CARD A-ADDR  B-ADDR

  798         * POP (X1:3)
  799                LCA   0&X2,X1            * LOAD STACK IN X1                    7  2583  L 0!0 089           64   000+2   089
  800                MA    LRFAAA,X2          * ADD -3 TO STACK POINTER             7  2590  # 18L 094           64  8183     094
  801         * POP (0+X1:1)
  802                LCA   0&X2,0&X1          * LOAD STACK IN 0&X1                  7  2597  L 0!0 0'0           65   000+2   000+1
  803                MA    LCGAAA,X2          * ADD -1 TO STACK POINTER             7  2604  # 11L 094           65  8113     094
  804         * END ASSIGNMENT ((STR[1]) = '\0')
  805         *
  806         * RETURN TO LZAAAA WITH RETURN VALUE START
  807         * PUT ON STACK RETURN VALUE (START)
  808         * LOCAL VARIABLE (START : 6+X3)
  809         * PUSH (6+X3:3)
  810                MA    LKFAAA,X2          * ADD 3 TO STACK POINTER              7  2611  # 13P 094           65  8137     094
  811                LCA   6&X3,0&X2          * LOAD MEMORY 6&X3 IN STACK           7  2618  L 0?6 0!0           65   006+3   000+2
  812         * POP (15984+X3:3)
  813                LCA   0&X2,15984&X3      * LOAD STACK IN 15984&X3              7  2625  L 0!0 IHD           65   000+2 15984+3
  814                MA    LRFAAA,X2          * ADD -3 TO STACK POINTER             7  2632  # 18L 094           66  8183     094
  815                B     LZAAAA             * JUMP TO END OF FUNCTION BLOCK       4  2639  B D22               66  3422
  816         *
  817         LBBAAA NOP                      * LAST BLOCK INSTRUCTION              1  2643  N                   66
  818         * END [BLOCK ENDING AT LBBAAA]
  819         ***************************************
  820         *
  821         LCBAAA NOP                      * EXECUTED WHEN FALSE                 1  2644  N                   66
  822         * END IF [IF ((VALUE == 0) THEN [BLOCK ENDING AT LBBAAA]]
  823         *
  824         LEBAAA NOP                      * EXECUTED WHEN TRUE                  1  2645  N                   66
  825         * END IF [IF ((VALUE < 0) THEN [BLOCK ENDING AT LABAAA] ELSE [IF ((VALUE ==
  826         *
  827         * WHILE [WHILE ((EXP <= (VALUE / BASE))) [BLOCK ENDING AT LFBAAA] TOP:LGBAA
  828         LGBAAA NOP                      * TOP OF WHILE                        1  2646  N                   66
  829         * LESSOREQUAL (EXP <= (VALUE / BASE))
  830         * LOCAL VARIABLE (EXP : 14+X3)
  831         * PUSH (14+X3:5)
  832                MA    LMFAAA,X2          * ADD 5 TO STACK POINTER              7  2647  # 14R 094           66  8149     094
  833                LCA   14&X3,0&X2         * LOAD MEMORY 14&X3 IN STACK          7  2654  L 0A4 0!0           67   014+3   000+2
  834                B     CLNNMN             * JUMP TO SNIPPET CLEAN_NUMBER        4  2661  B 06N               67  8065
  835         *
  836         * DIVIDE (VALUE / BASE)
  837         * PARAMETER VARIABLE (BASE : 15989+X3)
  838         * PUSH (15989+X3:5)
  839                MA    LMFAAA,X2          * ADD 5 TO STACK POINTER              7  2665  # 14R 094           67  8149     094
  840                LCA   15989&X3,0&X2      * LOAD MEMORY 15989&X3 IN STACK       7  2672  L IHI 0!0           67 15989+3   000+2
  841         * PARAMETER VARIABLE (VALUE : 15997+X3)
  842         * PUSH (15997+X3:5)
  843                MA    LMFAAA,X2          * ADD 5 TO STACK POINTER              7  2679  # 14R 094           67  8149     094
  844                LCA   15997&X3,0&X2      * LOAD MEMORY 15997&X3 IN STACK       7  2686  L IIG 0!0           67 15997+3   000+2
  845                B     SNPDIV             * JUMP TO SNIPPET SNIP_DIV            4  2693  B G1Y               68  7718
  846         *
  847                MCW   0&X2,15995&X2      * MOVE STACK IN STACK AT -5           7  2697  M 0!0 IRE           68   000+2 15995+2
1                                                                                                         PAGE   16
0 SEQ PG LIN  LABEL  OP    OPERANDS                                            SFX CT  LOCN  INSTRUCTION TYPE  CARD A-ADDR  B-ADDR

  848         * POP (5)
  849                MA    LOFAAA,X2          * ADD -5 TO STACK POINTER             7  2704  # 16L 094           68  8163     094
  850                B     CLNNMN             * JUMP TO SNIPPET CLEAN_NUMBER        4  2711  B 06N               68  8065
  851         *
  852                C     0&X2,15995&X2      * COMPARE STACK TO STACK AT -5        7  2715  C 0!0 IRE           68   000+2 15995+2
  853         * POP (5)
  854                MA    LOFAAA,X2          * ADD -5 TO STACK POINTER             7  2722  # 16L 094           68  8163     094
  855                MCW   LTFAAA,0&X2        * MOVE 1 IN STACK                     7  2729  M 19P 0!0           69  8197     000+2
  856                BH    LGGAAA             * JUMP IF LESS OR EQUAL               5  2736  B P45 U             69  2745
  857                B     LHGAAA             * JUMP TO END                         4  2741  B P52               69  2752
  858         LGGAAA MCW   LWFAAA,0&X2        * MOVE 0 IN STACK                     7  2745  M 23K 0!0           69  8232     000+2
  859         LHGAAA NOP                      * END OF LESSOREQUAL                  1  2752  N                   69
  860                MCS   0&X2,0&X2          * CLEAR WM IN STACK                   7  2753  Z 0!0 0!0           69   000+2   000+2
  861         * POP (5)
  862                MA    LOFAAA,X2          * ADD -5 TO STACK POINTER             7  2760  # 16L 094           69  8163     094
  863                BCE   LHBAAA,5&X2,       * JUMP TO BOTTOM OF WHILE             8  2767  B Q82 0!5           70  2882     005+2
  864         *
  865         ***************************************
  866         * BEGIN [BLOCK ENDING AT LFBAAA]
  867         *
  868         * ASSIGNMENT (EXP = (EXP * BASE))
  869         * MULTIPLY (EXP * BASE)
  870         * LOCAL VARIABLE (EXP : 14+X3)
  871         * PUSH (14+X3:5)
  872                MA    LMFAAA,X2          * ADD 5 TO STACK POINTER              7  2775  # 14R 094           70  8149     094
  873                LCA   14&X3,0&X2         * LOAD MEMORY 14&X3 IN STACK          7  2782  L 0A4 0!0           70   014+3   000+2
  874         * PARAMETER VARIABLE (BASE : 15989+X3)
  875         * PUSH (15989+X3:5)
  876                MA    LMFAAA,X2          * ADD 5 TO STACK POINTER              7  2789  # 14R 094           70  8149     094
  877                LCA   15989&X3,0&X2      * LOAD MEMORY 15989&X3 IN STACK       7  2796  L IHI 0!0           70 15989+3   000+2
  878                M     15995&X2,6&X2      * MULTIPLY STACK AT -5 TO STACK A     7  2803  @ IRE 0!6           71 15995+2   006+2
  879                SW    2&X2               * SET WM IN STACK AT 2                4  2810  , 0!2               71   002+2
  880                LCA   6&X2,15995&X2      * LOAD STACK AT 6 TO STACK AT -5      7  2814  L 0!6 IRE           71   006+2 15995+2
  881         * POP (5)
  882                MA    LOFAAA,X2          * ADD -5 TO STACK POINTER             7  2821  # 16L 094           71  8163     094
  883         * PUSH (LUFAAA:3)
  884                MA    LKFAAA,X2          * ADD 3 TO STACK POINTER              7  2828  # 13P 094           71  8137     094
  885                LCA   LUFAAA,0&X2        * LOAD DATA 014 IN STACK              7  2835  L 21! 0!0           71  8210     000+2
  886                MA    X3,0&X2            * ADD X3 TO STACK                     7  2842  # 099 0!0           72   099     000+2
  887         * POP (X1:3)
  888                LCA   0&X2,X1            * LOAD STACK IN X1                    7  2849  L 0!0 089           72   000+2   089
  889                MA    LRFAAA,X2          * ADD -3 TO STACK POINTER             7  2856  # 18L 094           72  8183     094
  890         * POP (0+X1:5)
  891                LCA   0&X2,0&X1          * LOAD STACK IN 0&X1                  7  2863  L 0!0 0'0           72   000+2   000+1
  892                MA    LOFAAA,X2          * ADD -5 TO STACK POINTER             7  2870  # 16L 094           72  8163     094
  893         * END ASSIGNMENT (EXP = (EXP * BASE))
  894         *
  895         LFBAAA NOP                      * LAST BLOCK INSTRUCTION              1  2877  N                   72
  896         * END [BLOCK ENDING AT LFBAAA]
  897         ***************************************
1                                                                                                         PAGE   17
0 SEQ PG LIN  LABEL  OP    OPERANDS                                            SFX CT  LOCN  INSTRUCTION TYPE  CARD A-ADDR  B-ADDR

  898         *
  899                B     LGBAAA             * JUMP TO TOP OF WHILE                4  2878  B O46               73  2646
  900         *
  901         LHBAAA NOP                      * BOTTOM OF WHILE                     1  2882  N                   73
  902         * END WHILE [WHILE ((EXP <= (VALUE / BASE))) [BLOCK ENDING AT LFBAAA] TOP:L
  903         *
  904         * WHILE [WHILE (EXP) [BLOCK ENDING AT LIBAAA] TOP:LJBAAA BOTTOM:LKBAAA]
  905         LJBAAA NOP                      * TOP OF WHILE                        1  2883  N                   73
  906         * LOCAL VARIABLE (EXP : 14+X3)
  907         * PUSH (14+X3:5)
  908                MA    LMFAAA,X2          * ADD 5 TO STACK POINTER              7  2884  # 14R 094           73  8149     094
  909                LCA   14&X3,0&X2         * LOAD MEMORY 14&X3 IN STACK          7  2891  L 0A4 0!0           73   014+3   000+2
  910                MCS   0&X2,0&X2          * CLEAR WM IN STACK                   7  2898  Z 0!0 0!0           73   000+2   000+2
  911         * POP (5)
  912                MA    LOFAAA,X2          * ADD -5 TO STACK POINTER             7  2905  # 16L 094           73  8163     094
  913                BCE   LKBAAA,5&X2,       * JUMP TO BOTTOM OF WHILE             8  2912  B C37 0!5           74  3337     005+2
  914         *
  915         ***************************************
  916         * BEGIN [BLOCK ENDING AT LIBAAA]
  917         *
  918         * ASSIGNMENT ((*(STR++)) = (DIGITS[(VALUE / EXP)]))
  919         * SUBSCRIPT (DIGITS[(VALUE / EXP)])
  920         * LOCAL VARIABLE (DIGITS : 9+X3)
  921         * PUSH (9+X3:3)
  922                MA    LKFAAA,X2          * ADD 3 TO STACK POINTER              7  2920  # 13P 094           74  8137     094
  923                LCA   9&X3,0&X2          * LOAD MEMORY 9&X3 IN STACK           7  2927  L 0?9 0!0           74   009+3   000+2
  924         * DIVIDE (VALUE / EXP)
  925         * LOCAL VARIABLE (EXP : 14+X3)
  926         * PUSH (14+X3:5)
  927                MA    LMFAAA,X2          * ADD 5 TO STACK POINTER              7  2934  # 14R 094           74  8149     094
  928                LCA   14&X3,0&X2         * LOAD MEMORY 14&X3 IN STACK          7  2941  L 0A4 0!0           74   014+3   000+2
  929         * PARAMETER VARIABLE (VALUE : 15997+X3)
  930         * PUSH (15997+X3:5)
  931                MA    LMFAAA,X2          * ADD 5 TO STACK POINTER              7  2948  # 14R 094           75  8149     094
  932                LCA   15997&X3,0&X2      * LOAD MEMORY 15997&X3 IN STACK       7  2955  L IIG 0!0           75 15997+3   000+2
  933                B     SNPDIV             * JUMP TO SNIPPET SNIP_DIV            4  2962  B G1Y               75  7718
  934         *
  935                MCW   0&X2,15995&X2      * MOVE STACK IN STACK AT -5           7  2966  M 0!0 IRE           75   000+2 15995+2
  936         * POP (5)
  937                MA    LOFAAA,X2          * ADD -5 TO STACK POINTER             7  2973  # 16L 094           75  8163     094
  938         * PUT RAW INDEX ON THE STACK
  939         * PUSH (LTFAAA:5)
  940                MA    LMFAAA,X2          * ADD 5 TO STACK POINTER              7  2980  # 14R 094           75  8149     094
  941                LCA   LTFAAA,0&X2        * LOAD DATA 00001 IN STACK            7  2987  L 19P 0!0           76  8197     000+2
  942                M     15995&X2,6&X2      * MULTIPLY STACK AT -5 TO STACK A     7  2994  @ IRE 0!6           76 15995+2   006+2
  943                SW    2&X2               * SET WM IN STACK AT 2                4  3001  , 0!2               76   002+2
  944                LCA   6&X2,15995&X2      * LOAD STACK AT 6 IN STACK AT -5      7  3005  L 0!6 IRE           76   006+2 15995+2
  945         * POP (5)
  946                MA    LOFAAA,X2          * ADD -5 TO STACK POINTER             7  3012  # 16L 094           76  8163     094
  947         * STACK TOP IS NOW ARRAY INDEX
1                                                                                                         PAGE   18
0 SEQ PG LIN  LABEL  OP    OPERANDS                                            SFX CT  LOCN  INSTRUCTION TYPE  CARD A-ADDR  B-ADDR

  948                B     NMNPTR             * JUMP TO SNIPPET NUMBER_TO_POINT     4  3019  B E0Z               76  7509
  949         *
  950                MA    0&X2,15997&X2      * ADD STACK TO STACK AT -3            7  3023  # 0!0 IRG           77   000+2 15997+2
  951         * POP (3)
  952                MA    LRFAAA,X2          * ADD -3 TO STACK POINTER             7  3030  # 18L 094           77  8183     094
  953         * STACK TOP IS LOCATION IN ARRAY NOW
  954         * END SUBSCRIPT (DIGITS[(VALUE / EXP)])
  955         * POP (X1:3)
  956                LCA   0&X2,X1            * LOAD STACK IN X1                    7  3037  L 0!0 089           77   000+2   089
  957                MA    LRFAAA,X2          * ADD -3 TO STACK POINTER             7  3044  # 18L 094           77  8183     094
  958         * PUSH (0+X1:1)
  959                MA    LAGAAA,X2          * ADD 1 TO STACK POINTER              7  3051  # 09Q 094           77  8098     094
  960                LCA   0&X1,0&X2          * LOAD MEMORY 0&X1 IN STACK           7  3058  L 0'0 0!0           78   000+1   000+2
  961         * POSTINCREMENT (STR++)
  962         * PUSH (LBGAAA:3)
  963                MA    LKFAAA,X2          * ADD 3 TO STACK POINTER              7  3065  # 13P 094           78  8137     094
  964                LCA   LBGAAA,0&X2        * LOAD DATA I9B IN STACK              7  3072  L 10P 0!0           78  8107     000+2
  965                MA    X3,0&X2            * ADD X3 TO STACK                     7  3079  # 099 0!0           78   099     000+2
  966         * POP (X1:3)
  967                LCA   0&X2,X1            * LOAD STACK IN X1                    7  3086  L 0!0 089           78   000+2   089
  968                MA    LRFAAA,X2          * ADD -3 TO STACK POINTER             7  3093  # 18L 094           79  8183     094
  969         * PUSH (0+X1:3)
  970                MA    LKFAAA,X2          * ADD 3 TO STACK POINTER              7  3100  # 13P 094           79  8137     094
  971                LCA   0&X1,0&X2          * LOAD MEMORY 0&X1 IN STACK           7  3107  L 0'0 0!0           79   000+1   000+2
  972                MA    LAGAAA,0&X1        * POSTINCREMENT POINTER AT X1         7  3114  # 09Q 0'0           79  8098     000+1
  973         * POP (X1:3)
  974                LCA   0&X2,X1            * LOAD STACK IN X1                    7  3121  L 0!0 089           79   000+2   089
  975                MA    LRFAAA,X2          * ADD -3 TO STACK POINTER             7  3128  # 18L 094           80  8183     094
  976         * POP (0+X1:1)
  977                LCA   0&X2,0&X1          * LOAD STACK IN 0&X1                  7  3135  L 0!0 0'0           80   000+2   000+1
  978                MA    LCGAAA,X2          * ADD -1 TO STACK POINTER             7  3142  # 11L 094           80  8113     094
  979         * END ASSIGNMENT ((*(STR++)) = (DIGITS[(VALUE / EXP)]))
  980         *
  981         * ASSIGNMENT (VALUE = (VALUE % EXP))
  982         * MODULO (%) (VALUE % EXP)
  983         * LOCAL VARIABLE (EXP : 14+X3)
  984         * PUSH (14+X3:5)
  985                MA    LMFAAA,X2          * ADD 5 TO STACK POINTER              7  3149  # 14R 094           80  8149     094
  986                LCA   14&X3,0&X2         * LOAD MEMORY 14&X3 IN STACK          7  3156  L 0A4 0!0           80   014+3   000+2
  987         * PARAMETER VARIABLE (VALUE : 15997+X3)
  988         * PUSH (15997+X3:5)
  989                MA    LMFAAA,X2          * ADD 5 TO STACK POINTER              7  3163  # 14R 094           81  8149     094
  990                LCA   15997&X3,0&X2      * LOAD MEMORY 15997&X3 IN STACK       7  3170  L IIG 0!0           81 15997+3   000+2
  991                B     SNPDIV             * JUMP TO SNIPPET SNIP_DIV            4  3177  B G1Y               81  7718
  992         *
  993         * POP (5)
  994                MA    LOFAAA,X2          * ADD -5 TO STACK POINTER             7  3181  # 16L 094           81  8163     094
  995         * PUSH (LRFAAA:3)
  996                MA    LKFAAA,X2          * ADD 3 TO STACK POINTER              7  3188  # 13P 094           81  8137     094
  997                LCA   LRFAAA,0&X2        * LOAD DATA I9G IN STACK              7  3195  L 18L 0!0           81  8183     000+2
1                                                                                                         PAGE   19
0 SEQ PG LIN  LABEL  OP    OPERANDS                                            SFX CT  LOCN  INSTRUCTION TYPE  CARD A-ADDR  B-ADDR

  998                MA    X3,0&X2            * ADD X3 TO STACK                     7  3202  # 099 0!0           82   099     000+2
  999         * POP (X1:3)
 1000                LCA   0&X2,X1            * LOAD STACK IN X1                    7  3209  L 0!0 089           82   000+2   089
 1001                MA    LRFAAA,X2          * ADD -3 TO STACK POINTER             7  3216  # 18L 094           82  8183     094
 1002         * POP (0+X1:5)
 1003                LCA   0&X2,0&X1          * LOAD STACK IN 0&X1                  7  3223  L 0!0 0'0           82   000+2   000+1
 1004                MA    LOFAAA,X2          * ADD -5 TO STACK POINTER             7  3230  # 16L 094           82  8163     094
 1005         * END ASSIGNMENT (VALUE = (VALUE % EXP))
 1006         *
 1007         * ASSIGNMENT (EXP = (EXP / BASE))
 1008         * DIVIDE (EXP / BASE)
 1009         * PARAMETER VARIABLE (BASE : 15989+X3)
 1010         * PUSH (15989+X3:5)
 1011                MA    LMFAAA,X2          * ADD 5 TO STACK POINTER              7  3237  # 14R 094           83  8149     094
 1012                LCA   15989&X3,0&X2      * LOAD MEMORY 15989&X3 IN STACK       7  3244  L IHI 0!0           83 15989+3   000+2
 1013         * LOCAL VARIABLE (EXP : 14+X3)
 1014         * PUSH (14+X3:5)
 1015                MA    LMFAAA,X2          * ADD 5 TO STACK POINTER              7  3251  # 14R 094           83  8149     094
 1016                LCA   14&X3,0&X2         * LOAD MEMORY 14&X3 IN STACK          7  3258  L 0A4 0!0           83   014+3   000+2
 1017                B     SNPDIV             * JUMP TO SNIPPET SNIP_DIV            4  3265  B G1Y               83  7718
 1018         *
 1019                MCW   0&X2,15995&X2      * MOVE STACK IN STACK AT -5           7  3269  M 0!0 IRE           83   000+2 15995+2
 1020         * POP (5)
 1021                MA    LOFAAA,X2          * ADD -5 TO STACK POINTER             7  3276  # 16L 094           84  8163     094
 1022         * PUSH (LUFAAA:3)
 1023                MA    LKFAAA,X2          * ADD 3 TO STACK POINTER              7  3283  # 13P 094           84  8137     094
 1024                LCA   LUFAAA,0&X2        * LOAD DATA 014 IN STACK              7  3290  L 21! 0!0           84  8210     000+2
 1025                MA    X3,0&X2            * ADD X3 TO STACK                     7  3297  # 099 0!0           84   099     000+2
 1026         * POP (X1:3)
 1027                LCA   0&X2,X1            * LOAD STACK IN X1                    7  3304  L 0!0 089           84   000+2   089
 1028                MA    LRFAAA,X2          * ADD -3 TO STACK POINTER             7  3311  # 18L 094           85  8183     094
 1029         * POP (0+X1:5)
 1030                LCA   0&X2,0&X1          * LOAD STACK IN 0&X1                  7  3318  L 0!0 0'0           85   000+2   000+1
 1031                MA    LOFAAA,X2          * ADD -5 TO STACK POINTER             7  3325  # 16L 094           85  8163     094
 1032         * END ASSIGNMENT (EXP = (EXP / BASE))
 1033         *
 1034         LIBAAA NOP                      * LAST BLOCK INSTRUCTION              1  3332  N                   85
 1035         * END [BLOCK ENDING AT LIBAAA]
 1036         ***************************************
 1037         *
 1038                B     LJBAAA             * JUMP TO TOP OF WHILE                4  3333  B Q83               85  2883
 1039         *
 1040         LKBAAA NOP                      * BOTTOM OF WHILE                     1  3337  N                   85
 1041         * END WHILE [WHILE (EXP) [BLOCK ENDING AT LIBAAA] TOP:LJBAAA BOTTOM:LKBAAA]
 1042         *
 1043         * ASSIGNMENT ((*STR) = '\0')
 1044         * CONSTANT ('\0' : EOS)
 1045         * PUSH (EOS:1)
 1046                MA    LAGAAA,X2          * ADD 1 TO STACK POINTER              7  3338  # 09Q 094           85  8098     094
 1047                LCA   EOS,0&X2           * LOAD MEMORY EOS IN STACK            7  3345  L 345 0!0           86   345     000+2
1                                                                                                         PAGE   20
0 SEQ PG LIN  LABEL  OP    OPERANDS                                            SFX CT  LOCN  INSTRUCTION TYPE  CARD A-ADDR  B-ADDR

 1048         * PARAMETER VARIABLE (STR : 15992+X3)
 1049         * PUSH (15992+X3:3)
 1050                MA    LKFAAA,X2          * ADD 3 TO STACK POINTER              7  3352  # 13P 094           86  8137     094
 1051                LCA   15992&X3,0&X2      * LOAD MEMORY 15992&X3 IN STACK       7  3359  L IIB 0!0           86 15992+3   000+2
 1052         * POP (X1:3)
 1053                LCA   0&X2,X1            * LOAD STACK IN X1                    7  3366  L 0!0 089           86   000+2   089
 1054                MA    LRFAAA,X2          * ADD -3 TO STACK POINTER             7  3373  # 18L 094           86  8183     094
 1055         * POP (0+X1:1)
 1056                LCA   0&X2,0&X1          * LOAD STACK IN 0&X1                  7  3380  L 0!0 0'0           87   000+2   000+1
 1057                MA    LCGAAA,X2          * ADD -1 TO STACK POINTER             7  3387  # 11L 094           87  8113     094
 1058         * END ASSIGNMENT ((*STR) = '\0')
 1059         *
 1060         * PUT ON STACK RETURN VALUE (START)
 1061         * LOCAL VARIABLE (START : 6+X3)
 1062         * PUSH (6+X3:3)
 1063                MA    LKFAAA,X2          * ADD 3 TO STACK POINTER              7  3394  # 13P 094           87  8137     094
 1064                LCA   6&X3,0&X2          * LOAD MEMORY 6&X3 IN STACK           7  3401  L 0?6 0!0           87   006+3   000+2
 1065         * POP (15984+X3:3)
 1066                LCA   0&X2,15984&X3      * LOAD STACK IN 15984&X3              7  3408  L 0!0 IHD           87   000+2 15984+3
 1067                MA    LRFAAA,X2          * ADD -3 TO STACK POINTER             7  3415  # 18L 094           88  8183     094
 1068         *
 1069         LZAAAA NOP                      * LAST BLOCK INSTRUCTION              1  3422  N                   88
 1070         * POP (14)
 1071                MA    LIGAAA,X2          * ADD -14 TO STACK POINTER            7  3423  # 12Q 094           88  8128     094
 1072         * END [BLOCK ENDING AT LZAAAA]
 1073         ***************************************
 1074         *
 1075                LCA   3&X3,X1            * LOAD RETURN ADDRESS IN X1           7  3430  L 0?3 089           88   003+3   089
 1076                B     0&X1               * JUMP BACK TO CALLER IN X1           4  3437  B 0'0               88   000+1
 1077         *
 1078         ***************************************************************************
 1079         * END FUNCTION : ITOA
 1080         ***************************************************************************
 1081         *
 1082         ***************************************************************************
 1083         * FUNCTION : PRINTF
 1084         ***************************************************************************
 1085         LAEAAA SBR   3&X3               * SAVE RETURN ADDRESS IN REGISTER     4  3441  H 0?3               88   003+3
 1086         * SET THE RIGHT WM AND CLEAR THE WRONG ONES
 1087                SW    1&X3               * SET WM AT 1&X3                      4  3445  , 0?1               88   001+3
 1088                CW    2&X3               * CLEAR WM AT 2&X3                    4  3449  ) 0?2               89   002+3
 1089                CW    3&X3               * CLEAR WM AT 3&X3                    4  3453  ) 0?3               89   003+3
 1090         *
 1091         ***************************************
 1092         * BEGIN [BLOCK ENDING AT LBEAAA]
 1093         * ARG SIZE:3 OFFSET:3
 1094         * C SIZE:1 OFFSET:6
 1095         * ADDRP SIZE:3 OFFSET:7
 1096         * ADDRC SIZE:1 OFFSET:10
 1097         *
1                                                                                                         PAGE   21
0 SEQ PG LIN  LABEL  OP    OPERANDS                                            SFX CT  LOCN  INSTRUCTION TYPE  CARD A-ADDR  B-ADDR

 1098         * PUSH (11)
 1099                MA    LBHAAA,X2          * ADD 11 TO STACK POINTER             7  3457  # 11! 094           89  8110     094
 1100         * ASSIGNMENT (ARG = ((*CHAR) (( &CFORMAT_STR ) + 15997)))
 1101         * ADDITION (( &CFORMAT_STR ) + 15997)
 1102         * ADDRESSOF ( &CFORMAT_STR )
 1103         * PUSH (LRFAAA:3)
 1104                MA    LKFAAA,X2          * ADD 3 TO STACK POINTER              7  3464  # 13P 094           89  8137     094
 1105                LCA   LRFAAA,0&X2        * LOAD DATA I9G IN STACK              7  3471  L 18L 0!0           89  8183     000+2
 1106                MA    X3,0&X2            * ADD X3 TO STACK                     7  3478  # 099 0!0           89   099     000+2
 1107         * CONSTANT (15997 : LRFAAA)
 1108         * PUSH (LRFAAA:3)
 1109                MA    LKFAAA,X2          * ADD 3 TO STACK POINTER              7  3485  # 13P 094           90  8137     094
 1110                LCA   LRFAAA,0&X2        * LOAD DATA I9G IN STACK              7  3492  L 18L 0!0           90  8183     000+2
 1111                MA    0&X2,15997&X2      * ADD STACK TO STACK AT -3            7  3499  # 0!0 IRG           90   000+2 15997+2
 1112         * POP (3)
 1113                MA    LRFAAA,X2          * ADD -3 TO STACK POINTER             7  3506  # 18L 094           90  8183     094
 1114         * PUSH (LVFAAA:3)
 1115                MA    LKFAAA,X2          * ADD 3 TO STACK POINTER              7  3513  # 13P 094           90  8137     094
 1116                LCA   LVFAAA,0&X2        * LOAD DATA 006 IN STACK              7  3520  L 21R 0!0           91  8219     000+2
 1117                MA    X3,0&X2            * ADD X3 TO STACK                     7  3527  # 099 0!0           91   099     000+2
 1118         * POP (X1:3)
 1119                LCA   0&X2,X1            * LOAD STACK IN X1                    7  3534  L 0!0 089           91   000+2   089
 1120                MA    LRFAAA,X2          * ADD -3 TO STACK POINTER             7  3541  # 18L 094           91  8183     094
 1121         * POP (0+X1:3)
 1122                LCA   0&X2,0&X1          * LOAD STACK IN 0&X1                  7  3548  L 0!0 0'0           91   000+2   000+1
 1123                MA    LRFAAA,X2          * ADD -3 TO STACK POINTER             7  3555  # 18L 094           92  8183     094
 1124         * END ASSIGNMENT (ARG = ((*CHAR) (( &CFORMAT_STR ) + 15997)))
 1125         *
 1126         * WHILE [WHILE (((C = (*(CFORMAT_STR++))) != '\0')) [BLOCK ENDING AT LCEAAA
 1127         LXEAAA NOP                      * TOP OF WHILE                        1  3562  N                   92
 1128         * NOTEQUAL (!=) ((C = (*(CFORMAT_STR++))) != '\0')
 1129         * ASSIGNMENT (C = (*(CFORMAT_STR++)))
 1130         * DEREFERENCEEXPRESSION (*(CFORMAT_STR++))
 1131         * POSTINCREMENT (CFORMAT_STR++)
 1132         * PUSH (LRFAAA:3)
 1133                MA    LKFAAA,X2          * ADD 3 TO STACK POINTER              7  3563  # 13P 094           92  8137     094
 1134                LCA   LRFAAA,0&X2        * LOAD DATA I9G IN STACK              7  3570  L 18L 0!0           92  8183     000+2
 1135                MA    X3,0&X2            * ADD X3 TO STACK                     7  3577  # 099 0!0           92   099     000+2
 1136         * POP (X1:3)
 1137                LCA   0&X2,X1            * LOAD STACK IN X1                    7  3584  L 0!0 089           92   000+2   089
 1138                MA    LRFAAA,X2          * ADD -3 TO STACK POINTER             7  3591  # 18L 094           93  8183     094
 1139         * PUSH (0+X1:3)
 1140                MA    LKFAAA,X2          * ADD 3 TO STACK POINTER              7  3598  # 13P 094           93  8137     094
 1141                LCA   0&X1,0&X2          * LOAD MEMORY 0&X1 IN STACK           7  3605  L 0'0 0!0           93   000+1   000+2
 1142                MA    LAGAAA,0&X1        * POSTINCREMENT POINTER AT X1         7  3612  # 09Q 0'0           93  8098     000+1
 1143         * POP (X1:3)
 1144                LCA   0&X2,X1            * LOAD STACK IN X1                    7  3619  L 0!0 089           93   000+2   089
 1145                MA    LRFAAA,X2          * ADD -3 TO STACK POINTER             7  3626  # 18L 094           94  8183     094
 1146         * PUSH (0+X1:1)
 1147                MA    LAGAAA,X2          * ADD 1 TO STACK POINTER              7  3633  # 09Q 094           94  8098     094
1                                                                                                         PAGE   22
0 SEQ PG LIN  LABEL  OP    OPERANDS                                            SFX CT  LOCN  INSTRUCTION TYPE  CARD A-ADDR  B-ADDR

 1148                LCA   0&X1,0&X2          * LOAD MEMORY 0&X1 IN STACK           7  3640  L 0'0 0!0           94   000+1   000+2
 1149         * END DEREFERENCEEXPRESSION (*(CFORMAT_STR++))
 1150         *
 1151         * PUSH (LEHAAA:3)
 1152                MA    LKFAAA,X2          * ADD 3 TO STACK POINTER              7  3647  # 13P 094           94  8137     094
 1153                LCA   LEHAAA,0&X2        * LOAD DATA 007 IN STACK              7  3654  L 11R 0!0           94  8119     000+2
 1154                MA    X3,0&X2            * ADD X3 TO STACK                     7  3661  # 099 0!0           95   099     000+2
 1155         * POP (X1:3)
 1156                LCA   0&X2,X1            * LOAD STACK IN X1                    7  3668  L 0!0 089           95   000+2   089
 1157                MA    LRFAAA,X2          * ADD -3 TO STACK POINTER             7  3675  # 18L 094           95  8183     094
 1158                LCA   0&X2,0&X1          * LOAD STACK IN MEMORY X1             7  3682  L 0!0 0'0           95   000+2   000+1
 1159         * END ASSIGNMENT (C = (*(CFORMAT_STR++)))
 1160         *
 1161         * CONSTANT ('\0' : EOS)
 1162         * PUSH (EOS:1)
 1163                MA    LAGAAA,X2          * ADD 1 TO STACK POINTER              7  3689  # 09Q 094           95  8098     094
 1164                LCA   EOS,0&X2           * LOAD MEMORY EOS IN STACK            7  3696  L 345 0!0           96   345     000+2
 1165                C     0&X2,15999&X2      * COMPARE STACK TO STACK AT -1        7  3703  C 0!0 IRI           96   000+2 15999+2
 1166         * POP (1)
 1167                MA    LCGAAA,X2          * ADD -1 TO STACK POINTER             7  3710  # 11L 094           96  8113     094
 1168         * POP (1)
 1169                MA    LCGAAA,X2          * ADD -1 TO STACK POINTER             7  3717  # 11L 094           96  8113     094
 1170         * PUSH (LTFAAA:5)
 1171                MA    LMFAAA,X2          * ADD 5 TO STACK POINTER              7  3724  # 14R 094           96  8149     094
 1172                LCA   LTFAAA,0&X2        * LOAD DATA 00001 IN STACK            7  3731  L 19P 0!0           97  8197     000+2
 1173                BE    LCHAAA             * JUMP IF EQUAL                       5  3738  B G47 S             97  3747
 1174                B     LDHAAA             * JUMP TO END                         4  3743  B G54               97  3754
 1175         LCHAAA MCW   LWFAAA,0&X2        * MOVE 0 IN STACK                     7  3747  M 23K 0!0           97  8232     000+2
 1176         LDHAAA NOP                      * END OF NOTEQUAL                     1  3754  N                   97
 1177                MCS   0&X2,0&X2          * CLEAR WM IN STACK                   7  3755  Z 0!0 0!0           97   000+2   000+2
 1178         * POP (5)
 1179                MA    LOFAAA,X2          * ADD -5 TO STACK POINTER             7  3762  # 16L 094           97  8163     094
 1180                BCE   LYEAAA,5&X2,       * JUMP TO BOTTOM OF WHILE             8  3769  B X6Y 0!5           98  5768     005+2
 1181         *
 1182         ***************************************
 1183         * BEGIN [BLOCK ENDING AT LCEAAA]
 1184         *
 1185         * IF [IF ((C != '%') THEN [BLOCK ENDING AT LDEAAA] ELSE [BLOCK ENDING AT LE
 1186         * NOTEQUAL (!=) (C != '%')
 1187         * LOCAL VARIABLE (C : 7+X3)
 1188         * PUSH (7+X3:1)
 1189                MA    LAGAAA,X2          * ADD 1 TO STACK POINTER              7  3777  # 09Q 094           98  8098     094
 1190                LCA   7&X3,0&X2          * LOAD MEMORY 7&X3 IN STACK           7  3784  L 0?7 0!0           98   007+3   000+2
 1191         * CONSTANT ('%' : LHHAAA)
 1192         * PUSH (LHHAAA:1)
 1193                MA    LAGAAA,X2          * ADD 1 TO STACK POINTER              7  3791  # 09Q 094           98  8098     094
 1194                LCA   LHHAAA,0&X2        * LOAD DATA % IN STACK                7  3798  L 12K 0!0           98  8122     000+2
 1195                C     0&X2,15999&X2      * COMPARE STACK TO STACK AT -1        7  3805  C 0!0 IRI           99   000+2 15999+2
 1196         * POP (1)
 1197                MA    LCGAAA,X2          * ADD -1 TO STACK POINTER             7  3812  # 11L 094           99  8113     094
1                                                                                                         PAGE   23
0 SEQ PG LIN  LABEL  OP    OPERANDS                                            SFX CT  LOCN  INSTRUCTION TYPE  CARD A-ADDR  B-ADDR

 1198         * POP (1)
 1199                MA    LCGAAA,X2          * ADD -1 TO STACK POINTER             7  3819  # 11L 094           99  8113     094
 1200         * PUSH (LTFAAA:5)
 1201                MA    LMFAAA,X2          * ADD 5 TO STACK POINTER              7  3826  # 14R 094           99  8149     094
 1202                LCA   LTFAAA,0&X2        * LOAD DATA 00001 IN STACK            7  3833  L 19P 0!0           99  8197     000+2
 1203                BE    LFHAAA             * JUMP IF EQUAL                       5  3840  B H49 S            100  3849
 1204                B     LGHAAA             * JUMP TO END                         4  3845  B H56              100  3856
 1205         LFHAAA MCW   LWFAAA,0&X2        * MOVE 0 IN STACK                     7  3849  M 23K 0!0          100  8232     000+2
 1206         LGHAAA NOP                      * END OF NOTEQUAL                     1  3856  N                  100
 1207                MCS   0&X2,0&X2          * CLEAR WM IN STACK                   7  3857  Z 0!0 0!0          100   000+2   000+2
 1208         * POP (5)
 1209                MA    LOFAAA,X2          * ADD -5 TO STACK POINTER             7  3864  # 16L 094          100  8163     094
 1210                BCE   LVEAAA,5&X2,       * JUMP WHEN FALSE                     8  3871  B I58 0!5          100  3958     005+2
 1211         *
 1212         ***************************************
 1213         * BEGIN [BLOCK ENDING AT LDEAAA]
 1214         *
 1215         * FUNCTION CALL PUTCHAR(C)
 1216         * PUSH (5)
 1217                MA    LMFAAA,X2          * ADD 5 TO STACK POINTER              7  3879  # 14R 094          101  8149     094
 1218         * LOCAL VARIABLE (C : 7+X3)
 1219         * PUSH (7+X3:1)
 1220                MA    LAGAAA,X2          * ADD 1 TO STACK POINTER              7  3886  # 09Q 094          101  8098     094
 1221                LCA   7&X3,0&X2          * LOAD MEMORY 7&X3 IN STACK           7  3893  L 0?7 0!0          101   007+3   000+2
 1222         * CREATE A STACK FRAME WITH X3 POINTER TO IT
 1223         * PUSH (X3:3)
 1224                MA    LKFAAA,X2          * ADD 3 TO STACK POINTER              7  3900  # 13P 094          101  8137     094
 1225                LCA   X3,0&X2            * LOAD X3 IN STACK                    7  3907  L 099 0!0          101   099     000+2
 1226                MCW   X2,X3              * MOVE X2 IN X3                       7  3914  M 094 099          102   094     099
 1227         *
 1228                B     LWCAAA             * JUMP TO FUNCTION PUTCHAR            4  3921  B X8Y              102  5788
 1229         *
 1230         * POP (X3:3)
 1231                LCA   0&X2,X3            * LOAD STACK IN X3                    7  3925  L 0!0 099          102   000+2   099
 1232                MA    LRFAAA,X2          * ADD -3 TO STACK POINTER             7  3932  # 18L 094          102  8183     094
 1233         * POP (1)
 1234                MA    LCGAAA,X2          * ADD -1 TO STACK POINTER             7  3939  # 11L 094          102  8113     094
 1235         * POP (5)
 1236                MA    LOFAAA,X2          * ADD -5 TO STACK POINTER             7  3946  # 16L 094          102  8163     094
 1237         * END FUNCTION CALL PUTCHAR(C)
 1238         *
 1239         LDEAAA NOP                      * LAST BLOCK INSTRUCTION              1  3953  N                  103
 1240         * END [BLOCK ENDING AT LDEAAA]
 1241         ***************************************
 1242         *
 1243                B     LWEAAA             * JUMP WHEN TRUE                      4  3954  B X6S              103  5762
 1244         LVEAAA NOP                      * EXECUTED WHEN FALSE                 1  3958  N                  103
 1245         *
 1246         ***************************************
 1247         * BEGIN [BLOCK ENDING AT LEEAAA]
1                                                                                                         PAGE   24
0 SEQ PG LIN  LABEL  OP    OPERANDS                                            SFX CT  LOCN  INSTRUCTION TYPE  CARD A-ADDR  B-ADDR

 1248         *
 1249         * ASSIGNMENT (C = (*(CFORMAT_STR++)))
 1250         * DEREFERENCEEXPRESSION (*(CFORMAT_STR++))
 1251         * POSTINCREMENT (CFORMAT_STR++)
 1252         * PUSH (LRFAAA:3)
 1253                MA    LKFAAA,X2          * ADD 3 TO STACK POINTER              7  3959  # 13P 094          103  8137     094
 1254                LCA   LRFAAA,0&X2        * LOAD DATA I9G IN STACK              7  3966  L 18L 0!0          103  8183     000+2
 1255                MA    X3,0&X2            * ADD X3 TO STACK                     7  3973  # 099 0!0          103   099     000+2
 1256         * POP (X1:3)
 1257                LCA   0&X2,X1            * LOAD STACK IN X1                    7  3980  L 0!0 089          103   000+2   089
 1258                MA    LRFAAA,X2          * ADD -3 TO STACK POINTER             7  3987  # 18L 094          104  8183     094
 1259         * PUSH (0+X1:3)
 1260                MA    LKFAAA,X2          * ADD 3 TO STACK POINTER              7  3994  # 13P 094          104  8137     094
 1261                LCA   0&X1,0&X2          * LOAD MEMORY 0&X1 IN STACK           7  4001  L 0'0 0!0          104   000+1   000+2
 1262                MA    LAGAAA,0&X1        * POSTINCREMENT POINTER AT X1         7  4008  # 09Q 0'0          104  8098     000+1
 1263         * POP (X1:3)
 1264                LCA   0&X2,X1            * LOAD STACK IN X1                    7  4015  L 0!0 089          104   000+2   089
 1265                MA    LRFAAA,X2          * ADD -3 TO STACK POINTER             7  4022  # 18L 094          105  8183     094
 1266         * PUSH (0+X1:1)
 1267                MA    LAGAAA,X2          * ADD 1 TO STACK POINTER              7  4029  # 09Q 094          105  8098     094
 1268                LCA   0&X1,0&X2          * LOAD MEMORY 0&X1 IN STACK           7  4036  L 0'0 0!0          105   000+1   000+2
 1269         * END DEREFERENCEEXPRESSION (*(CFORMAT_STR++))
 1270         *
 1271         * PUSH (LEHAAA:3)
 1272                MA    LKFAAA,X2          * ADD 3 TO STACK POINTER              7  4043  # 13P 094          105  8137     094
 1273                LCA   LEHAAA,0&X2        * LOAD DATA 007 IN STACK              7  4050  L 11R 0!0          105  8119     000+2
 1274                MA    X3,0&X2            * ADD X3 TO STACK                     7  4057  # 099 0!0          106   099     000+2
 1275         * POP (X1:3)
 1276                LCA   0&X2,X1            * LOAD STACK IN X1                    7  4064  L 0!0 089          106   000+2   089
 1277                MA    LRFAAA,X2          * ADD -3 TO STACK POINTER             7  4071  # 18L 094          106  8183     094
 1278         * POP (0+X1:1)
 1279                LCA   0&X2,0&X1          * LOAD STACK IN 0&X1                  7  4078  L 0!0 0'0          106   000+2   000+1
 1280                MA    LCGAAA,X2          * ADD -1 TO STACK POINTER             7  4085  # 11L 094          106  8113     094
 1281         * END ASSIGNMENT (C = (*(CFORMAT_STR++)))
 1282         *
 1283         * IF [IF ((C == '%') THEN [BLOCK ENDING AT LFEAAA] ELSE [IF ((C == 'C') THE
 1284         * EQUAL (C == '%')
 1285         * LOCAL VARIABLE (C : 7+X3)
 1286         * PUSH (7+X3:1)
 1287                MA    LAGAAA,X2          * ADD 1 TO STACK POINTER              7  4092  # 09Q 094          107  8098     094
 1288                LCA   7&X3,0&X2          * LOAD MEMORY 7&X3 IN STACK           7  4099  L 0?7 0!0          107   007+3   000+2
 1289         * CONSTANT ('%' : LHHAAA)
 1290         * PUSH (LHHAAA:1)
 1291                MA    LAGAAA,X2          * ADD 1 TO STACK POINTER              7  4106  # 09Q 094          107  8098     094
 1292                LCA   LHHAAA,0&X2        * LOAD DATA % IN STACK                7  4113  L 12K 0!0          107  8122     000+2
 1293                C     0&X2,15999&X2      * COMPARE STACK TO STACK AT -1        7  4120  C 0!0 IRI          107   000+2 15999+2
 1294         * POP (1)
 1295                MA    LCGAAA,X2          * ADD -1 TO STACK POINTER             7  4127  # 11L 094          108  8113     094
 1296         * POP (1)
 1297                MA    LCGAAA,X2          * ADD -1 TO STACK POINTER             7  4134  # 11L 094          108  8113     094
1                                                                                                         PAGE   25
0 SEQ PG LIN  LABEL  OP    OPERANDS                                            SFX CT  LOCN  INSTRUCTION TYPE  CARD A-ADDR  B-ADDR

 1298         * PUSH (LWFAAA:5)
 1299                MA    LMFAAA,X2          * ADD 5 TO STACK POINTER              7  4141  # 14R 094          108  8149     094
 1300                LCA   LWFAAA,0&X2        * LOAD DATA 00000 IN STACK            7  4148  L 23K 0!0          108  8232     000+2
 1301                BE    LIHAAA             * JUMP IF EQUAL                       5  4155  B 16U S            108  4164
 1302                B     LJHAAA             * JUMP TO END                         4  4160  B 17/              108  4171
 1303         LIHAAA MCW   LTFAAA,0&X2        * MOVE 1 IN STACK                     7  4164  M 19P 0!0          109  8197     000+2
 1304         LJHAAA NOP                      * END OF EQUAL                        1  4171  N                  109
 1305                MCS   0&X2,0&X2          * CLEAR WM IN STACK                   7  4172  Z 0!0 0!0          109   000+2   000+2
 1306         * POP (5)
 1307                MA    LOFAAA,X2          * ADD -5 TO STACK POINTER             7  4179  # 16L 094          109  8163     094
 1308                BCE   LTEAAA,5&X2,       * JUMP WHEN FALSE                     8  4186  B 27T 0!5          109  4273     005+2
 1309         *
 1310         ***************************************
 1311         * BEGIN [BLOCK ENDING AT LFEAAA]
 1312         *
 1313         * FUNCTION CALL PUTCHAR('%')
 1314         * PUSH (5)
 1315                MA    LMFAAA,X2          * ADD 5 TO STACK POINTER              7  4194  # 14R 094          109  8149     094
 1316         * CONSTANT ('%' : LHHAAA)
 1317         * PUSH (LHHAAA:1)
 1318                MA    LAGAAA,X2          * ADD 1 TO STACK POINTER              7  4201  # 09Q 094          110  8098     094
 1319                LCA   LHHAAA,0&X2        * LOAD DATA % IN STACK                7  4208  L 12K 0!0          110  8122     000+2
 1320         * CREATE A STACK FRAME WITH X3 POINTER TO IT
 1321         * PUSH (X3:3)
 1322                MA    LKFAAA,X2          * ADD 3 TO STACK POINTER              7  4215  # 13P 094          110  8137     094
 1323                LCA   X3,0&X2            * LOAD X3 IN STACK                    7  4222  L 099 0!0          110   099     000+2
 1324                MCW   X2,X3              * MOVE X2 IN X3                       7  4229  M 094 099          110   094     099
 1325         *
 1326                B     LWCAAA             * JUMP TO FUNCTION PUTCHAR            4  4236  B X8Y              110  5788
 1327         *
 1328         * POP (X3:3)
 1329                LCA   0&X2,X3            * LOAD STACK IN X3                    7  4240  L 0!0 099          111   000+2   099
 1330                MA    LRFAAA,X2          * ADD -3 TO STACK POINTER             7  4247  # 18L 094          111  8183     094
 1331         * POP (1)
 1332                MA    LCGAAA,X2          * ADD -1 TO STACK POINTER             7  4254  # 11L 094          111  8113     094
 1333         * POP (5)
 1334                MA    LOFAAA,X2          * ADD -5 TO STACK POINTER             7  4261  # 16L 094          111  8163     094
 1335         * END FUNCTION CALL PUTCHAR('%')
 1336         *
 1337         LFEAAA NOP                      * LAST BLOCK INSTRUCTION              1  4268  N                  111
 1338         * END [BLOCK ENDING AT LFEAAA]
 1339         ***************************************
 1340         *
 1341                B     LUEAAA             * JUMP WHEN TRUE                      4  4269  B X6'              111  5760
 1342         LTEAAA NOP                      * EXECUTED WHEN FALSE                 1  4273  N                  111
 1343         * IF [IF ((C == 'C') THEN [BLOCK ENDING AT LGEAAA] ELSE [IF ((C == 'S') THE
 1344         * EQUAL (C == 'C')
 1345         * LOCAL VARIABLE (C : 7+X3)
 1346         * PUSH (7+X3:1)
 1347                MA    LAGAAA,X2          * ADD 1 TO STACK POINTER              7  4274  # 09Q 094          112  8098     094
1                                                                                                         PAGE   26
0 SEQ PG LIN  LABEL  OP    OPERANDS                                            SFX CT  LOCN  INSTRUCTION TYPE  CARD A-ADDR  B-ADDR

 1348                LCA   7&X3,0&X2          * LOAD MEMORY 7&X3 IN STACK           7  4281  L 0?7 0!0          112   007+3   000+2
 1349         * CONSTANT ('C' : LMHAAA)
 1350         * PUSH (LMHAAA:1)
 1351                MA    LAGAAA,X2          * ADD 1 TO STACK POINTER              7  4288  # 09Q 094          112  8098     094
 1352                LCA   LMHAAA,0&X2        * LOAD DATA C IN STACK                7  4295  L 15N 0!0          112  8155     000+2
 1353                C     0&X2,15999&X2      * COMPARE STACK TO STACK AT -1        7  4302  C 0!0 IRI          112   000+2 15999+2
 1354         * POP (1)
 1355                MA    LCGAAA,X2          * ADD -1 TO STACK POINTER             7  4309  # 11L 094          113  8113     094
 1356         * POP (1)
 1357                MA    LCGAAA,X2          * ADD -1 TO STACK POINTER             7  4316  # 11L 094          113  8113     094
 1358         * PUSH (LWFAAA:5)
 1359                MA    LMFAAA,X2          * ADD 5 TO STACK POINTER              7  4323  # 14R 094          113  8149     094
 1360                LCA   LWFAAA,0&X2        * LOAD DATA 00000 IN STACK            7  4330  L 23K 0!0          113  8232     000+2
 1361                BE    LKHAAA             * JUMP IF EQUAL                       5  4337  B 34W S            113  4346
 1362                B     LLHAAA             * JUMP TO END                         4  4342  B 35T              113  4353
 1363         LKHAAA MCW   LTFAAA,0&X2        * MOVE 1 IN STACK                     7  4346  M 19P 0!0          114  8197     000+2
 1364         LLHAAA NOP                      * END OF EQUAL                        1  4353  N                  114
 1365                MCS   0&X2,0&X2          * CLEAR WM IN STACK                   7  4354  Z 0!0 0!0          114   000+2   000+2
 1366         * POP (5)
 1367                MA    LOFAAA,X2          * ADD -5 TO STACK POINTER             7  4361  # 16L 094          114  8163     094
 1368                BCE   LREAAA,5&X2,       * JUMP WHEN FALSE                     8  4368  B 57U 0!5          114  4574     005+2
 1369         *
 1370         ***************************************
 1371         * BEGIN [BLOCK ENDING AT LGEAAA]
 1372         *
 1373         * FUNCTION CALL PUTCHAR((*ARG))
 1374         * PUSH (5)
 1375                MA    LMFAAA,X2          * ADD 5 TO STACK POINTER              7  4376  # 14R 094          114  8149     094
 1376         * DEREFERENCEEXPRESSION (*ARG)
 1377         * LOCAL VARIABLE (ARG : 6+X3)
 1378         * PUSH (6+X3:3)
 1379                MA    LKFAAA,X2          * ADD 3 TO STACK POINTER              7  4383  # 13P 094          115  8137     094
 1380                LCA   6&X3,0&X2          * LOAD MEMORY 6&X3 IN STACK           7  4390  L 0?6 0!0          115   006+3   000+2
 1381         * POP (X1:3)
 1382                LCA   0&X2,X1            * LOAD STACK IN X1                    7  4397  L 0!0 089          115   000+2   089
 1383                MA    LRFAAA,X2          * ADD -3 TO STACK POINTER             7  4404  # 18L 094          115  8183     094
 1384         * PUSH (0+X1:1)
 1385                MA    LAGAAA,X2          * ADD 1 TO STACK POINTER              7  4411  # 09Q 094          115  8098     094
 1386                LCA   0&X1,0&X2          * LOAD MEMORY 0&X1 IN STACK           7  4418  L 0'0 0!0          116   000+1   000+2
 1387         * END DEREFERENCEEXPRESSION (*ARG)
 1388         *
 1389         * CREATE A STACK FRAME WITH X3 POINTER TO IT
 1390         * PUSH (X3:3)
 1391                MA    LKFAAA,X2          * ADD 3 TO STACK POINTER              7  4425  # 13P 094          116  8137     094
 1392                LCA   X3,0&X2            * LOAD X3 IN STACK                    7  4432  L 099 0!0          116   099     000+2
 1393                MCW   X2,X3              * MOVE X2 IN X3                       7  4439  M 094 099          116   094     099
 1394         *
 1395                B     LWCAAA             * JUMP TO FUNCTION PUTCHAR            4  4446  B X8Y              116  5788
 1396         *
 1397         * POP (X3:3)
1                                                                                                         PAGE   27
0 SEQ PG LIN  LABEL  OP    OPERANDS                                            SFX CT  LOCN  INSTRUCTION TYPE  CARD A-ADDR  B-ADDR

 1398                LCA   0&X2,X3            * LOAD STACK IN X3                    7  4450  L 0!0 099          116   000+2   099
 1399                MA    LRFAAA,X2          * ADD -3 TO STACK POINTER             7  4457  # 18L 094          117  8183     094
 1400         * POP (1)
 1401                MA    LCGAAA,X2          * ADD -1 TO STACK POINTER             7  4464  # 11L 094          117  8113     094
 1402         * POP (5)
 1403                MA    LOFAAA,X2          * ADD -5 TO STACK POINTER             7  4471  # 16L 094          117  8163     094
 1404         * END FUNCTION CALL PUTCHAR((*ARG))
 1405         *
 1406         * ASSIGNMENT (ARG = (ARG + 15999))
 1407         * ADDITION (ARG + 15999)
 1408         * LOCAL VARIABLE (ARG : 6+X3)
 1409         * PUSH (6+X3:3)
 1410                MA    LKFAAA,X2          * ADD 3 TO STACK POINTER              7  4478  # 13P 094          117  8137     094
 1411                LCA   6&X3,0&X2          * LOAD MEMORY 6&X3 IN STACK           7  4485  L 0?6 0!0          117   006+3   000+2
 1412         * CONSTANT (15999 : LCGAAA)
 1413         * PUSH (LCGAAA:3)
 1414                MA    LKFAAA,X2          * ADD 3 TO STACK POINTER              7  4492  # 13P 094          118  8137     094
 1415                LCA   LCGAAA,0&X2        * LOAD DATA I9I IN STACK              7  4499  L 11L 0!0          118  8113     000+2
 1416                MA    0&X2,15997&X2      * ADD STACK TO STACK AT -3            7  4506  # 0!0 IRG          118   000+2 15997+2
 1417         * POP (3)
 1418                MA    LRFAAA,X2          * ADD -3 TO STACK POINTER             7  4513  # 18L 094          118  8183     094
 1419         * PUSH (LVFAAA:3)
 1420                MA    LKFAAA,X2          * ADD 3 TO STACK POINTER              7  4520  # 13P 094          118  8137     094
 1421                LCA   LVFAAA,0&X2        * LOAD DATA 006 IN STACK              7  4527  L 21R 0!0          119  8219     000+2
 1422                MA    X3,0&X2            * ADD X3 TO STACK                     7  4534  # 099 0!0          119   099     000+2
 1423         * POP (X1:3)
 1424                LCA   0&X2,X1            * LOAD STACK IN X1                    7  4541  L 0!0 089          119   000+2   089
 1425                MA    LRFAAA,X2          * ADD -3 TO STACK POINTER             7  4548  # 18L 094          119  8183     094
 1426         * POP (0+X1:3)
 1427                LCA   0&X2,0&X1          * LOAD STACK IN 0&X1                  7  4555  L 0!0 0'0          119   000+2   000+1
 1428                MA    LRFAAA,X2          * ADD -3 TO STACK POINTER             7  4562  # 18L 094          120  8183     094
 1429         * END ASSIGNMENT (ARG = (ARG + 15999))
 1430         *
 1431         LGEAAA NOP                      * LAST BLOCK INSTRUCTION              1  4569  N                  120
 1432         * END [BLOCK ENDING AT LGEAAA]
 1433         ***************************************
 1434         *
 1435                B     LSEAAA             * JUMP WHEN TRUE                      4  4570  B X5Z              120  5759
 1436         LREAAA NOP                      * EXECUTED WHEN FALSE                 1  4574  N                  120
 1437         * IF [IF ((C == 'S') THEN [BLOCK ENDING AT LHEAAA] ELSE [IF ((C == 'D') THE
 1438         * EQUAL (C == 'S')
 1439         * LOCAL VARIABLE (C : 7+X3)
 1440         * PUSH (7+X3:1)
 1441                MA    LAGAAA,X2          * ADD 1 TO STACK POINTER              7  4575  # 09Q 094          120  8098     094
 1442                LCA   7&X3,0&X2          * LOAD MEMORY 7&X3 IN STACK           7  4582  L 0?7 0!0          120   007+3   000+2
 1443         * CONSTANT ('S' : LPHAAA)
 1444         * PUSH (LPHAAA:1)
 1445                MA    LAGAAA,X2          * ADD 1 TO STACK POINTER              7  4589  # 09Q 094          120  8098     094
 1446                LCA   LPHAAA,0&X2        * LOAD DATA S IN STACK                7  4596  L 17M 0!0          121  8174     000+2
 1447                C     0&X2,15999&X2      * COMPARE STACK TO STACK AT -1        7  4603  C 0!0 IRI          121   000+2 15999+2
1                                                                                                         PAGE   28
0 SEQ PG LIN  LABEL  OP    OPERANDS                                            SFX CT  LOCN  INSTRUCTION TYPE  CARD A-ADDR  B-ADDR

 1448         * POP (1)
 1449                MA    LCGAAA,X2          * ADD -1 TO STACK POINTER             7  4610  # 11L 094          121  8113     094
 1450         * POP (1)
 1451                MA    LCGAAA,X2          * ADD -1 TO STACK POINTER             7  4617  # 11L 094          121  8113     094
 1452         * PUSH (LWFAAA:5)
 1453                MA    LMFAAA,X2          * ADD 5 TO STACK POINTER              7  4624  # 14R 094          121  8149     094
 1454                LCA   LWFAAA,0&X2        * LOAD DATA 00000 IN STACK            7  4631  L 23K 0!0          122  8232     000+2
 1455                BE    LNHAAA             * JUMP IF EQUAL                       5  4638  B 64X S            122  4647
 1456                B     LOHAAA             * JUMP TO END                         4  4643  B 65U              122  4654
 1457         LNHAAA MCW   LTFAAA,0&X2        * MOVE 1 IN STACK                     7  4647  M 19P 0!0          122  8197     000+2
 1458         LOHAAA NOP                      * END OF EQUAL                        1  4654  N                  122
 1459                MCS   0&X2,0&X2          * CLEAR WM IN STACK                   7  4655  Z 0!0 0!0          122   000+2   000+2
 1460         * POP (5)
 1461                MA    LOFAAA,X2          * ADD -5 TO STACK POINTER             7  4662  # 16L 094          122  8163     094
 1462                BCE   LPEAAA,5&X2,       * JUMP WHEN FALSE                     8  4669  B 87V 0!5          123  4875     005+2
 1463         *
 1464         ***************************************
 1465         * BEGIN [BLOCK ENDING AT LHEAAA]
 1466         *
 1467         * FUNCTION CALL PUTS((*((**CHAR) ARG)))
 1468         * PUSH (5)
 1469                MA    LMFAAA,X2          * ADD 5 TO STACK POINTER              7  4677  # 14R 094          123  8149     094
 1470         * DEREFERENCEEXPRESSION (*((**CHAR) ARG))
 1471         * LOCAL VARIABLE (ARG : 6+X3)
 1472         * PUSH (6+X3:3)
 1473                MA    LKFAAA,X2          * ADD 3 TO STACK POINTER              7  4684  # 13P 094          123  8137     094
 1474                LCA   6&X3,0&X2          * LOAD MEMORY 6&X3 IN STACK           7  4691  L 0?6 0!0          123   006+3   000+2
 1475         * POP (X1:3)
 1476                LCA   0&X2,X1            * LOAD STACK IN X1                    7  4698  L 0!0 089          123   000+2   089
 1477                MA    LRFAAA,X2          * ADD -3 TO STACK POINTER             7  4705  # 18L 094          124  8183     094
 1478         * PUSH (0+X1:3)
 1479                MA    LKFAAA,X2          * ADD 3 TO STACK POINTER              7  4712  # 13P 094          124  8137     094
 1480                LCA   0&X1,0&X2          * LOAD MEMORY 0&X1 IN STACK           7  4719  L 0'0 0!0          124   000+1   000+2
 1481         * END DEREFERENCEEXPRESSION (*((**CHAR) ARG))
 1482         *
 1483         * CREATE A STACK FRAME WITH X3 POINTER TO IT
 1484         * PUSH (X3:3)
 1485                MA    LKFAAA,X2          * ADD 3 TO STACK POINTER              7  4726  # 13P 094          124  8137     094
 1486                LCA   X3,0&X2            * LOAD X3 IN STACK                    7  4733  L 099 0!0          124   099     000+2
 1487                MCW   X2,X3              * MOVE X2 IN X3                       7  4740  M 094 099          125   094     099
 1488         *
 1489                B     LHDAAA             * JUMP TO FUNCTION PUTS               4  4747  B N6T              125  6563
 1490         *
 1491         * POP (X3:3)
 1492                LCA   0&X2,X3            * LOAD STACK IN X3                    7  4751  L 0!0 099          125   000+2   099
 1493                MA    LRFAAA,X2          * ADD -3 TO STACK POINTER             7  4758  # 18L 094          125  8183     094
 1494         * POP (3)
 1495                MA    LRFAAA,X2          * ADD -3 TO STACK POINTER             7  4765  # 18L 094          125  8183     094
 1496         * POP (5)
 1497                MA    LOFAAA,X2          * ADD -5 TO STACK POINTER             7  4772  # 16L 094          125  8163     094
1                                                                                                         PAGE   29
0 SEQ PG LIN  LABEL  OP    OPERANDS                                            SFX CT  LOCN  INSTRUCTION TYPE  CARD A-ADDR  B-ADDR

 1498         * END FUNCTION CALL PUTS((*((**CHAR) ARG)))
 1499         *
 1500         * ASSIGNMENT (ARG = (ARG + 15997))
 1501         * ADDITION (ARG + 15997)
 1502         * LOCAL VARIABLE (ARG : 6+X3)
 1503         * PUSH (6+X3:3)
 1504                MA    LKFAAA,X2          * ADD 3 TO STACK POINTER              7  4779  # 13P 094          126  8137     094
 1505                LCA   6&X3,0&X2          * LOAD MEMORY 6&X3 IN STACK           7  4786  L 0?6 0!0          126   006+3   000+2
 1506         * CONSTANT (15997 : LRFAAA)
 1507         * PUSH (LRFAAA:3)
 1508                MA    LKFAAA,X2          * ADD 3 TO STACK POINTER              7  4793  # 13P 094          126  8137     094
 1509                LCA   LRFAAA,0&X2        * LOAD DATA I9G IN STACK              7  4800  L 18L 0!0          126  8183     000+2
 1510                MA    0&X2,15997&X2      * ADD STACK TO STACK AT -3            7  4807  # 0!0 IRG          126   000+2 15997+2
 1511         * POP (3)
 1512                MA    LRFAAA,X2          * ADD -3 TO STACK POINTER             7  4814  # 18L 094          127  8183     094
 1513         * PUSH (LVFAAA:3)
 1514                MA    LKFAAA,X2          * ADD 3 TO STACK POINTER              7  4821  # 13P 094          127  8137     094
 1515                LCA   LVFAAA,0&X2        * LOAD DATA 006 IN STACK              7  4828  L 21R 0!0          127  8219     000+2
 1516                MA    X3,0&X2            * ADD X3 TO STACK                     7  4835  # 099 0!0          127   099     000+2
 1517         * POP (X1:3)
 1518                LCA   0&X2,X1            * LOAD STACK IN X1                    7  4842  L 0!0 089          127   000+2   089
 1519                MA    LRFAAA,X2          * ADD -3 TO STACK POINTER             7  4849  # 18L 094          128  8183     094
 1520         * POP (0+X1:3)
 1521                LCA   0&X2,0&X1          * LOAD STACK IN 0&X1                  7  4856  L 0!0 0'0          128   000+2   000+1
 1522                MA    LRFAAA,X2          * ADD -3 TO STACK POINTER             7  4863  # 18L 094          128  8183     094
 1523         * END ASSIGNMENT (ARG = (ARG + 15997))
 1524         *
 1525         LHEAAA NOP                      * LAST BLOCK INSTRUCTION              1  4870  N                  128
 1526         * END [BLOCK ENDING AT LHEAAA]
 1527         ***************************************
 1528         *
 1529                B     LQEAAA             * JUMP WHEN TRUE                      4  4871  B X5Y              128  5758
 1530         LPEAAA NOP                      * EXECUTED WHEN FALSE                 1  4875  N                  128
 1531         * IF [IF ((C == 'D') THEN [BLOCK ENDING AT LIEAAA] ELSE [IF ((C == 'P') THE
 1532         * EQUAL (C == 'D')
 1533         * LOCAL VARIABLE (C : 7+X3)
 1534         * PUSH (7+X3:1)
 1535                MA    LAGAAA,X2          * ADD 1 TO STACK POINTER              7  4876  # 09Q 094          128  8098     094
 1536                LCA   7&X3,0&X2          * LOAD MEMORY 7&X3 IN STACK           7  4883  L 0?7 0!0          129   007+3   000+2
 1537         * CONSTANT ('D' : LSHAAA)
 1538         * PUSH (LSHAAA:1)
 1539                MA    LAGAAA,X2          * ADD 1 TO STACK POINTER              7  4890  # 09Q 094          129  8098     094
 1540                LCA   LSHAAA,0&X2        * LOAD DATA D IN STACK                7  4897  L 19K 0!0          129  8192     000+2
 1541                C     0&X2,15999&X2      * COMPARE STACK TO STACK AT -1        7  4904  C 0!0 IRI          129   000+2 15999+2
 1542         * POP (1)
 1543                MA    LCGAAA,X2          * ADD -1 TO STACK POINTER             7  4911  # 11L 094          129  8113     094
 1544         * POP (1)
 1545                MA    LCGAAA,X2          * ADD -1 TO STACK POINTER             7  4918  # 11L 094          130  8113     094
 1546         * PUSH (LWFAAA:5)
 1547                MA    LMFAAA,X2          * ADD 5 TO STACK POINTER              7  4925  # 14R 094          130  8149     094
1                                                                                                         PAGE   30
0 SEQ PG LIN  LABEL  OP    OPERANDS                                            SFX CT  LOCN  INSTRUCTION TYPE  CARD A-ADDR  B-ADDR

 1548                LCA   LWFAAA,0&X2        * LOAD DATA 00000 IN STACK            7  4932  L 23K 0!0          130  8232     000+2
 1549                BE    LQHAAA             * JUMP IF EQUAL                       5  4939  B 94Y S            130  4948
 1550                B     LRHAAA             * JUMP TO END                         4  4944  B 95V              130  4955
 1551         LQHAAA MCW   LTFAAA,0&X2        * MOVE 1 IN STACK                     7  4948  M 19P 0!0          130  8197     000+2
 1552         LRHAAA NOP                      * END OF EQUAL                        1  4955  N                  130
 1553                MCS   0&X2,0&X2          * CLEAR WM IN STACK                   7  4956  Z 0!0 0!0          131   000+2   000+2
 1554         * POP (5)
 1555                MA    LOFAAA,X2          * ADD -5 TO STACK POINTER             7  4963  # 16L 094          131  8163     094
 1556                BCE   LNEAAA,5&X2,       * JUMP WHEN FALSE                     8  4970  B T2' 0!5          131  5320     005+2
 1557         *
 1558         ***************************************
 1559         * BEGIN [BLOCK ENDING AT LIEAAA]
 1560         * A SIZE:7 OFFSET:11
 1561         *
 1562         * PUSH (7)
 1563                MA    LEHAAA,X2          * ADD 7 TO STACK POINTER              7  4978  # 11R 094          131  8119     094
 1564         * FUNCTION CALL ITOA((*((*INT) ARG)), A, 10)
 1565         * PUSH (3)
 1566                MA    LKFAAA,X2          * ADD 3 TO STACK POINTER              7  4985  # 13P 094          131  8137     094
 1567         * CONSTANT (10 : LTHAAA)
 1568         * PUSH (LTHAAA:5)
 1569                MA    LMFAAA,X2          * ADD 5 TO STACK POINTER              7  4992  # 14R 094          132  8149     094
 1570                LCA   LTHAAA,0&X2        * LOAD DATA 00010 IN STACK            7  4999  L 20P 0!0          132  8207     000+2
 1571         * LOCAL ARRAY (A:CHAR [7])
 1572         * PUSH (LUHAAA:3)
 1573                MA    LKFAAA,X2          * ADD 3 TO STACK POINTER              7  5006  # 13P 094          132  8137     094
 1574                LCA   LUHAAA,0&X2        * LOAD DATA 012 IN STACK              7  5013  L 21O 0!0          132  8216     000+2
 1575                MA    X3,0&X2            * ADD X3 TO STACK                     7  5020  # 099 0!0          132   099     000+2
 1576         * DEREFERENCEEXPRESSION (*((*INT) ARG))
 1577         * LOCAL VARIABLE (ARG : 6+X3)
 1578         * PUSH (6+X3:3)
 1579                MA    LKFAAA,X2          * ADD 3 TO STACK POINTER              7  5027  # 13P 094          133  8137     094
 1580                LCA   6&X3,0&X2          * LOAD MEMORY 6&X3 IN STACK           7  5034  L 0?6 0!0          133   006+3   000+2
 1581         * POP (X1:3)
 1582                LCA   0&X2,X1            * LOAD STACK IN X1                    7  5041  L 0!0 089          133   000+2   089
 1583                MA    LRFAAA,X2          * ADD -3 TO STACK POINTER             7  5048  # 18L 094          133  8183     094
 1584         * PUSH (0+X1:5)
 1585                MA    LMFAAA,X2          * ADD 5 TO STACK POINTER              7  5055  # 14R 094          133  8149     094
 1586                LCA   0&X1,0&X2          * LOAD MEMORY 0&X1 IN STACK           7  5062  L 0'0 0!0          134   000+1   000+2
 1587         * END DEREFERENCEEXPRESSION (*((*INT) ARG))
 1588         *
 1589         * CREATE A STACK FRAME WITH X3 POINTER TO IT
 1590         * PUSH (X3:3)
 1591                MA    LKFAAA,X2          * ADD 3 TO STACK POINTER              7  5069  # 13P 094          134  8137     094
 1592                LCA   X3,0&X2            * LOAD X3 IN STACK                    7  5076  L 099 0!0          134   099     000+2
 1593                MCW   X2,X3              * MOVE X2 IN X3                       7  5083  M 094 099          134   094     099
 1594         *
 1595                B     LYAAAA             * JUMP TO FUNCTION ITOA               4  5090  B !11              134  2011
 1596         *
 1597         * POP (X3:3)
1                                                                                                         PAGE   31
0 SEQ PG LIN  LABEL  OP    OPERANDS                                            SFX CT  LOCN  INSTRUCTION TYPE  CARD A-ADDR  B-ADDR

 1598                LCA   0&X2,X3            * LOAD STACK IN X3                    7  5094  L 0!0 099          134   000+2   099
 1599                MA    LRFAAA,X2          * ADD -3 TO STACK POINTER             7  5101  # 18L 094          135  8183     094
 1600         * POP (5)
 1601                MA    LOFAAA,X2          * ADD -5 TO STACK POINTER             7  5108  # 16L 094          135  8163     094
 1602         * POP (3)
 1603                MA    LRFAAA,X2          * ADD -3 TO STACK POINTER             7  5115  # 18L 094          135  8183     094
 1604         * POP (5)
 1605                MA    LOFAAA,X2          * ADD -5 TO STACK POINTER             7  5122  # 16L 094          135  8163     094
 1606         * POP (3)
 1607                MA    LRFAAA,X2          * ADD -3 TO STACK POINTER             7  5129  # 18L 094          135  8183     094
 1608         * END FUNCTION CALL ITOA((*((*INT) ARG)), A, 10)
 1609         *
 1610         * FUNCTION CALL PUTS(A)
 1611         * PUSH (5)
 1612                MA    LMFAAA,X2          * ADD 5 TO STACK POINTER              7  5136  # 14R 094          136  8149     094
 1613         * LOCAL ARRAY (A:CHAR [7])
 1614         * PUSH (LUHAAA:3)
 1615                MA    LKFAAA,X2          * ADD 3 TO STACK POINTER              7  5143  # 13P 094          136  8137     094
 1616                LCA   LUHAAA,0&X2        * LOAD DATA 012 IN STACK              7  5150  L 21O 0!0          136  8216     000+2
 1617                MA    X3,0&X2            * ADD X3 TO STACK                     7  5157  # 099 0!0          136   099     000+2
 1618         * CREATE A STACK FRAME WITH X3 POINTER TO IT
 1619         * PUSH (X3:3)
 1620                MA    LKFAAA,X2          * ADD 3 TO STACK POINTER              7  5164  # 13P 094          136  8137     094
 1621                LCA   X3,0&X2            * LOAD X3 IN STACK                    7  5171  L 099 0!0          137   099     000+2
 1622                MCW   X2,X3              * MOVE X2 IN X3                       7  5178  M 094 099          137   094     099
 1623         *
 1624                B     LHDAAA             * JUMP TO FUNCTION PUTS               4  5185  B N6T              137  6563
 1625         *
 1626         * POP (X3:3)
 1627                LCA   0&X2,X3            * LOAD STACK IN X3                    7  5189  L 0!0 099          137   000+2   099
 1628                MA    LRFAAA,X2          * ADD -3 TO STACK POINTER             7  5196  # 18L 094          137  8183     094
 1629         * POP (3)
 1630                MA    LRFAAA,X2          * ADD -3 TO STACK POINTER             7  5203  # 18L 094          137  8183     094
 1631         * POP (5)
 1632                MA    LOFAAA,X2          * ADD -5 TO STACK POINTER             7  5210  # 16L 094          138  8163     094
 1633         * END FUNCTION CALL PUTS(A)
 1634         *
 1635         * ASSIGNMENT (ARG = (ARG + 15995))
 1636         * ADDITION (ARG + 15995)
 1637         * LOCAL VARIABLE (ARG : 6+X3)
 1638         * PUSH (6+X3:3)
 1639                MA    LKFAAA,X2          * ADD 3 TO STACK POINTER              7  5217  # 13P 094          138  8137     094
 1640                LCA   6&X3,0&X2          * LOAD MEMORY 6&X3 IN STACK           7  5224  L 0?6 0!0          138   006+3   000+2
 1641         * CONSTANT (15995 : LOFAAA)
 1642         * PUSH (LOFAAA:3)
 1643                MA    LKFAAA,X2          * ADD 3 TO STACK POINTER              7  5231  # 13P 094          138  8137     094
 1644                LCA   LOFAAA,0&X2        * LOAD DATA I9E IN STACK              7  5238  L 16L 0!0          138  8163     000+2
 1645                MA    0&X2,15997&X2      * ADD STACK TO STACK AT -3            7  5245  # 0!0 IRG          139   000+2 15997+2
 1646         * POP (3)
 1647                MA    LRFAAA,X2          * ADD -3 TO STACK POINTER             7  5252  # 18L 094          139  8183     094
1                                                                                                         PAGE   32
0 SEQ PG LIN  LABEL  OP    OPERANDS                                            SFX CT  LOCN  INSTRUCTION TYPE  CARD A-ADDR  B-ADDR

 1648         * PUSH (LVFAAA:3)
 1649                MA    LKFAAA,X2          * ADD 3 TO STACK POINTER              7  5259  # 13P 094          139  8137     094
 1650                LCA   LVFAAA,0&X2        * LOAD DATA 006 IN STACK              7  5266  L 21R 0!0          139  8219     000+2
 1651                MA    X3,0&X2            * ADD X3 TO STACK                     7  5273  # 099 0!0          139   099     000+2
 1652         * POP (X1:3)
 1653                LCA   0&X2,X1            * LOAD STACK IN X1                    7  5280  L 0!0 089          140   000+2   089
 1654                MA    LRFAAA,X2          * ADD -3 TO STACK POINTER             7  5287  # 18L 094          140  8183     094
 1655         * POP (0+X1:3)
 1656                LCA   0&X2,0&X1          * LOAD STACK IN 0&X1                  7  5294  L 0!0 0'0          140   000+2   000+1
 1657                MA    LRFAAA,X2          * ADD -3 TO STACK POINTER             7  5301  # 18L 094          140  8183     094
 1658         * END ASSIGNMENT (ARG = (ARG + 15995))
 1659         *
 1660         LIEAAA NOP                      * LAST BLOCK INSTRUCTION              1  5308  N                  140
 1661         * POP (7)
 1662                MA    LVHAAA,X2          * ADD -7 TO STACK POINTER             7  5309  # 22P 094          140  8227     094
 1663         * END [BLOCK ENDING AT LIEAAA]
 1664         ***************************************
 1665         *
 1666                B     LOEAAA             * JUMP WHEN TRUE                      4  5316  B X5X              141  5757
 1667         LNEAAA NOP                      * EXECUTED WHEN FALSE                 1  5320  N                  141
 1668         * IF [IF ((C == 'P') THEN [BLOCK ENDING AT LJEAAA] ELSE [BLOCK ENDING AT LK
 1669         * EQUAL (C == 'P')
 1670         * LOCAL VARIABLE (C : 7+X3)
 1671         * PUSH (7+X3:1)
 1672                MA    LAGAAA,X2          * ADD 1 TO STACK POINTER              7  5321  # 09Q 094          141  8098     094
 1673                LCA   7&X3,0&X2          * LOAD MEMORY 7&X3 IN STACK           7  5328  L 0?7 0!0          141   007+3   000+2
 1674         * CONSTANT ('P' : LYHAAA)
 1675         * PUSH (LYHAAA:1)
 1676                MA    LAGAAA,X2          * ADD 1 TO STACK POINTER              7  5335  # 09Q 094          141  8098     094
 1677                LCA   LYHAAA,0&X2        * LOAD DATA P IN STACK                7  5342  L 23O 0!0          141  8236     000+2
 1678                C     0&X2,15999&X2      * COMPARE STACK TO STACK AT -1        7  5349  C 0!0 IRI          142   000+2 15999+2
 1679         * POP (1)
 1680                MA    LCGAAA,X2          * ADD -1 TO STACK POINTER             7  5356  # 11L 094          142  8113     094
 1681         * POP (1)
 1682                MA    LCGAAA,X2          * ADD -1 TO STACK POINTER             7  5363  # 11L 094          142  8113     094
 1683         * PUSH (LWFAAA:5)
 1684                MA    LMFAAA,X2          * ADD 5 TO STACK POINTER              7  5370  # 14R 094          142  8149     094
 1685                LCA   LWFAAA,0&X2        * LOAD DATA 00000 IN STACK            7  5377  L 23K 0!0          142  8232     000+2
 1686                BE    LWHAAA             * JUMP IF EQUAL                       5  5384  B T9T S            143  5393
 1687                B     LXHAAA             * JUMP TO END                         4  5389  B U0'              143  5400
 1688         LWHAAA MCW   LTFAAA,0&X2        * MOVE 1 IN STACK                     7  5393  M 19P 0!0          143  8197     000+2
 1689         LXHAAA NOP                      * END OF EQUAL                        1  5400  N                  143
 1690                MCS   0&X2,0&X2          * CLEAR WM IN STACK                   7  5401  Z 0!0 0!0          143   000+2   000+2
 1691         * POP (5)
 1692                MA    LOFAAA,X2          * ADD -5 TO STACK POINTER             7  5408  # 16L 094          143  8163     094
 1693                BCE   LLEAAA,5&X2,       * JUMP WHEN FALSE                     8  5415  B X5' 0!5          143  5750     005+2
 1694         *
 1695         ***************************************
 1696         * BEGIN [BLOCK ENDING AT LJEAAA]
 1697         *
1                                                                                                         PAGE   33
0 SEQ PG LIN  LABEL  OP    OPERANDS                                            SFX CT  LOCN  INSTRUCTION TYPE  CARD A-ADDR  B-ADDR

 1698         * ASSIGNMENT (ADDRP = ARG)
 1699         * LOCAL VARIABLE (ARG : 6+X3)
 1700         * PUSH (6+X3:3)
 1701                MA    LKFAAA,X2          * ADD 3 TO STACK POINTER              7  5423  # 13P 094          144  8137     094
 1702                LCA   6&X3,0&X2          * LOAD MEMORY 6&X3 IN STACK           7  5430  L 0?6 0!0          144   006+3   000+2
 1703         * PUSH (LZHAAA:3)
 1704                MA    LKFAAA,X2          * ADD 3 TO STACK POINTER              7  5437  # 13P 094          144  8137     094
 1705                LCA   LZHAAA,0&X2        * LOAD DATA 010 IN STACK              7  5444  L 24N 0!0          144  8245     000+2
 1706                MA    X3,0&X2            * ADD X3 TO STACK                     7  5451  # 099 0!0          144   099     000+2
 1707         * POP (X1:3)
 1708                LCA   0&X2,X1            * LOAD STACK IN X1                    7  5458  L 0!0 089          145   000+2   089
 1709                MA    LRFAAA,X2          * ADD -3 TO STACK POINTER             7  5465  # 18L 094          145  8183     094
 1710         * POP (0+X1:3)
 1711                LCA   0&X2,0&X1          * LOAD STACK IN 0&X1                  7  5472  L 0!0 0'0          145   000+2   000+1
 1712                MA    LRFAAA,X2          * ADD -3 TO STACK POINTER             7  5479  # 18L 094          145  8183     094
 1713         * END ASSIGNMENT (ADDRP = ARG)
 1714         *
 1715         * ASSIGNMENT (ADDRC = (*ADDRP))
 1716         * DEREFERENCEEXPRESSION (*ADDRP)
 1717         * LOCAL VARIABLE (ADDRP : 10+X3)
 1718         * PUSH (10+X3:3)
 1719                MA    LKFAAA,X2          * ADD 3 TO STACK POINTER              7  5486  # 13P 094          145  8137     094
 1720                LCA   10&X3,0&X2         * LOAD MEMORY 10&X3 IN STACK          7  5493  L 0A0 0!0          146   010+3   000+2
 1721         * POP (X1:3)
 1722                LCA   0&X2,X1            * LOAD STACK IN X1                    7  5500  L 0!0 089          146   000+2   089
 1723                MA    LRFAAA,X2          * ADD -3 TO STACK POINTER             7  5507  # 18L 094          146  8183     094
 1724         * PUSH (0+X1:1)
 1725                MA    LAGAAA,X2          * ADD 1 TO STACK POINTER              7  5514  # 09Q 094          146  8098     094
 1726                LCA   0&X1,0&X2          * LOAD MEMORY 0&X1 IN STACK           7  5521  L 0'0 0!0          146   000+1   000+2
 1727         * END DEREFERENCEEXPRESSION (*ADDRP)
 1728         *
 1729         * PUSH (LBHAAA:3)
 1730                MA    LKFAAA,X2          * ADD 3 TO STACK POINTER              7  5528  # 13P 094          147  8137     094
 1731                LCA   LBHAAA,0&X2        * LOAD DATA 011 IN STACK              7  5535  L 11! 0!0          147  8110     000+2
 1732                MA    X3,0&X2            * ADD X3 TO STACK                     7  5542  # 099 0!0          147   099     000+2
 1733         * POP (X1:3)
 1734                LCA   0&X2,X1            * LOAD STACK IN X1                    7  5549  L 0!0 089          147   000+2   089
 1735                MA    LRFAAA,X2          * ADD -3 TO STACK POINTER             7  5556  # 18L 094          147  8183     094
 1736         * POP (0+X1:1)
 1737                LCA   0&X2,0&X1          * LOAD STACK IN 0&X1                  7  5563  L 0!0 0'0          148   000+2   000+1
 1738                MA    LCGAAA,X2          * ADD -1 TO STACK POINTER             7  5570  # 11L 094          148  8113     094
 1739         * END ASSIGNMENT (ADDRC = (*ADDRP))
 1740         *
 1741         * FUNCTION CALL PUTCHAR(ADDRC)
 1742         * PUSH (5)
 1743                MA    LMFAAA,X2          * ADD 5 TO STACK POINTER              7  5577  # 14R 094          148  8149     094
 1744         * LOCAL VARIABLE (ADDRC : 11+X3)
 1745         * PUSH (11+X3:1)
 1746                MA    LAGAAA,X2          * ADD 1 TO STACK POINTER              7  5584  # 09Q 094          148  8098     094
 1747                LCA   11&X3,0&X2         * LOAD MEMORY 11&X3 IN STACK          7  5591  L 0A1 0!0          148   011+3   000+2
1                                                                                                         PAGE   34
0 SEQ PG LIN  LABEL  OP    OPERANDS                                            SFX CT  LOCN  INSTRUCTION TYPE  CARD A-ADDR  B-ADDR

 1748         * CREATE A STACK FRAME WITH X3 POINTER TO IT
 1749         * PUSH (X3:3)
 1750                MA    LKFAAA,X2          * ADD 3 TO STACK POINTER              7  5598  # 13P 094          149  8137     094
 1751                LCA   X3,0&X2            * LOAD X3 IN STACK                    7  5605  L 099 0!0          149   099     000+2
 1752                MCW   X2,X3              * MOVE X2 IN X3                       7  5612  M 094 099          149   094     099
 1753         *
 1754                B     LWCAAA             * JUMP TO FUNCTION PUTCHAR            4  5619  B X8Y              149  5788
 1755         *
 1756         * POP (X3:3)
 1757                LCA   0&X2,X3            * LOAD STACK IN X3                    7  5623  L 0!0 099          149   000+2   099
 1758                MA    LRFAAA,X2          * ADD -3 TO STACK POINTER             7  5630  # 18L 094          149  8183     094
 1759         * POP (1)
 1760                MA    LCGAAA,X2          * ADD -1 TO STACK POINTER             7  5637  # 11L 094          150  8113     094
 1761         * POP (5)
 1762                MA    LOFAAA,X2          * ADD -5 TO STACK POINTER             7  5644  # 16L 094          150  8163     094
 1763         * END FUNCTION CALL PUTCHAR(ADDRC)
 1764         *
 1765         * START ASM BLOCK
 1766                W                                                              1  5651  2                  150
 1767         * END ASM BLOCK
 1768         * START ASM BLOCK
 1769                W                                                              1  5652  2                  150
 1770         * END ASM BLOCK
 1771         * START ASM BLOCK
 1772                W                                                              1  5653  2                  150
 1773         * END ASM BLOCK
 1774         * ASSIGNMENT (ARG = (ARG + 15999))
 1775         * ADDITION (ARG + 15999)
 1776         * LOCAL VARIABLE (ARG : 6+X3)
 1777         * PUSH (6+X3:3)
 1778                MA    LKFAAA,X2          * ADD 3 TO STACK POINTER              7  5654  # 13P 094          150  8137     094
 1779                LCA   6&X3,0&X2          * LOAD MEMORY 6&X3 IN STACK           7  5661  L 0?6 0!0          150   006+3   000+2
 1780         * CONSTANT (15999 : LCGAAA)
 1781         * PUSH (LCGAAA:3)
 1782                MA    LKFAAA,X2          * ADD 3 TO STACK POINTER              7  5668  # 13P 094          151  8137     094
 1783                LCA   LCGAAA,0&X2        * LOAD DATA I9I IN STACK              7  5675  L 11L 0!0          151  8113     000+2
 1784                MA    0&X2,15997&X2      * ADD STACK TO STACK AT -3            7  5682  # 0!0 IRG          151   000+2 15997+2
 1785         * POP (3)
 1786                MA    LRFAAA,X2          * ADD -3 TO STACK POINTER             7  5689  # 18L 094          151  8183     094
 1787         * PUSH (LVFAAA:3)
 1788                MA    LKFAAA,X2          * ADD 3 TO STACK POINTER              7  5696  # 13P 094          151  8137     094
 1789                LCA   LVFAAA,0&X2        * LOAD DATA 006 IN STACK              7  5703  L 21R 0!0          152  8219     000+2
 1790                MA    X3,0&X2            * ADD X3 TO STACK                     7  5710  # 099 0!0          152   099     000+2
 1791         * POP (X1:3)
 1792                LCA   0&X2,X1            * LOAD STACK IN X1                    7  5717  L 0!0 089          152   000+2   089
 1793                MA    LRFAAA,X2          * ADD -3 TO STACK POINTER             7  5724  # 18L 094          152  8183     094
 1794         * POP (0+X1:3)
 1795                LCA   0&X2,0&X1          * LOAD STACK IN 0&X1                  7  5731  L 0!0 0'0          152   000+2   000+1
 1796                MA    LRFAAA,X2          * ADD -3 TO STACK POINTER             7  5738  # 18L 094          153  8183     094
 1797         * END ASSIGNMENT (ARG = (ARG + 15999))
1                                                                                                         PAGE   35
0 SEQ PG LIN  LABEL  OP    OPERANDS                                            SFX CT  LOCN  INSTRUCTION TYPE  CARD A-ADDR  B-ADDR

 1798         *
 1799         LJEAAA NOP                      * LAST BLOCK INSTRUCTION              1  5745  N                  153
 1800         * END [BLOCK ENDING AT LJEAAA]
 1801         ***************************************
 1802         *
 1803                B     LMEAAA             * JUMP WHEN TRUE                      4  5746  B X5W              153  5756
 1804         LLEAAA NOP                      * EXECUTED WHEN FALSE                 1  5750  N                  153
 1805         *
 1806         ***************************************
 1807         * BEGIN [BLOCK ENDING AT LKEAAA]
 1808         *
 1809         * RETURN TO LEEAAA WITH NO RETURN VALUE
 1810                B     LEEAAA             * JUMP TO END OF FUNCTION BLOCK       4  5751  B X6/              153  5761
 1811         *
 1812         LKEAAA NOP                      * LAST BLOCK INSTRUCTION              1  5755  N                  153
 1813         * END [BLOCK ENDING AT LKEAAA]
 1814         ***************************************
 1815         *
 1816         LMEAAA NOP                      * EXECUTED WHEN TRUE                  1  5756  N                  153
 1817         * END IF [IF ((C == 'P') THEN [BLOCK ENDING AT LJEAAA] ELSE [BLOCK ENDING A
 1818         *
 1819         LOEAAA NOP                      * EXECUTED WHEN TRUE                  1  5757  N                  154
 1820         * END IF [IF ((C == 'D') THEN [BLOCK ENDING AT LIEAAA] ELSE [IF ((C == 'P')
 1821         *
 1822         LQEAAA NOP                      * EXECUTED WHEN TRUE                  1  5758  N                  154
 1823         * END IF [IF ((C == 'S') THEN [BLOCK ENDING AT LHEAAA] ELSE [IF ((C == 'D')
 1824         *
 1825         LSEAAA NOP                      * EXECUTED WHEN TRUE                  1  5759  N                  154
 1826         * END IF [IF ((C == 'C') THEN [BLOCK ENDING AT LGEAAA] ELSE [IF ((C == 'S')
 1827         *
 1828         LUEAAA NOP                      * EXECUTED WHEN TRUE                  1  5760  N                  154
 1829         * END IF [IF ((C == '%') THEN [BLOCK ENDING AT LFEAAA] ELSE [IF ((C == 'C')
 1830         *
 1831         LEEAAA NOP                      * LAST BLOCK INSTRUCTION              1  5761  N                  154
 1832         * END [BLOCK ENDING AT LEEAAA]
 1833         ***************************************
 1834         *
 1835         LWEAAA NOP                      * EXECUTED WHEN TRUE                  1  5762  N                  154
 1836         * END IF [IF ((C != '%') THEN [BLOCK ENDING AT LDEAAA] ELSE [BLOCK ENDING A
 1837         *
 1838         LCEAAA NOP                      * LAST BLOCK INSTRUCTION              1  5763  N                  154
 1839         * END [BLOCK ENDING AT LCEAAA]
 1840         ***************************************
 1841         *
 1842                B     LXEAAA             * JUMP TO TOP OF WHILE                4  5764  B E62              155  3562
 1843         *
 1844         LYEAAA NOP                      * BOTTOM OF WHILE                     1  5768  N                  155
 1845         * END WHILE [WHILE (((C = (*(CFORMAT_STR++))) != '\0')) [BLOCK ENDING AT LC
 1846         *
 1847         LBEAAA NOP                      * LAST BLOCK INSTRUCTION              1  5769  N                  155
1                                                                                                         PAGE   36
0 SEQ PG LIN  LABEL  OP    OPERANDS                                            SFX CT  LOCN  INSTRUCTION TYPE  CARD A-ADDR  B-ADDR

 1848         * POP (11)
 1849                MA    LAIAAA,X2          * ADD -11 TO STACK POINTER            7  5770  # 10M 094          155  8104     094
 1850         * END [BLOCK ENDING AT LBEAAA]
 1851         ***************************************
 1852         *
 1853                LCA   3&X3,X1            * LOAD RETURN ADDRESS IN X1           7  5777  L 0?3 089          155   003+3   089
 1854                B     0&X1               * JUMP BACK TO CALLER IN X1           4  5784  B 0'0              155   000+1
 1855         *
 1856         ***************************************************************************
 1857         * END FUNCTION : PRINTF
 1858         ***************************************************************************
 1859         *
 1860         ***************************************************************************
 1861         * FUNCTION : PUTCHAR
 1862         ***************************************************************************
 1863         LWCAAA SBR   3&X3               * SAVE RETURN ADDRESS IN REGISTER     4  5788  H 0?3              155   003+3
 1864         * SET THE RIGHT WM AND CLEAR THE WRONG ONES
 1865                SW    1&X3               * SET WM AT 1&X3                      4  5792  , 0?1              156   001+3
 1866                CW    2&X3               * CLEAR WM AT 2&X3                    4  5796  ) 0?2              156   002+3
 1867                CW    3&X3               * CLEAR WM AT 3&X3                    4  5800  ) 0?3              156   003+3
 1868         *
 1869         ***************************************
 1870         * BEGIN [BLOCK ENDING AT LXCAAA]
 1871         *
 1872         * PUSH (3)
 1873                MA    LKFAAA,X2          * ADD 3 TO STACK POINTER              7  5804  # 13P 094          156  8137     094
 1874         * IF [IF ((C != '\N') THEN [BLOCK ENDING AT LYCAAA] ELSE [BLOCK ENDING AT L
 1875         * NOTEQUAL (!=) (C != '\N')
 1876         * PARAMETER VARIABLE (C : 15997+X3)
 1877         * PUSH (15997+X3:1)
 1878                MA    LAGAAA,X2          * ADD 1 TO STACK POINTER              7  5811  # 09Q 094          156  8098     094
 1879                LCA   15997&X3,0&X2      * LOAD MEMORY 15997&X3 IN STACK       7  5818  L IIG 0!0          156 15997+3   000+2
 1880         * CONSTANT ('\N' : EOL)
 1881         * PUSH (EOL:1)
 1882                MA    LAGAAA,X2          * ADD 1 TO STACK POINTER              7  5825  # 09Q 094          157  8098     094
 1883                LCA   EOL,0&X2           * LOAD MEMORY EOL IN STACK            7  5832  L 346 0!0          157   346     000+2
 1884                C     0&X2,15999&X2      * COMPARE STACK TO STACK AT -1        7  5839  C 0!0 IRI          157   000+2 15999+2
 1885         * POP (1)
 1886                MA    LCGAAA,X2          * ADD -1 TO STACK POINTER             7  5846  # 11L 094          157  8113     094
 1887         * POP (1)
 1888                MA    LCGAAA,X2          * ADD -1 TO STACK POINTER             7  5853  # 11L 094          157  8113     094
 1889         * PUSH (LTFAAA:5)
 1890                MA    LMFAAA,X2          * ADD 5 TO STACK POINTER              7  5860  # 14R 094          158  8149     094
 1891                LCA   LTFAAA,0&X2        * LOAD DATA 00001 IN STACK            7  5867  L 19P 0!0          158  8197     000+2
 1892                BE    LBIAAA             * JUMP IF EQUAL                       5  5874  B Y8T S            158  5883
 1893                B     LCIAAA             * JUMP TO END                         4  5879  B Y9'              158  5890
 1894         LBIAAA MCW   LWFAAA,0&X2        * MOVE 0 IN STACK                     7  5883  M 23K 0!0          158  8232     000+2
 1895         LCIAAA NOP                      * END OF NOTEQUAL                     1  5890  N                  158
 1896                MCS   0&X2,0&X2          * CLEAR WM IN STACK                   7  5891  Z 0!0 0!0          158   000+2   000+2
 1897         * POP (5)
1                                                                                                         PAGE   37
0 SEQ PG LIN  LABEL  OP    OPERANDS                                            SFX CT  LOCN  INSTRUCTION TYPE  CARD A-ADDR  B-ADDR

 1898                MA    LOFAAA,X2          * ADD -5 TO STACK POINTER             7  5898  # 16L 094          159  8163     094
 1899                BCE   LDDAAA,5&X2,       * JUMP WHEN FALSE                     8  5905  B !0Z 0!5          159  6009     005+2
 1900         *
 1901         ***************************************
 1902         * BEGIN [BLOCK ENDING AT LYCAAA]
 1903         *
 1904         * ASSIGNMENT ((*(__PUTCHAR_POS++)) = C)
 1905         * PARAMETER VARIABLE (C : 15997+X3)
 1906         * PUSH (15997+X3:1)
 1907                MA    LAGAAA,X2          * ADD 1 TO STACK POINTER              7  5913  # 09Q 094          159  8098     094
 1908                LCA   15997&X3,0&X2      * LOAD MEMORY 15997&X3 IN STACK       7  5920  L IIG 0!0          159 15997+3   000+2
 1909         * POSTINCREMENT (__PUTCHAR_POS++)
 1910         * PUSH (LDIAAA:3)
 1911                MA    LKFAAA,X2          * ADD 3 TO STACK POINTER              7  5927  # 13P 094          159  8137     094
 1912                LCA   LDIAAA,0&X2        * LOAD DATA 724 IN STACK              7  5934  L 11O 0!0          160  8116     000+2
 1913         * POP (X1:3)
 1914                LCA   0&X2,X1            * LOAD STACK IN X1                    7  5941  L 0!0 089          160   000+2   089
 1915                MA    LRFAAA,X2          * ADD -3 TO STACK POINTER             7  5948  # 18L 094          160  8183     094
 1916         * PUSH (0+X1:3)
 1917                MA    LKFAAA,X2          * ADD 3 TO STACK POINTER              7  5955  # 13P 094          160  8137     094
 1918                LCA   0&X1,0&X2          * LOAD MEMORY 0&X1 IN STACK           7  5962  L 0'0 0!0          160   000+1   000+2
 1919                MA    LAGAAA,0&X1        * POSTINCREMENT POINTER AT X1         7  5969  # 09Q 0'0          161  8098     000+1
 1920         * POP (X1:3)
 1921                LCA   0&X2,X1            * LOAD STACK IN X1                    7  5976  L 0!0 089          161   000+2   089
 1922                MA    LRFAAA,X2          * ADD -3 TO STACK POINTER             7  5983  # 18L 094          161  8183     094
 1923         * POP (0+X1:1)
 1924                LCA   0&X2,0&X1          * LOAD STACK IN 0&X1                  7  5990  L 0!0 0'0          161   000+2   000+1
 1925                MA    LCGAAA,X2          * ADD -1 TO STACK POINTER             7  5997  # 11L 094          161  8113     094
 1926         * END ASSIGNMENT ((*(__PUTCHAR_POS++)) = C)
 1927         *
 1928         LYCAAA NOP                      * LAST BLOCK INSTRUCTION              1  6004  N                  161
 1929         * END [BLOCK ENDING AT LYCAAA]
 1930         ***************************************
 1931         *
 1932                B     LEDAAA             * JUMP WHEN TRUE                      4  6005  B L2W              162  6326
 1933         LDDAAA NOP                      * EXECUTED WHEN FALSE                 1  6009  N                  162
 1934         *
 1935         ***************************************
 1936         * BEGIN [BLOCK ENDING AT LZCAAA]
 1937         *
 1938         * WHILE [WHILE ((((INT) __PUTCHAR_LAST) >= ((INT) __PUTCHAR_POS))) [BLOCK E
 1939         LBDAAA NOP                      * TOP OF WHILE                        1  6010  N                  162
 1940         * GREATEROREQUAL (((INT) __PUTCHAR_LAST) >= ((INT) __PUTCHAR_POS))
 1941         * STATIC VARIABLE (__PUTCHAR_LAST : 727)
 1942         * PUSH (727:3)
 1943                MA    LKFAAA,X2          * ADD 3 TO STACK POINTER              7  6011  # 13P 094          162  8137     094
 1944                LCA   727,0&X2           * LOAD MEMORY 727 IN STACK            7  6018  L 727 0!0          162   727     000+2
 1945         * CAST POINTER(__PUTCHAR_LAST) TO NUMBER
 1946                B     PTRNMN             * JUMP TO SNIPPET POINTER_TO_NUMB     4  6025  B H9U              162  7894
 1947         *
1                                                                                                         PAGE   38
0 SEQ PG LIN  LABEL  OP    OPERANDS                                            SFX CT  LOCN  INSTRUCTION TYPE  CARD A-ADDR  B-ADDR

 1948                B     CLNNMN             * JUMP TO SNIPPET CLEAN_NUMBER        4  6029  B 06N              162  8065
 1949         *
 1950         * STATIC VARIABLE (__PUTCHAR_POS : 724)
 1951         * PUSH (724:3)
 1952                MA    LKFAAA,X2          * ADD 3 TO STACK POINTER              7  6033  # 13P 094          163  8137     094
 1953                LCA   724,0&X2           * LOAD MEMORY 724 IN STACK            7  6040  L 724 0!0          163   724     000+2
 1954         * CAST POINTER(__PUTCHAR_POS) TO NUMBER
 1955                B     PTRNMN             * JUMP TO SNIPPET POINTER_TO_NUMB     4  6047  B H9U              163  7894
 1956         *
 1957                B     CLNNMN             * JUMP TO SNIPPET CLEAN_NUMBER        4  6051  B 06N              163  8065
 1958         *
 1959                C     0&X2,15995&X2      * COMPARE STACK TO STACK AT -5        7  6055  C 0!0 IRE          163   000+2 15995+2
 1960         * POP (5)
 1961                MA    LOFAAA,X2          * ADD -5 TO STACK POINTER             7  6062  # 16L 094          163  8163     094
 1962                MCW   LTFAAA,0&X2        * MOVE 1 IN STACK                     7  6069  M 19P 0!0          164  8197     000+2
 1963                BL    LEIAAA             * JUMP IF GREATER OR EQUAL            5  6076  B !8V T            164  6085
 1964                B     LFIAAA             * JUMP TO END                         4  6081  B !9S              164  6092
 1965         LEIAAA MCW   LWFAAA,0&X2        * MOVE 1 IN STACK                     7  6085  M 23K 0!0          164  8232     000+2
 1966         LFIAAA NOP                      * END OF GREATEROREQUAL               1  6092  N                  164
 1967                MCS   0&X2,0&X2          * CLEAR WM IN STACK                   7  6093  Z 0!0 0!0          164   000+2   000+2
 1968         * POP (5)
 1969                MA    LOFAAA,X2          * ADD -5 TO STACK POINTER             7  6100  # 16L 094          164  8163     094
 1970                BCE   LCDAAA,5&X2,       * JUMP TO BOTTOM OF WHILE             8  6107  B K1/ 0!5          165  6211     005+2
 1971         *
 1972         ***************************************
 1973         * BEGIN [BLOCK ENDING AT LADAAA]
 1974         *
 1975         * ASSIGNMENT ((*(__PUTCHAR_LAST--)) = ' ')
 1976         * CONSTANT (' ' : LGIAAA)
 1977         * PUSH (LGIAAA:1)
 1978                MA    LAGAAA,X2          * ADD 1 TO STACK POINTER              7  6115  # 09Q 094          165  8098     094
 1979                LCA   LGIAAA,0&X2        * LOAD DATA   IN STACK                7  6122  L 12J 0!0          165  8121     000+2
 1980         * POSTDECREMENT (__PUTCHAR_LAST--)
 1981         * PUSH (LHIAAA:3)
 1982                MA    LKFAAA,X2          * ADD 3 TO STACK POINTER              7  6129  # 13P 094          165  8137     094
 1983                LCA   LHIAAA,0&X2        * LOAD DATA 727 IN STACK              7  6136  L 12N 0!0          165  8125     000+2
 1984         * POP (X1:3)
 1985                LCA   0&X2,X1            * LOAD STACK IN X1                    7  6143  L 0!0 089          166   000+2   089
 1986                MA    LRFAAA,X2          * ADD -3 TO STACK POINTER             7  6150  # 18L 094          166  8183     094
 1987         * PUSH (0+X1:3)
 1988                MA    LKFAAA,X2          * ADD 3 TO STACK POINTER              7  6157  # 13P 094          166  8137     094
 1989                LCA   0&X1,0&X2          * LOAD MEMORY 0&X1 IN STACK           7  6164  L 0'0 0!0          166   000+1   000+2
 1990                MA    LCGAAA,0&X1        * POSTDECREMENT POINTER AT X1         7  6171  # 11L 0'0          166  8113     000+1
 1991         * POP (X1:3)
 1992                LCA   0&X2,X1            * LOAD STACK IN X1                    7  6178  L 0!0 089          167   000+2   089
 1993                MA    LRFAAA,X2          * ADD -3 TO STACK POINTER             7  6185  # 18L 094          167  8183     094
 1994         * POP (0+X1:1)
 1995                LCA   0&X2,0&X1          * LOAD STACK IN 0&X1                  7  6192  L 0!0 0'0          167   000+2   000+1
 1996                MA    LCGAAA,X2          * ADD -1 TO STACK POINTER             7  6199  # 11L 094          167  8113     094
 1997         * END ASSIGNMENT ((*(__PUTCHAR_LAST--)) = ' ')
1                                                                                                         PAGE   39
0 SEQ PG LIN  LABEL  OP    OPERANDS                                            SFX CT  LOCN  INSTRUCTION TYPE  CARD A-ADDR  B-ADDR

 1998         *
 1999         LADAAA NOP                      * LAST BLOCK INSTRUCTION              1  6206  N                  167
 2000         * END [BLOCK ENDING AT LADAAA]
 2001         ***************************************
 2002         *
 2003                B     LBDAAA             * JUMP TO TOP OF WHILE                4  6207  B !1'              167  6010
 2004         *
 2005         LCDAAA NOP                      * BOTTOM OF WHILE                     1  6211  N                  167
 2006         * END WHILE [WHILE ((((INT) __PUTCHAR_LAST) >= ((INT) __PUTCHAR_POS))) [BLO
 2007         *
 2008         * ASSIGNMENT (__PUTCHAR_LAST = __PUTCHAR_POS)
 2009         * STATIC VARIABLE (__PUTCHAR_POS : 724)
 2010         * PUSH (724:3)
 2011                MA    LKFAAA,X2          * ADD 3 TO STACK POINTER              7  6212  # 13P 094          168  8137     094
 2012                LCA   724,0&X2           * LOAD MEMORY 724 IN STACK            7  6219  L 724 0!0          168   724     000+2
 2013         * PUSH (LHIAAA:3)
 2014                MA    LKFAAA,X2          * ADD 3 TO STACK POINTER              7  6226  # 13P 094          168  8137     094
 2015                LCA   LHIAAA,0&X2        * LOAD DATA 727 IN STACK              7  6233  L 12N 0!0          168  8125     000+2
 2016         * POP (X1:3)
 2017                LCA   0&X2,X1            * LOAD STACK IN X1                    7  6240  L 0!0 089          168   000+2   089
 2018                MA    LRFAAA,X2          * ADD -3 TO STACK POINTER             7  6247  # 18L 094          169  8183     094
 2019         * POP (0+X1:3)
 2020                LCA   0&X2,0&X1          * LOAD STACK IN 0&X1                  7  6254  L 0!0 0'0          169   000+2   000+1
 2021                MA    LRFAAA,X2          * ADD -3 TO STACK POINTER             7  6261  # 18L 094          169  8183     094
 2022         * END ASSIGNMENT (__PUTCHAR_LAST = __PUTCHAR_POS)
 2023         *
 2024         * ASSIGNMENT (__PUTCHAR_POS = 201)
 2025         * CONSTANT (201 : LIIAAA)
 2026         * PUSH (LIIAAA:3)
 2027                MA    LKFAAA,X2          * ADD 3 TO STACK POINTER              7  6268  # 13P 094          169  8137     094
 2028                LCA   LIIAAA,0&X2        * LOAD DATA 201 IN STACK              7  6275  L 13J 0!0          169  8131     000+2
 2029         * PUSH (LDIAAA:3)
 2030                MA    LKFAAA,X2          * ADD 3 TO STACK POINTER              7  6282  # 13P 094          170  8137     094
 2031                LCA   LDIAAA,0&X2        * LOAD DATA 724 IN STACK              7  6289  L 11O 0!0          170  8116     000+2
 2032         * POP (X1:3)
 2033                LCA   0&X2,X1            * LOAD STACK IN X1                    7  6296  L 0!0 089          170   000+2   089
 2034                MA    LRFAAA,X2          * ADD -3 TO STACK POINTER             7  6303  # 18L 094          170  8183     094
 2035         * POP (0+X1:3)
 2036                LCA   0&X2,0&X1          * LOAD STACK IN 0&X1                  7  6310  L 0!0 0'0          170   000+2   000+1
 2037                MA    LRFAAA,X2          * ADD -3 TO STACK POINTER             7  6317  # 18L 094          171  8183     094
 2038         * END ASSIGNMENT (__PUTCHAR_POS = 201)
 2039         *
 2040         * START ASM BLOCK
 2041                W                                                              1  6324  2                  171
 2042         * END ASM BLOCK
 2043         LZCAAA NOP                      * LAST BLOCK INSTRUCTION              1  6325  N                  171
 2044         * END [BLOCK ENDING AT LZCAAA]
 2045         ***************************************
 2046         *
 2047         LEDAAA NOP                      * EXECUTED WHEN TRUE                  1  6326  N                  171
1                                                                                                         PAGE   40
0 SEQ PG LIN  LABEL  OP    OPERANDS                                            SFX CT  LOCN  INSTRUCTION TYPE  CARD A-ADDR  B-ADDR

 2048         * END IF [IF ((C != '\N') THEN [BLOCK ENDING AT LYCAAA] ELSE [BLOCK ENDING
 2049         *
 2050         * IF [IF ((__PUTCHAR_POS == 333) THEN [BLOCK ENDING AT LFDAAA]]
 2051         * EQUAL (__PUTCHAR_POS == 333)
 2052         * STATIC VARIABLE (__PUTCHAR_POS : 724)
 2053         * PUSH (724:3)
 2054                MA    LKFAAA,X2          * ADD 3 TO STACK POINTER              7  6327  # 13P 094          171  8137     094
 2055                LCA   724,0&X2           * LOAD MEMORY 724 IN STACK            7  6334  L 724 0!0          171   724     000+2
 2056         * CONSTANT (333 : LLIAAA)
 2057         * PUSH (LLIAAA:3)
 2058                MA    LKFAAA,X2          * ADD 3 TO STACK POINTER              7  6341  # 13P 094          171  8137     094
 2059                LCA   LLIAAA,0&X2        * LOAD DATA 333 IN STACK              7  6348  L 14O 0!0          172  8146     000+2
 2060                C     0&X2,15997&X2      * COMPARE STACK TO STACK AT -3        7  6355  C 0!0 IRG          172   000+2 15997+2
 2061         * POP (3)
 2062                MA    LRFAAA,X2          * ADD -3 TO STACK POINTER             7  6362  # 18L 094          172  8183     094
 2063         * POP (3)
 2064                MA    LRFAAA,X2          * ADD -3 TO STACK POINTER             7  6369  # 18L 094          172  8183     094
 2065         * PUSH (LWFAAA:5)
 2066                MA    LMFAAA,X2          * ADD 5 TO STACK POINTER              7  6376  # 14R 094          172  8149     094
 2067                LCA   LWFAAA,0&X2        * LOAD DATA 00000 IN STACK            7  6383  L 23K 0!0          173  8232     000+2
 2068                BE    LJIAAA             * JUMP IF EQUAL                       5  6390  B L9Z S            173  6399
 2069                B     LKIAAA             * JUMP TO END                         4  6395  B M0W              173  6406
 2070         LJIAAA MCW   LTFAAA,0&X2        * MOVE 1 IN STACK                     7  6399  M 19P 0!0          173  8197     000+2
 2071         LKIAAA NOP                      * END OF EQUAL                        1  6406  N                  173
 2072                MCS   0&X2,0&X2          * CLEAR WM IN STACK                   7  6407  Z 0!0 0!0          173   000+2   000+2
 2073         * POP (5)
 2074                MA    LOFAAA,X2          * ADD -5 TO STACK POINTER             7  6414  # 16L 094          173  8163     094
 2075                BCE   LGDAAA,5&X2,       * JUMP WHEN FALSE                     8  6421  B N4T 0!5          174  6543     005+2
 2076         *
 2077         ***************************************
 2078         * BEGIN [BLOCK ENDING AT LFDAAA]
 2079         *
 2080         * ASSIGNMENT (__PUTCHAR_LAST = __PUTCHAR_POS)
 2081         * STATIC VARIABLE (__PUTCHAR_POS : 724)
 2082         * PUSH (724:3)
 2083                MA    LKFAAA,X2          * ADD 3 TO STACK POINTER              7  6429  # 13P 094          174  8137     094
 2084                LCA   724,0&X2           * LOAD MEMORY 724 IN STACK            7  6436  L 724 0!0          174   724     000+2
 2085         * PUSH (LHIAAA:3)
 2086                MA    LKFAAA,X2          * ADD 3 TO STACK POINTER              7  6443  # 13P 094          174  8137     094
 2087                LCA   LHIAAA,0&X2        * LOAD DATA 727 IN STACK              7  6450  L 12N 0!0          174  8125     000+2
 2088         * POP (X1:3)
 2089                LCA   0&X2,X1            * LOAD STACK IN X1                    7  6457  L 0!0 089          175   000+2   089
 2090                MA    LRFAAA,X2          * ADD -3 TO STACK POINTER             7  6464  # 18L 094          175  8183     094
 2091         * POP (0+X1:3)
 2092                LCA   0&X2,0&X1          * LOAD STACK IN 0&X1                  7  6471  L 0!0 0'0          175   000+2   000+1
 2093                MA    LRFAAA,X2          * ADD -3 TO STACK POINTER             7  6478  # 18L 094          175  8183     094
 2094         * END ASSIGNMENT (__PUTCHAR_LAST = __PUTCHAR_POS)
 2095         *
 2096         * ASSIGNMENT (__PUTCHAR_POS = 201)
 2097         * CONSTANT (201 : LIIAAA)
1                                                                                                         PAGE   41
0 SEQ PG LIN  LABEL  OP    OPERANDS                                            SFX CT  LOCN  INSTRUCTION TYPE  CARD A-ADDR  B-ADDR

 2098         * PUSH (LIIAAA:3)
 2099                MA    LKFAAA,X2          * ADD 3 TO STACK POINTER              7  6485  # 13P 094          175  8137     094
 2100                LCA   LIIAAA,0&X2        * LOAD DATA 201 IN STACK              7  6492  L 13J 0!0          176  8131     000+2
 2101         * PUSH (LDIAAA:3)
 2102                MA    LKFAAA,X2          * ADD 3 TO STACK POINTER              7  6499  # 13P 094          176  8137     094
 2103                LCA   LDIAAA,0&X2        * LOAD DATA 724 IN STACK              7  6506  L 11O 0!0          176  8116     000+2
 2104         * POP (X1:3)
 2105                LCA   0&X2,X1            * LOAD STACK IN X1                    7  6513  L 0!0 089          176   000+2   089
 2106                MA    LRFAAA,X2          * ADD -3 TO STACK POINTER             7  6520  # 18L 094          176  8183     094
 2107         * POP (0+X1:3)
 2108                LCA   0&X2,0&X1          * LOAD STACK IN 0&X1                  7  6527  L 0!0 0'0          177   000+2   000+1
 2109                MA    LRFAAA,X2          * ADD -3 TO STACK POINTER             7  6534  # 18L 094          177  8183     094
 2110         * END ASSIGNMENT (__PUTCHAR_POS = 201)
 2111         *
 2112         * START ASM BLOCK
 2113                W                                                              1  6541  2                  177
 2114         * END ASM BLOCK
 2115         LFDAAA NOP                      * LAST BLOCK INSTRUCTION              1  6542  N                  177
 2116         * END [BLOCK ENDING AT LFDAAA]
 2117         ***************************************
 2118         *
 2119         LGDAAA NOP                      * EXECUTED WHEN FALSE                 1  6543  N                  177
 2120         * END IF [IF ((__PUTCHAR_POS == 333) THEN [BLOCK ENDING AT LFDAAA]]
 2121         *
 2122         LXCAAA NOP                      * LAST BLOCK INSTRUCTION              1  6544  N                  177
 2123         * POP (3)
 2124                MA    LRFAAA,X2          * ADD -3 TO STACK POINTER             7  6545  # 18L 094          177  8183     094
 2125         * END [BLOCK ENDING AT LXCAAA]
 2126         ***************************************
 2127         *
 2128                LCA   3&X3,X1            * LOAD RETURN ADDRESS IN X1           7  6552  L 0?3 089          178   003+3   089
 2129                B     0&X1               * JUMP BACK TO CALLER IN X1           4  6559  B 0'0              178   000+1
 2130         *
 2131         ***************************************************************************
 2132         * END FUNCTION : PUTCHAR
 2133         ***************************************************************************
 2134         *
 2135         ***************************************************************************
 2136         * FUNCTION : PUTS
 2137         ***************************************************************************
 2138         LHDAAA SBR   3&X3               * SAVE RETURN ADDRESS IN REGISTER     4  6563  H 0?3              178   003+3
 2139         * SET THE RIGHT WM AND CLEAR THE WRONG ONES
 2140                SW    1&X3               * SET WM AT 1&X3                      4  6567  , 0?1              178   001+3
 2141                CW    2&X3               * CLEAR WM AT 2&X3                    4  6571  ) 0?2              178   002+3
 2142                CW    3&X3               * CLEAR WM AT 3&X3                    4  6575  ) 0?3              178   003+3
 2143         *
 2144         ***************************************
 2145         * BEGIN [BLOCK ENDING AT LIDAAA]
 2146         *
 2147         * PUSH (3)
1                                                                                                         PAGE   42
0 SEQ PG LIN  LABEL  OP    OPERANDS                                            SFX CT  LOCN  INSTRUCTION TYPE  CARD A-ADDR  B-ADDR

 2148                MA    LKFAAA,X2          * ADD 3 TO STACK POINTER              7  6579  # 13P 094          178  8137     094
 2149         * WHILE [WHILE (((*S) != '\0')) [BLOCK ENDING AT LJDAAA] TOP:LKDAAA BOTTOM:
 2150         LKDAAA NOP                      * TOP OF WHILE                        1  6586  N                  179
 2151         * NOTEQUAL (!=) ((*S) != '\0')
 2152         * DEREFERENCEEXPRESSION (*S)
 2153         * PARAMETER VARIABLE (S : 15997+X3)
 2154         * PUSH (15997+X3:3)
 2155                MA    LKFAAA,X2          * ADD 3 TO STACK POINTER              7  6587  # 13P 094          179  8137     094
 2156                LCA   15997&X3,0&X2      * LOAD MEMORY 15997&X3 IN STACK       7  6594  L IIG 0!0          179 15997+3   000+2
 2157         * POP (X1:3)
 2158                LCA   0&X2,X1            * LOAD STACK IN X1                    7  6601  L 0!0 089          179   000+2   089
 2159                MA    LRFAAA,X2          * ADD -3 TO STACK POINTER             7  6608  # 18L 094          179  8183     094
 2160         * PUSH (0+X1:1)
 2161                MA    LAGAAA,X2          * ADD 1 TO STACK POINTER              7  6615  # 09Q 094          179  8098     094
 2162                LCA   0&X1,0&X2          * LOAD MEMORY 0&X1 IN STACK           7  6622  L 0'0 0!0          180   000+1   000+2
 2163         * END DEREFERENCEEXPRESSION (*S)
 2164         *
 2165         * CONSTANT ('\0' : EOS)
 2166         * PUSH (EOS:1)
 2167                MA    LAGAAA,X2          * ADD 1 TO STACK POINTER              7  6629  # 09Q 094          180  8098     094
 2168                LCA   EOS,0&X2           * LOAD MEMORY EOS IN STACK            7  6636  L 345 0!0          180   345     000+2
 2169                C     0&X2,15999&X2      * COMPARE STACK TO STACK AT -1        7  6643  C 0!0 IRI          180   000+2 15999+2
 2170         * POP (1)
 2171                MA    LCGAAA,X2          * ADD -1 TO STACK POINTER             7  6650  # 11L 094          180  8113     094
 2172         * POP (1)
 2173                MA    LCGAAA,X2          * ADD -1 TO STACK POINTER             7  6657  # 11L 094          181  8113     094
 2174         * PUSH (LTFAAA:5)
 2175                MA    LMFAAA,X2          * ADD 5 TO STACK POINTER              7  6664  # 14R 094          181  8149     094
 2176                LCA   LTFAAA,0&X2        * LOAD DATA 00001 IN STACK            7  6671  L 19P 0!0          181  8197     000+2
 2177                BE    LMIAAA             * JUMP IF EQUAL                       5  6678  B O8X S            181  6687
 2178                B     LNIAAA             * JUMP TO END                         4  6683  B O9U              181  6694
 2179         LMIAAA MCW   LWFAAA,0&X2        * MOVE 0 IN STACK                     7  6687  M 23K 0!0          181  8232     000+2
 2180         LNIAAA NOP                      * END OF NOTEQUAL                     1  6694  N                  181
 2181                MCS   0&X2,0&X2          * CLEAR WM IN STACK                   7  6695  Z 0!0 0!0          182   000+2   000+2
 2182         * POP (5)
 2183                MA    LOFAAA,X2          * ADD -5 TO STACK POINTER             7  6702  # 16L 094          182  8163     094
 2184                BCE   LLDAAA,5&X2,       * JUMP TO BOTTOM OF WHILE             8  6709  B Q6W 0!5          182  6866     005+2
 2185         *
 2186         ***************************************
 2187         * BEGIN [BLOCK ENDING AT LJDAAA]
 2188         *
 2189         * FUNCTION CALL PUTCHAR((*(S++)))
 2190         * PUSH (5)
 2191                MA    LMFAAA,X2          * ADD 5 TO STACK POINTER              7  6717  # 14R 094          182  8149     094
 2192         * DEREFERENCEEXPRESSION (*(S++))
 2193         * POSTINCREMENT (S++)
 2194         * PUSH (LRFAAA:3)
 2195                MA    LKFAAA,X2          * ADD 3 TO STACK POINTER              7  6724  # 13P 094          182  8137     094
 2196                LCA   LRFAAA,0&X2        * LOAD DATA I9G IN STACK              7  6731  L 18L 0!0          183  8183     000+2
 2197                MA    X3,0&X2            * ADD X3 TO STACK                     7  6738  # 099 0!0          183   099     000+2
1                                                                                                         PAGE   43
0 SEQ PG LIN  LABEL  OP    OPERANDS                                            SFX CT  LOCN  INSTRUCTION TYPE  CARD A-ADDR  B-ADDR

 2198         * POP (X1:3)
 2199                LCA   0&X2,X1            * LOAD STACK IN X1                    7  6745  L 0!0 089          183   000+2   089
 2200                MA    LRFAAA,X2          * ADD -3 TO STACK POINTER             7  6752  # 18L 094          183  8183     094
 2201         * PUSH (0+X1:3)
 2202                MA    LKFAAA,X2          * ADD 3 TO STACK POINTER              7  6759  # 13P 094          183  8137     094
 2203                LCA   0&X1,0&X2          * LOAD MEMORY 0&X1 IN STACK           7  6766  L 0'0 0!0          184   000+1   000+2
 2204                MA    LAGAAA,0&X1        * POSTINCREMENT POINTER AT X1         7  6773  # 09Q 0'0          184  8098     000+1
 2205         * POP (X1:3)
 2206                LCA   0&X2,X1            * LOAD STACK IN X1                    7  6780  L 0!0 089          184   000+2   089
 2207                MA    LRFAAA,X2          * ADD -3 TO STACK POINTER             7  6787  # 18L 094          184  8183     094
 2208         * PUSH (0+X1:1)
 2209                MA    LAGAAA,X2          * ADD 1 TO STACK POINTER              7  6794  # 09Q 094          184  8098     094
 2210                LCA   0&X1,0&X2          * LOAD MEMORY 0&X1 IN STACK           7  6801  L 0'0 0!0          185   000+1   000+2
 2211         * END DEREFERENCEEXPRESSION (*(S++))
 2212         *
 2213         * CREATE A STACK FRAME WITH X3 POINTER TO IT
 2214         * PUSH (X3:3)
 2215                MA    LKFAAA,X2          * ADD 3 TO STACK POINTER              7  6808  # 13P 094          185  8137     094
 2216                LCA   X3,0&X2            * LOAD X3 IN STACK                    7  6815  L 099 0!0          185   099     000+2
 2217                MCW   X2,X3              * MOVE X2 IN X3                       7  6822  M 094 099          185   094     099
 2218         *
 2219                B     LWCAAA             * JUMP TO FUNCTION PUTCHAR            4  6829  B X8Y              185  5788
 2220         *
 2221         * POP (X3:3)
 2222                LCA   0&X2,X3            * LOAD STACK IN X3                    7  6833  L 0!0 099          185   000+2   099
 2223                MA    LRFAAA,X2          * ADD -3 TO STACK POINTER             7  6840  # 18L 094          186  8183     094
 2224         * POP (1)
 2225                MA    LCGAAA,X2          * ADD -1 TO STACK POINTER             7  6847  # 11L 094          186  8113     094
 2226         * POP (5)
 2227                MA    LOFAAA,X2          * ADD -5 TO STACK POINTER             7  6854  # 16L 094          186  8163     094
 2228         * END FUNCTION CALL PUTCHAR((*(S++)))
 2229         *
 2230         LJDAAA NOP                      * LAST BLOCK INSTRUCTION              1  6861  N                  186
 2231         * END [BLOCK ENDING AT LJDAAA]
 2232         ***************************************
 2233         *
 2234                B     LKDAAA             * JUMP TO TOP OF WHILE                4  6862  B N8W              186  6586
 2235         *
 2236         LLDAAA NOP                      * BOTTOM OF WHILE                     1  6866  N                  186
 2237         * END WHILE [WHILE (((*S) != '\0')) [BLOCK ENDING AT LJDAAA] TOP:LKDAAA BOT
 2238         *
 2239         LIDAAA NOP                      * LAST BLOCK INSTRUCTION              1  6867  N                  186
 2240         * POP (3)
 2241                MA    LRFAAA,X2          * ADD -3 TO STACK POINTER             7  6868  # 18L 094          187  8183     094
 2242         * END [BLOCK ENDING AT LIDAAA]
 2243         ***************************************
 2244         *
 2245                LCA   3&X3,X1            * LOAD RETURN ADDRESS IN X1           7  6875  L 0?3 089          187   003+3   089
 2246                B     0&X1               * JUMP BACK TO CALLER IN X1           4  6882  B 0'0              187   000+1
 2247         *
1                                                                                                         PAGE   44
0 SEQ PG LIN  LABEL  OP    OPERANDS                                            SFX CT  LOCN  INSTRUCTION TYPE  CARD A-ADDR  B-ADDR

 2248         ***************************************************************************
 2249         * END FUNCTION : PUTS
 2250         ***************************************************************************
 2251         *
 2252         ***************************************************************************
 2253         * FUNCTION : STRCPY
 2254         ***************************************************************************
 2255         LJAAAA SBR   3&X3               * SAVE RETURN ADDRESS IN REGISTER     4  6886  H 0?3              187   003+3
 2256         * SET THE RIGHT WM AND CLEAR THE WRONG ONES
 2257                SW    1&X3               * SET WM AT 1&X3                      4  6890  , 0?1              187   001+3
 2258                CW    2&X3               * CLEAR WM AT 2&X3                    4  6894  ) 0?2              187   002+3
 2259                CW    3&X3               * CLEAR WM AT 3&X3                    4  6898  ) 0?3              187   003+3
 2260         *
 2261         ***************************************
 2262         * BEGIN [BLOCK ENDING AT LKAAAA]
 2263         *
 2264         * PUSH (3)
 2265                MA    LKFAAA,X2          * ADD 3 TO STACK POINTER              7  6902  # 13P 094          188  8137     094
 2266         * WHILE [WHILE ((((*(DEST++)) = (*(SRC++))) != '\0')) [] TOP:LLAAAA BOTTOM:
 2267         LLAAAA NOP                      * TOP OF WHILE                        1  6909  N                  188
 2268         * NOTEQUAL (!=) (((*(DEST++)) = (*(SRC++))) != '\0')
 2269         * ASSIGNMENT ((*(DEST++)) = (*(SRC++)))
 2270         * DEREFERENCEEXPRESSION (*(SRC++))
 2271         * POSTINCREMENT (SRC++)
 2272         * PUSH (LQIAAA:3)
 2273                MA    LKFAAA,X2          * ADD 3 TO STACK POINTER              7  6910  # 13P 094          188  8137     094
 2274                LCA   LQIAAA,0&X2        * LOAD DATA I9D IN STACK              7  6917  L 18! 0!0          188  8180     000+2
 2275                MA    X3,0&X2            * ADD X3 TO STACK                     7  6924  # 099 0!0          188   099     000+2
 2276         * POP (X1:3)
 2277                LCA   0&X2,X1            * LOAD STACK IN X1                    7  6931  L 0!0 089          188   000+2   089
 2278                MA    LRFAAA,X2          * ADD -3 TO STACK POINTER             7  6938  # 18L 094          189  8183     094
 2279         * PUSH (0+X1:3)
 2280                MA    LKFAAA,X2          * ADD 3 TO STACK POINTER              7  6945  # 13P 094          189  8137     094
 2281                LCA   0&X1,0&X2          * LOAD MEMORY 0&X1 IN STACK           7  6952  L 0'0 0!0          189   000+1   000+2
 2282                MA    LAGAAA,0&X1        * POSTINCREMENT POINTER AT X1         7  6959  # 09Q 0'0          189  8098     000+1
 2283         * POP (X1:3)
 2284                LCA   0&X2,X1            * LOAD STACK IN X1                    7  6966  L 0!0 089          189   000+2   089
 2285                MA    LRFAAA,X2          * ADD -3 TO STACK POINTER             7  6973  # 18L 094          190  8183     094
 2286         * PUSH (0+X1:1)
 2287                MA    LAGAAA,X2          * ADD 1 TO STACK POINTER              7  6980  # 09Q 094          190  8098     094
 2288                LCA   0&X1,0&X2          * LOAD MEMORY 0&X1 IN STACK           7  6987  L 0'0 0!0          190   000+1   000+2
 2289         * END DEREFERENCEEXPRESSION (*(SRC++))
 2290         *
 2291         * POSTINCREMENT (DEST++)
 2292         * PUSH (LRFAAA:3)
 2293                MA    LKFAAA,X2          * ADD 3 TO STACK POINTER              7  6994  # 13P 094          190  8137     094
 2294                LCA   LRFAAA,0&X2        * LOAD DATA I9G IN STACK              7  7001  L 18L 0!0          190  8183     000+2
 2295                MA    X3,0&X2            * ADD X3 TO STACK                     7  7008  # 099 0!0          191   099     000+2
 2296         * POP (X1:3)
 2297                LCA   0&X2,X1            * LOAD STACK IN X1                    7  7015  L 0!0 089          191   000+2   089
1                                                                                                         PAGE   45
0 SEQ PG LIN  LABEL  OP    OPERANDS                                            SFX CT  LOCN  INSTRUCTION TYPE  CARD A-ADDR  B-ADDR

 2298                MA    LRFAAA,X2          * ADD -3 TO STACK POINTER             7  7022  # 18L 094          191  8183     094
 2299         * PUSH (0+X1:3)
 2300                MA    LKFAAA,X2          * ADD 3 TO STACK POINTER              7  7029  # 13P 094          191  8137     094
 2301                LCA   0&X1,0&X2          * LOAD MEMORY 0&X1 IN STACK           7  7036  L 0'0 0!0          191   000+1   000+2
 2302                MA    LAGAAA,0&X1        * POSTINCREMENT POINTER AT X1         7  7043  # 09Q 0'0          192  8098     000+1
 2303         * POP (X1:3)
 2304                LCA   0&X2,X1            * LOAD STACK IN X1                    7  7050  L 0!0 089          192   000+2   089
 2305                MA    LRFAAA,X2          * ADD -3 TO STACK POINTER             7  7057  # 18L 094          192  8183     094
 2306                LCA   0&X2,0&X1          * LOAD STACK IN MEMORY X1             7  7064  L 0!0 0'0          192   000+2   000+1
 2307         * END ASSIGNMENT ((*(DEST++)) = (*(SRC++)))
 2308         *
 2309         * CONSTANT ('\0' : EOS)
 2310         * PUSH (EOS:1)
 2311                MA    LAGAAA,X2          * ADD 1 TO STACK POINTER              7  7071  # 09Q 094          192  8098     094
 2312                LCA   EOS,0&X2           * LOAD MEMORY EOS IN STACK            7  7078  L 345 0!0          193   345     000+2
 2313                C     0&X2,15999&X2      * COMPARE STACK TO STACK AT -1        7  7085  C 0!0 IRI          193   000+2 15999+2
 2314         * POP (1)
 2315                MA    LCGAAA,X2          * ADD -1 TO STACK POINTER             7  7092  # 11L 094          193  8113     094
 2316         * POP (1)
 2317                MA    LCGAAA,X2          * ADD -1 TO STACK POINTER             7  7099  # 11L 094          193  8113     094
 2318         * PUSH (LTFAAA:5)
 2319                MA    LMFAAA,X2          * ADD 5 TO STACK POINTER              7  7106  # 14R 094          193  8149     094
 2320                LCA   LTFAAA,0&X2        * LOAD DATA 00001 IN STACK            7  7113  L 19P 0!0          194  8197     000+2
 2321                BE    LOIAAA             * JUMP IF EQUAL                       5  7120  B A2Z S            194  7129
 2322                B     LPIAAA             * JUMP TO END                         4  7125  B A3W              194  7136
 2323         LOIAAA MCW   LWFAAA,0&X2        * MOVE 0 IN STACK                     7  7129  M 23K 0!0          194  8232     000+2
 2324         LPIAAA NOP                      * END OF NOTEQUAL                     1  7136  N                  194
 2325                MCS   0&X2,0&X2          * CLEAR WM IN STACK                   7  7137  Z 0!0 0!0          194   000+2   000+2
 2326         * POP (5)
 2327                MA    LOFAAA,X2          * ADD -5 TO STACK POINTER             7  7144  # 16L 094          194  8163     094
 2328                BCE   LMAAAA,5&X2,       * JUMP TO BOTTOM OF WHILE             8  7151  B A6T 0!5          195  7163     005+2
 2329                B     LLAAAA             * JUMP TO TOP OF WHILE                4  7159  B R0Z              195  6909
 2330         *
 2331         LMAAAA NOP                      * BOTTOM OF WHILE                     1  7163  N                  195
 2332         * END WHILE [WHILE ((((*(DEST++)) = (*(SRC++))) != '\0')) [] TOP:LLAAAA BOT
 2333         *
 2334         LKAAAA NOP                      * LAST BLOCK INSTRUCTION              1  7164  N                  195
 2335         * POP (3)
 2336                MA    LRFAAA,X2          * ADD -3 TO STACK POINTER             7  7165  # 18L 094          195  8183     094
 2337         * END [BLOCK ENDING AT LKAAAA]
 2338         ***************************************
 2339         *
 2340                LCA   3&X3,X1            * LOAD RETURN ADDRESS IN X1           7  7172  L 0?3 089          195   003+3   089
 2341                B     0&X1               * JUMP BACK TO CALLER IN X1           4  7179  B 0'0              195   000+1
 2342         *
 2343         ***************************************************************************
 2344         * END FUNCTION : STRCPY
 2345         ***************************************************************************
 2346         *
 2347         ***************************************************************************
1                                                                                                         PAGE   46
0 SEQ PG LIN  LABEL  OP    OPERANDS                                            SFX CT  LOCN  INSTRUCTION TYPE  CARD A-ADDR  B-ADDR

 2348         * FUNCTION : STRLEN
 2349         ***************************************************************************
 2350         LFAAAA SBR   3&X3               * SAVE RETURN ADDRESS IN REGISTER     4  7183  H 0?3              196   003+3
 2351         * SET THE RIGHT WM AND CLEAR THE WRONG ONES
 2352                SW    1&X3               * SET WM AT 1&X3                      4  7187  , 0?1              196   001+3
 2353                CW    2&X3               * CLEAR WM AT 2&X3                    4  7191  ) 0?2              196   002+3
 2354                CW    3&X3               * CLEAR WM AT 3&X3                    4  7195  ) 0?3              196   003+3
 2355         *
 2356         ***************************************
 2357         * BEGIN [BLOCK ENDING AT LGAAAA]
 2358         * LEN SIZE:5 OFFSET:3
 2359         *
 2360                LCA   LRIAAA,8&X3        * LOAD INT -1 INTO MEMORY 8&X3        7  7199  L 18Q 0?8          196  8188     008+3
 2361         * PUSH (8)
 2362                MA    LJGAAA,X2          * ADD 8 TO STACK POINTER              7  7206  # 13M 094          196  8134     094
 2363         * WHILE [WHILE (((STR[(++LEN)]) != '\0')) [] TOP:LHAAAA BOTTOM:LIAAAA]
 2364         LHAAAA NOP                      * TOP OF WHILE                        1  7213  N                  196
 2365         * NOTEQUAL (!=) ((STR[(++LEN)]) != '\0')
 2366         * SUBSCRIPT (STR[(++LEN)])
 2367         * PARAMETER VARIABLE (STR : 15997+X3)
 2368         * PUSH (15997+X3:3)
 2369                MA    LKFAAA,X2          * ADD 3 TO STACK POINTER              7  7214  # 13P 094          197  8137     094
 2370                LCA   15997&X3,0&X2      * LOAD MEMORY 15997&X3 IN STACK       7  7221  L IIG 0!0          197 15997+3   000+2
 2371         * PREINCREMENT((++LEN)
 2372         * PUSH (LJGAAA:3)
 2373                MA    LKFAAA,X2          * ADD 3 TO STACK POINTER              7  7228  # 13P 094          197  8137     094
 2374                LCA   LJGAAA,0&X2        * LOAD DATA 008 IN STACK              7  7235  L 13M 0!0          197  8134     000+2
 2375                MA    X3,0&X2            * ADD X3 TO STACK                     7  7242  # 099 0!0          197   099     000+2
 2376         * POP (X1:3)
 2377                LCA   0&X2,X1            * LOAD STACK IN X1                    7  7249  L 0!0 089          198   000+2   089
 2378                MA    LRFAAA,X2          * ADD -3 TO STACK POINTER             7  7256  # 18L 094          198  8183     094
 2379                A     LTFAAA,0&X1        * PREINCREMENT MEMORY AT X1           7  7263  A 19P 0'0          198  8197     000+1
 2380         * PUSH (0+X1:5)
 2381                MA    LMFAAA,X2          * ADD 5 TO STACK POINTER              7  7270  # 14R 094          198  8149     094
 2382                LCA   0&X1,0&X2          * LOAD MEMORY 0&X1 IN STACK           7  7277  L 0'0 0!0          198   000+1   000+2
 2383         * PUT RAW INDEX ON THE STACK
 2384         * PUSH (LTFAAA:5)
 2385                MA    LMFAAA,X2          * ADD 5 TO STACK POINTER              7  7284  # 14R 094          199  8149     094
 2386                LCA   LTFAAA,0&X2        * LOAD DATA 00001 IN STACK            7  7291  L 19P 0!0          199  8197     000+2
 2387                M     15995&X2,6&X2      * MULTIPLY STACK AT -5 TO STACK A     7  7298  @ IRE 0!6          199 15995+2   006+2
 2388                SW    2&X2               * SET WM IN STACK AT 2                4  7305  , 0!2              199   002+2
 2389                LCA   6&X2,15995&X2      * LOAD STACK AT 6 IN STACK AT -5      7  7309  L 0!6 IRE          199   006+2 15995+2
 2390         * POP (5)
 2391                MA    LOFAAA,X2          * ADD -5 TO STACK POINTER             7  7316  # 16L 094          199  8163     094
 2392         * STACK TOP IS NOW ARRAY INDEX
 2393                B     NMNPTR             * JUMP TO SNIPPET NUMBER_TO_POINT     4  7323  B E0Z              200  7509
 2394         *
 2395                MA    0&X2,15997&X2      * ADD STACK TO STACK AT -3            7  7327  # 0!0 IRG          200   000+2 15997+2
 2396         * POP (3)
 2397                MA    LRFAAA,X2          * ADD -3 TO STACK POINTER             7  7334  # 18L 094          200  8183     094
1                                                                                                         PAGE   47
0 SEQ PG LIN  LABEL  OP    OPERANDS                                            SFX CT  LOCN  INSTRUCTION TYPE  CARD A-ADDR  B-ADDR

 2398         * STACK TOP IS LOCATION IN ARRAY NOW
 2399         * END SUBSCRIPT (STR[(++LEN)])
 2400         * POP (X1:3)
 2401                LCA   0&X2,X1            * LOAD STACK IN X1                    7  7341  L 0!0 089          200   000+2   089
 2402                MA    LRFAAA,X2          * ADD -3 TO STACK POINTER             7  7348  # 18L 094          200  8183     094
 2403         * PUSH (0+X1:1)
 2404                MA    LAGAAA,X2          * ADD 1 TO STACK POINTER              7  7355  # 09Q 094          200  8098     094
 2405                LCA   0&X1,0&X2          * LOAD MEMORY 0&X1 IN STACK           7  7362  L 0'0 0!0          201   000+1   000+2
 2406         * CONSTANT ('\0' : EOS)
 2407         * PUSH (EOS:1)
 2408                MA    LAGAAA,X2          * ADD 1 TO STACK POINTER              7  7369  # 09Q 094          201  8098     094
 2409                LCA   EOS,0&X2           * LOAD MEMORY EOS IN STACK            7  7376  L 345 0!0          201   345     000+2
 2410                C     0&X2,15999&X2      * COMPARE STACK TO STACK AT -1        7  7383  C 0!0 IRI          201   000+2 15999+2
 2411         * POP (1)
 2412                MA    LCGAAA,X2          * ADD -1 TO STACK POINTER             7  7390  # 11L 094          201  8113     094
 2413         * POP (1)
 2414                MA    LCGAAA,X2          * ADD -1 TO STACK POINTER             7  7397  # 11L 094          202  8113     094
 2415         * PUSH (LTFAAA:5)
 2416                MA    LMFAAA,X2          * ADD 5 TO STACK POINTER              7  7404  # 14R 094          202  8149     094
 2417                LCA   LTFAAA,0&X2        * LOAD DATA 00001 IN STACK            7  7411  L 19P 0!0          202  8197     000+2
 2418                BE    LSIAAA             * JUMP IF EQUAL                       5  7418  B D2X S            202  7427
 2419                B     LTIAAA             * JUMP TO END                         4  7423  B D3U              202  7434
 2420         LSIAAA MCW   LWFAAA,0&X2        * MOVE 0 IN STACK                     7  7427  M 23K 0!0          202  8232     000+2
 2421         LTIAAA NOP                      * END OF NOTEQUAL                     1  7434  N                  202
 2422                MCS   0&X2,0&X2          * CLEAR WM IN STACK                   7  7435  Z 0!0 0!0          203   000+2   000+2
 2423         * POP (5)
 2424                MA    LOFAAA,X2          * ADD -5 TO STACK POINTER             7  7442  # 16L 094          203  8163     094
 2425                BCE   LIAAAA,5&X2,       * JUMP TO BOTTOM OF WHILE             8  7449  B D6/ 0!5          203  7461     005+2
 2426                B     LHAAAA             * JUMP TO TOP OF WHILE                4  7457  B B1T              203  7213
 2427         *
 2428         LIAAAA NOP                      * BOTTOM OF WHILE                     1  7461  N                  203
 2429         * END WHILE [WHILE (((STR[(++LEN)]) != '\0')) [] TOP:LHAAAA BOTTOM:LIAAAA]
 2430         *
 2431         * PUT ON STACK RETURN VALUE (LEN)
 2432         * LOCAL VARIABLE (LEN : 8+X3)
 2433         * PUSH (8+X3:5)
 2434                MA    LMFAAA,X2          * ADD 5 TO STACK POINTER              7  7462  # 14R 094          203  8149     094
 2435                LCA   8&X3,0&X2          * LOAD MEMORY 8&X3 IN STACK           7  7469  L 0?8 0!0          204   008+3   000+2
 2436         * POP (15994+X3:5)
 2437                LCA   0&X2,15994&X3      * LOAD STACK IN 15994&X3              7  7476  L 0!0 IID          204   000+2 15994+3
 2438                MA    LOFAAA,X2          * ADD -5 TO STACK POINTER             7  7483  # 16L 094          204  8163     094
 2439         *
 2440         LGAAAA NOP                      * LAST BLOCK INSTRUCTION              1  7490  N                  204
 2441         * POP (8)
 2442                MA    LBGAAA,X2          * ADD -8 TO STACK POINTER             7  7491  # 10P 094          204  8107     094
 2443         * END [BLOCK ENDING AT LGAAAA]
 2444         ***************************************
 2445         *
 2446                LCA   3&X3,X1            * LOAD RETURN ADDRESS IN X1           7  7498  L 0?3 089          204   003+3   089
 2447                B     0&X1               * JUMP BACK TO CALLER IN X1           4  7505  B 0'0              205   000+1
1                                                                                                         PAGE   48
0 SEQ PG LIN  LABEL  OP    OPERANDS                                            SFX CT  LOCN  INSTRUCTION TYPE  CARD A-ADDR  B-ADDR

 2448         *
 2449         ***************************************************************************
 2450         * END FUNCTION : STRLEN
 2451         ***************************************************************************
 2452         ****************************************************************
 2453         ** CAST NUMBER TO POINTER SNIPPET                             **
 2454         ****************************************************************
 2455         *
 2456         NMNPTR SBR   X1                                                       4  7509  H 089              205   089
 2457         * CASTS A 5-DIGIT NUMBER TO A 3-DIGIT ADDRESS
 2458         * MAKE A COPY OF THE TOP OF THE STACK
 2459                SW    15998&X2                                                 4  7513  , IRH              205 15998+2
 2460                LCA   0&X2,3&X2                                                7  7517  L 0!0 0!3          205   000+2   003+2
 2461                CW    15998&X2                                                 4  7524  ) IRH              205 15998+2
 2462         * ZERO OUT THE ZONE BITS OF OUR COPY
 2463                MZ    @0@,3&X2                                                 7  7528  Y 24O 0!3          205  8246     003+2
 2464                MZ    @0@,2&X2                                                 7  7535  Y 24O 0!2          205  8246     002+2
 2465                MZ    @0@,1&X2                                                 7  7542  Y 24O 0!1          206  8246     001+2
 2466         * SET THE LOW-ORDER DIGIT'S ZONE BITS
 2467                C     @04000@,0&X2                                             7  7549  C 25J 0!0          206  8251     000+2
 2468                BL    NPHIGH                                                   5  7556  B F3V T            206  7635
 2469                C     @08000@,0&X2                                             7  7561  C 25O 0!0          206  8256     000+2
 2470                BL    NPLOZ                                                    5  7568  B F2/ T            206  7621
 2471                C     @12000@,0&X2                                             7  7573  C 26J 0!0          206  8261     000+2
 2472                BL    NPLZO                                                    5  7580  B F0T T            207  7603
 2473                S     @12000@,0&X2                                             7  7585  S 26O 0!0          207  8266     000+2
 2474                MZ    @A@,3&X2                                                 7  7592  Y 26P 0!3          207  8267     003+2
 2475                B     NPHIGH                                                   4  7599  B F3V              207  7635
 2476         NPLZO  S     @08000@,0&X2                                             7  7603  S 27K 0!0          207  8272     000+2
 2477                MZ    @I@,3&X2                                                 7  7610  Y 27L 0!3          207  8273     003+2
 2478                B     NPHIGH                                                   4  7617  B F3V              208  7635
 2479         NPLOZ  S     @04000@,0&X2                                             7  7621  S 27Q 0!0          208  8278     000+2
 2480                MZ    @S@,3&X2                                                 7  7628  Y 27R 0!3          208  8279     003+2
 2481         * FOR SOME REASON THE ZONE BITS GET SET - IT STILL WORKS THOUGH.
 2482         NPHIGH C     @01000@,0&X2                                             7  7635  C 28M 0!0          208  8284     000+2
 2483                BL    NMPTRE                                                   5  7642  B G0' T            208  7700
 2484                C     @02000@,0&X2                                             7  7647  C 28R 0!0          208  8289     000+2
 2485                BL    NPHOZ                                                    5  7654  B F9T T            209  7693
 2486                C     @03000@,0&X2                                             7  7659  C 29M 0!0          209  8294     000+2
 2487                BL    NPHZO                                                    5  7666  B F8S T            209  7682
 2488                MZ    @A@,1&X2                                                 7  7671  Y 26P 0!1          209  8267     001+2
 2489                B     NMPTRE                                                   4  7678  B G0'              209  7700
 2490         NPHZO  MZ    @I@,1&X2                                                 7  7682  Y 27L 0!1          209  8273     001+2
 2491                B     NMPTRE                                                   4  7689  B G0'              209  7700
 2492         NPHOZ  MZ    @S@,1&X2                                                 7  7693  Y 27R 0!1          210  8279     001+2
 2493         NMPTRE LCA   3&X2,15998&X2                                            7  7700  L 0!3 IRH          210   003+2 15998+2
 2494                SBR   X2,15998&X2                                              7  7707  H 094 IRH          210   094   15998+2
 2495                B     0&X1                                                     4  7714  B 0'0              210   000+1
 2496         *
 2497         ****************************************************************
1                                                                                                         PAGE   49
0 SEQ PG LIN  LABEL  OP    OPERANDS                                            SFX CT  LOCN  INSTRUCTION TYPE  CARD A-ADDR  B-ADDR

 2498         ****************************************************************
 2499         ** DIVISION SNIPPET                                           **
 2500         ****************************************************************
 2501         * SETUP RETURN ADDRESS
 2502         SNPDIV SBR   DIVEND&3                                                 4  7718  H H7T              210  7873
 2503         *
 2504         * POP DIVIDEND
 2505                MCW   0&X2,CDIV2                                               7  7722  M 0!0 H8T          210   000+2  7883
 2506                SBR   X2,15995&X2                                              7  7729  H 094 IRE          211   094   15995+2
 2507         *
 2508         * POP DIVISOR
 2509                MCW   0&X2,CDIV1                                               7  7736  M 0!0 H7Y          211   000+2  7878
 2510                SBR   X2,15995&X2                                              7  7743  H 094 IRE          211   094   15995+2
 2511         *
 2512         *
 2513                B     *&17               * BRANCH 17 PLACES DOWN?              4  7750  B G7'              211  7770
 2514         *
 2515                DCW   @00000@                                                  5  7758                     211
 2516                DC    @00000000000@                                           11  7769                     212
 2517         *
 2518                ZA    CDIV2,*-7        * PUT DIVIDEND INTO WORKING BL          7  7770  ? H8T G6Z          212  7883    7769
 2519                D     CDIV1,*-19       * DIVIDE                                7  7777  % H7Y G6U          212  7878    7764
 2520                MZ    *-22,*-21        * KILL THE ZONE BIT                     7  7784  Y G6Y G6Z          212  7768    7769
 2521                MZ    *-29,*-34        * KILL THE ZONE BIT                     7  7791  Y G6Y G6T          212  7768    7763
 2522                MCW   *-41,CDIV3       * PICK UP ANSWER                        7  7798  M G6T H8Y          213  7763    7888
 2523                SW    *-44              * SO I CAN PICKUP REMAINDER            4  7805  , G6U              213  7764
 2524                MCW   *-46,CDIV4       * GET REMAINDER                         7  7809  M G6Z H9T          213  7769    7893
 2525                CW    *-55              * CLEAR THE WM                         4  7816  ) G6U              213  7764
 2526                MZ    CDIV3-1,CDIV3    * CLEANUP QUOTIENT BITZONE              7  7820  Y H8X H8Y          213  7887    7888
 2527                MZ    CDIV4-1,CDIV4    * CLEANUP REMAINDER BITZONE             7  7827  Y H9S H9T          213  7892    7893
 2528         *
 2529         * PUSH REMAINDER
 2530                SBR   X2,5&X2                                                  7  7834  H 094 0!5          214   094     005+2
 2531                SW    15996&X2                                                 4  7841  , IRF              214 15996+2
 2532                MCW   CDIV4,0&X2                                               7  7845  M H9T 0!0          214  7893     000+2
 2533         *
 2534         * PUSH QUOTIENT
 2535                SBR   X2,5&X2                                                  7  7852  H 094 0!5          214   094     005+2
 2536                SW    15996&X2                                                 4  7859  , IRF              214 15996+2
 2537                MCW   CDIV3,0&X2                                               7  7863  M H8Y 0!0          214  7888     000+2
 2538         *
 2539         * JUMP BACK
 2540         DIVEND B     000                                                      4  7870  B 000              215   000
 2541         *
 2542         * DIVISOR
 2543         CDIV1  DCW   00000                                                    5  7878                     215
 2544         * DIVIDEND
 2545         CDIV2  DCW   00000                                                    5  7883                     215
 2546         * QUOTIENT
 2547         CDIV3  DCW   00000                                                    5  7888                     215
1                                                                                                         PAGE   50
0 SEQ PG LIN  LABEL  OP    OPERANDS                                            SFX CT  LOCN  INSTRUCTION TYPE  CARD A-ADDR  B-ADDR

 2548         * REMAINDER
 2549         CDIV4  DCW   00000                                                    5  7893                     215
 2550         *
 2551         ****************************************************************
 2552         ****************************************************************
 2553         ** CAST POINTER TO NUMBER SNIPPET                             **
 2554         ****************************************************************
 2555         *
 2556         PTRNMN SBR   X1                                                       4  7894  H 089              215   089
 2557         * CASTS A 3-DIGIT ADDRESS TO A 5-DIGIT NUMBER
 2558         * MAKE ROOM ON THE STACK FOR AN INT
 2559                MA    @002@,X2                                                 7  7898  # 29P 094          215  8297     094
 2560         * MAKE A COPY OF THE TOP OF THE STACK
 2561                LCA   15998&X2,3&X2                                            7  7905  L IRH 0!3          216 15998+2   003+2
 2562         * NOW ZERO OUT THE TOP OF THE STACK
 2563                LCA   @00000@,0&X2                                             7  7912  L 30K 0!0          216  8302     000+2
 2564         * NOW COPY BACK, SHIFTED OVER 2 DIGITS
 2565                MCW   3&X2,0&X2                                                7  7919  M 0!3 0!0          216   003+2   000+2
 2566         * NOW ZERO OUT THE ZONE BITS ON THE STACK
 2567                MZ    @0@,0&X2                                                 7  7926  Y 24O 0!0          216  8246     000+2
 2568                MZ    @0@,15999&X2                                             7  7933  Y 24O IRI          216  8246   15999+2
 2569                MZ    @0@,15998&X2                                             7  7940  Y 24O IRH          217  8246   15998+2
 2570         * CHECK THE HIGH-ORDER DIGIT'S ZONE BITS
 2571                BWZ   PNHOZ,1&X2,S                                             8  7947  V I7V 0!1 S        217  7975     001+2
 2572                BWZ   PNHZO,1&X2,K                                             8  7955  V I8W 0!1 K        217  7986     001+2
 2573                BWZ   PNHOO,1&X2,B                                             8  7963  V I9X 0!1 B        217  7997     001+2
 2574                B     PNLOW                                                    4  7971  B 00M              217  8004
 2575         PNHOZ  A     @01000@,0&X2                                             7  7975  A 30P 0!0          218  8307     000+2
 2576                B     PNLOW                                                    4  7982  B 00M              218  8004
 2577         PNHZO  A     @02000@,0&X2                                             7  7986  A 31K 0!0          218  8312     000+2
 2578                B     PNLOW                                                    4  7993  B 00M              218  8004
 2579         PNHOO  A     @03000@,0&X2                                             7  7997  A 31P 0!0          218  8317     000+2
 2580         PNLOW  BWZ   PNLOZ,3&X2,S                                             8  8004  V 03K 0!3 S        218  8032     003+2
 2581                BWZ   PNLZO,3&X2,K                                             8  8012  V 04L 0!3 K        219  8043     003+2
 2582                BWZ   PNLOO,3&X2,B                                             8  8020  V 05M 0!3 B        219  8054     003+2
 2583                B     PTRNME                                                   4  8028  B 06J              219  8061
 2584         PNLOZ  A     @04000@,0&X2                                             7  8032  A 32K 0!0          219  8322     000+2
 2585                B     PTRNME                                                   4  8039  B 06J              219  8061
 2586         PNLZO  A     @08000@,0&X2                                             7  8043  A 32P 0!0          219  8327     000+2
 2587                B     PTRNME                                                   4  8050  B 06J              220  8061
 2588         PNLOO  A     @12000@,0&X2                                             7  8054  A 33K 0!0          220  8332     000+2
 2589         PTRNME B     0&X1                                                     4  8061  B 0'0              220   000+1
 2590         *
 2591         ****************************************************************
 2592         ****************************************************************
 2593         ** CLEAN NUMBER SNIPPET                                       **
 2594         ****************************************************************
 2595         *
 2596         * NORMALIZES THE ZONE BITS OF A NUMBER, LEAVING EITHER A=0B=0
 2597         * FOR A POSITIVE OR A=0B=1 FOR A NEGATIVE
1                                                                                                         PAGE   51
0 SEQ PG LIN  LABEL  OP    OPERANDS                                            SFX CT  LOCN  INSTRUCTION TYPE  CARD A-ADDR  B-ADDR

 2598         CLNNMN SBR   X1                                                       4  8065  H 089              220   089
 2599         * DO NOTHING ON EITHER NO ZONE BITS OR ONLY A B ZONE BIT
 2600                BWZ   CLNNME,0&X2,2                                            8  8069  V 09K 0!0 2        220  8092     000+2
 2601                BWZ   CLNNME,0&X2,K                                            8  8077  V 09K 0!0 K        220  8092     000+2
 2602         * ELSE CLEAR THE ZONE BITS, AS IT IS POSITIVE
 2603                MZ    @ @,0&X2                                                 7  8085  Y 33L 0!0          221  8333     000+2
 2604         CLNNME B     0&X1                                                     4  8092  B 0'0              221   000+1
 2605         *
 2606         ****************************************************************
 2607         *
 2608         LAGAAA DCW   @001@              * POINTER 0                           3  8098                     221
 2609         LAHAAA DCW   @744@              * POINTER 0                           3  8101                     221
 2610         LAIAAA DCW   @I8I@              * POINTER 0                           3  8104                     221
 2611         LBGAAA DCW   @I9B@              * POINTER 0                           3  8107                     221
 2612         LBHAAA DCW   @011@              * POINTER 0                           3  8110                     221
 2613         LCGAAA DCW   @I9I@              * POINTER 0                           3  8113                     222
 2614         LDIAAA DCW   @724@              * POINTER 0                           3  8116                     222
 2615         LEHAAA DCW   @007@              * POINTER 0                           3  8119                     222
 2616         LFGAAA DCW   @0@                * VALUE 0                             1  8120                     222
 2617         LGIAAA DCW   @ @                * VALUE                               1  8121                     222
 2618         LHHAAA DCW   @%@                * VALUE %                             1  8122                     222
 2619         LHIAAA DCW   @727@              * POINTER 0                           3  8125                     222
 2620         LIGAAA DCW   @I8F@              * POINTER 0                           3  8128                     223
 2621         LIIAAA DCW   @201@              * POINTER 0                           3  8131                     223
 2622         LJGAAA DCW   @008@              * POINTER 0                           3  8134                     223
 2623         LKFAAA DCW   @003@              * POINTER 0                           3  8137                     223
 2624         LLFAAA DCW   @100000@           * VALUE 100000                        6  8143                     223
 2625         LLIAAA DCW   @333@              * POINTER 0                           3  8146                     223
 2626         LMFAAA DCW   @005@              * POINTER 0                           3  8149                     223
 2627         LMGAAA DCW   @00002@            * VALUE 00002                         5  8154                     224
 2628         LMHAAA DCW   @C@                * VALUE C                             1  8155                     224
 2629         LNFAAA DCW   @00042@            * VALUE 00042                         5  8160                     224
 2630         LOFAAA DCW   @I9E@              * POINTER 0                           3  8163                     224
 2631         LPFAAA DCW   @00019@            * VALUE 00019                         5  8168                     224
 2632         LPGAAA DCW   @00003@            * VALUE 00003                         5  8173                     224
 2633         LPHAAA DCW   @S@                * VALUE S                             1  8174                     224
 2634         LQFAAA DCW   @704@              * POINTER 0                           3  8177                     225
 2635         LQIAAA DCW   @I9D@              * POINTER 0                           3  8180                     225
 2636         LRFAAA DCW   @I9G@              * POINTER 0                           3  8183                     225
 2637         LRIAAA DCW   @0000J@            * VALUE 0000J                         5  8188                     225
 2638         LSFAAA DCW   @705@              * POINTER 0                           3  8191                     225
 2639         LSHAAA DCW   @D@                * VALUE D                             1  8192                     225
 2640         LTFAAA DCW   @00001@            * VALUE 00001                         5  8197                     225
 2641         LTGAAA DCW   @00004@            * VALUE 00004                         5  8202                     226
 2642         LTHAAA DCW   @00010@            * VALUE 00010                         5  8207                     226
 2643         LUFAAA DCW   @014@              * POINTER 0                           3  8210                     226
 2644         LUGAAA DCW   @736@              * POINTER 0                           3  8213                     226
 2645         LUHAAA DCW   @012@              * POINTER 0                           3  8216                     226
 2646         LVFAAA DCW   @006@              * POINTER 0                           3  8219                     226
 2647         LVGAAA DCW   @00020@            * VALUE 00020                         5  8224                     226
1                                                                                                         PAGE   52
0 SEQ PG LIN  LABEL  OP    OPERANDS                                            SFX CT  LOCN  INSTRUCTION TYPE  CARD A-ADDR  B-ADDR

 2648         LVHAAA DCW   @I9C@              * POINTER 0                           3  8227                     227
 2649         LWFAAA DCW   @00000@            * VALUE 00000                         5  8232                     227
 2650         LYGAAA DCW   @740@              * POINTER 0                           3  8235                     227
 2651         LYHAAA DCW   @P@                * VALUE P                             1  8236                     227
 2652         LZFAAA DCW   @-@                * VALUE -                             1  8237                     227
 2653         LZGAAA DCW   @20000@            * VALUE 20000                         5  8242                     227
 2654         LZHAAA DCW   @010@              * POINTER 0                           3  8245                     227
 2655         *
                     DCW   @0@                                                      1  8246              LIT    228
                     DCW   @04000@                                                  5  8251              LIT    228
                     DCW   @08000@                                                  5  8256              LIT    228
                     DCW   @12000@                                                  5  8261              LIT    228
                     DCW   @12000@                                                  5  8266              LIT    228
                     DCW   @A@                                                      1  8267              LIT    228
                     DCW   @08000@                                                  5  8272              LIT    228
                     DCW   @I@                                                      1  8273              LIT    229
                     DCW   @04000@                                                  5  8278              LIT    229
                     DCW   @S@                                                      1  8279              LIT    229
                     DCW   @01000@                                                  5  8284              LIT    229
                     DCW   @02000@                                                  5  8289              LIT    229
                     DCW   @03000@                                                  5  8294              LIT    229
                     DCW   @002@                                                    3  8297              LIT    229
                     DCW   @00000@                                                  5  8302              LIT    230
                     DCW   @01000@                                                  5  8307              LIT    230
                     DCW   @02000@                                                  5  8312              LIT    230
                     DCW   @03000@                                                  5  8317              LIT    230
                     DCW   @04000@                                                  5  8322              LIT    230
                     DCW   @08000@                                                  5  8327              LIT    230
                     DCW   @12000@                                                  5  8332              LIT    230
                     DCW   @ @                                                      1  8333              LIT    231
 2656                END   START              * END OF PROGRAM CODE.                         / 748 080                748
1                                                                                                         PAGE   53
0SYMBOL   ADDRESS    SYMBOL   ADDRESS    SYMBOL   ADDRESS    SYMBOL   ADDRESS    SYMBOL   ADDRESS    SYMBOL   ADDRESS

 CDIV1    7878: 0    CDIV2    7883: 0    CDIV3    7888: 0    CDIV4    7893: 0    CLNNME   8092: 0    CLNNMN   8065: 0   
 DIVEND   7870: 0    EOL      0346: 0    EOS      0345: 0    LABAAA   2376: 0    LADAAA   6206: 0    LAEAAA   3441: 0   
 LAGAAA   8098: 0    LAHAAA   8101: 0    LAIAAA   8104: 0    LBAAAA   1793: 0    LBBAAA   2643: 0    LBDAAA   6010: 0   
 LBEAAA   5769: 0    LBGAAA   8107: 0    LBHAAA   8110: 0    LBIAAA   5883: 0    LCAAAA   1992: 0    LCBAAA   2644: 0   
 LCDAAA   6211: 0    LCEAAA   5763: 0    LCGAAA   8113: 0    LCHAAA   3747: 0    LCIAAA   5890: 0    LDBAAA   2381: 0   
 LDDAAA   6009: 0    LDEAAA   3953: 0    LDFAAA   0768: 0    LDGAAA   2462: 0    LDHAAA   3754: 0    LDIAAA   8116: 0   
 LEBAAA   2645: 0    LEDAAA   6326: 0    LEEAAA   5761: 0    LEFAAA   1774: 0    LEGAAA   2469: 0    LEHAAA   8119: 0   
 LEIAAA   6085: 0    LFAAAA   7183: 0    LFBAAA   2877: 0    LFDAAA   6542: 0    LFEAAA   4268: 0    LFFAAA   1384: 0   
 LFGAAA   8120: 0    LFHAAA   3849: 0    LFIAAA   6092: 0    LGAAAA   7490: 0    LGBAAA   2646: 0    LGDAAA   6543: 0   
 LGEAAA   4569: 0    LGFAAA   1385: 0    LGGAAA   2745: 0    LGHAAA   3856: 0    LGIAAA   8121: 0    LHAAAA   7213: 0   
 LHBAAA   2882: 0    LHDAAA   6563: 0    LHEAAA   4870: 0    LHFAAA   1673: 0    LHGAAA   2752: 0    LHHAAA   8122: 0   
 LHIAAA   8125: 0    LIAAAA   7461: 0    LIBAAA   3332: 0    LIDAAA   6867: 0    LIEAAA   5308: 0    LIFAAA   1481: 0   
 LIGAAA   8128: 0    LIHAAA   4164: 0    LIIAAA   8131: 0    LJAAAA   6886: 0    LJBAAA   2883: 0    LJDAAA   6861: 0   
 LJEAAA   5745: 0    LJFAAA   1678: 0    LJGAAA   8134: 0    LJHAAA   4171: 0    LJIAAA   6399: 0    LKAAAA   7164: 0   
 LKBAAA   3337: 0    LKDAAA   6586: 0    LKEAAA   5755: 0    LKFAAA   8137: 0    LKGAAA   0898: 0    LKHAAA   4346: 0   
 LKIAAA   6406: 0    LLAAAA   6909: 0    LLDAAA   6866: 0    LLEAAA   5750: 0    LLFAAA   8143: 0    LLGAAA   1000: 0   
 LLHAAA   4353: 0    LLIAAA   8146: 0    LMAAAA   7163: 0    LMEAAA   5756: 0    LMFAAA   8149: 0    LMGAAA   8154: 0   
 LMHAAA   8155: 0    LMIAAA   6687: 0    LNEAAA   5320: 0    LNFAAA   8160: 0    LNGAAA   0943: 0    LNHAAA   4647: 0   
 LNIAAA   6694: 0    LOEAAA   5757: 0    LOFAAA   8163: 0    LOGAAA   1096: 0    LOHAAA   4654: 0    LOIAAA   7129: 0   
 LPEAAA   4875: 0    LPFAAA   8168: 0    LPGAAA   8173: 0    LPHAAA   8174: 0    LPIAAA   7136: 0    LQEAAA   5758: 0   
 LQFAAA   8177: 0    LQGAAA   0988: 0    LQHAAA   4948: 0    LQIAAA   8180: 0    LREAAA   4574: 0    LRFAAA   8183: 0   
 LRGAAA   1192: 0    LRHAAA   4955: 0    LRIAAA   8188: 0    LSEAAA   5759: 0    LSFAAA   8191: 0    LSGAAA   1288: 0   
 LSHAAA   8192: 0    LSIAAA   7427: 0    LTEAAA   4273: 0    LTFAAA   8197: 0    LTGAAA   8202: 0    LTHAAA   8207: 0   
 LTIAAA   7434: 0    LUEAAA   5760: 0    LUFAAA   8210: 0    LUGAAA   8213: 0    LUHAAA   8216: 0    LVEAAA   3958: 0   
 LVFAAA   8219: 0    LVGAAA   8224: 0    LVHAAA   8227: 0    LWCAAA   5788: 0    LWEAAA   5762: 0    LWFAAA   8232: 0   
 LWGAAA   1548: 0    LWHAAA   5393: 0    LXCAAA   6544: 0    LXEAAA   3562: 0    LXFAAA   2177: 0    LXGAAA   1555: 0   
 LXHAAA   5400: 0    LYAAAA   2011: 0    LYCAAA   6004: 0    LYEAAA   5768: 0    LYFAAA   2184: 0    LYGAAA   8235: 0   
 LYHAAA   8236: 0    LZAAAA   3422: 0    LZCAAA   6325: 0    LZFAAA   8237: 0    LZGAAA   8242: 0    LZHAAA   8245: 0   
 NMNPTR   7509: 0    NMPTRE   7700: 0    NPHIGH   7635: 0    NPHOZ    7693: 0    NPHZO    7682: 0    NPLOZ    7621: 0   
 NPLZO    7603: 0    PNHOO    7997: 0    PNHOZ    7975: 0    PNHZO    7986: 0    PNLOO    8054: 0    PNLOW    8004: 0   
 PNLOZ    8032: 0    PNLZO    8043: 0    PRCPOS   0335: 0    PRINT    0201: 0    PRTSIZ   0344: 0    PTRNME   8061: 0   
 PTRNMN   7894: 0    PUCPOS   0338: 0    PUNCH    0101: 0    PUNSIZ   0341: 0    READ     0001: 0    SNPDIV   7718: 0   
 START    0748: 0    X1       0089: 0    X2       0094: 0    X3       0099: 0   

0UNREFERENCED SYMBOLS

 LABAAA LADAAA LBAAAA LBBAAA LBEAAA LCAAAA LCEAAA LDEAAA LEFAAA LFAAAA LFBAAA LFDAAA LFEAAA LFFAAA LGAAAA LGEAAA LHEAAA
 LHFAAA LIBAAA LIDAAA LIEAAA LJAAAA LJDAAA LJEAAA LKAAAA LKEAAA LXCAAA LYCAAA LZCAAA PRCPOS PRINT  PRTSIZ PUCPOS PUNCH
 PUNSIZ READ
