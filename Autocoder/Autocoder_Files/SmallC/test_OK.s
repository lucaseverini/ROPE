     ****************************************************************
     ***  test_OK.s
     ***  Generated by Small-C Compiler on 28-Mar-2015 7:17:33 PM
     ****************************************************************
     ****************************************************************

     READ      EQU  001                * Read area
     PUNCH     EQU  101                * Punch area
     PRINT     EQU  201                * Print area
     
     PRCPOS    DCW  000                * char position in print area
     PUCPOS    DCW  000                * char position in punch area
     PUNSIZ    DCW  @080@              * Size of punch area
     PRTSIZ    DCW  @132@              * Size of print area
     EOS       DCW  @'@                * End Of String char
     EOL       DCW  @;@                * End Of Line char

               ORG  87
     X1        DSA  0                  * INDEX REGISTER 1
               ORG  92
     X2        DSA  0                  * INDEX REGISTER 2
               ORG  97
     X3        DSA  0                  * INDEX REGISTER 3
     
     * I need a single digit flag - should I replace this with a DA?
     RF        EQU  340
     
     ****************************************************************
     
     * GLOBAL/STATIC DATA AND VARIABLES

               ORG  4000               * seed
               DCW  @69105@

               ORG  4005               * CONST_STR_LITERAL-1
               DCW  @0@
               DCW  @1@
               DCW  @2@
               DCW  @3@
               DCW  @4@
               DCW  @5@
               DCW  @6@
               DCW  @7@
               DCW  @8@
               DCW  @9@
               DCW  @A@
               DCW  @B@
               DCW  @C@
               DCW  @D@
               DCW  @E@
               DCW  @F@
               DCW  @'@

               ORG  4022               * __putchar_pos
               DCW  @201@

               ORG  4025               * __putchar_last
               DCW  @200@

               ORG  4028               * __getCharPosition
               DCW  @081@

               ORG  4031               * CONST_STR_LITERAL-8
               DCW  @A@
               DCW  @2@
               DCW  @:@
               DCW  @%@
               DCW  @D@
               DCW  @;@
               DCW  @'@

               ORG  4038               * CONST_STR_LITERAL-9
               DCW  @B@
               DCW  @2@
               DCW  @:@
               DCW  @%@
               DCW  @D@
               DCW  @;@
               DCW  @'@

               ORG  4045               * CONST_STR_LITERAL-10
               DCW  @D@
               DCW  @:@
               DCW  @%@
               DCW  @D@
               DCW  @;@
               DCW  @'@

               ORG  4051               * CONST_STR_LITERAL-11
               DCW  @F@
               DCW  @:@
               DCW  @%@
               DCW  @D@
               DCW  @;@
               DCW  @'@

               ORG  4057               * x
               DCW  @00111@

               ORG  4062               * c
               DCW  @06V@

               ORG  4065               * CONST_STR_LITERAL-12
               DCW  @A@
               DCW  @A@
               DCW  @A@
               DCW  @A@
               DCW  @A@
               DCW  @A@
               DCW  @A@
               DCW  @A@
               DCW  @'@

               ORG  4074               * c2
               DCW  @07X@

               ORG  4077               * CONST_STR_LITERAL-13
               DCW  @A@
               DCW  @A@
               DCW  @A@
               DCW  @A@
               DCW  @A@
               DCW  @A@
               DCW  @A@
               DCW  @A@
               DCW  @'@

               ORG  4086               * CONST_STR_LITERAL-14
               DCW  @A@
               DCW  @A@
               DCW  @A@
               DCW  @A@
               DCW  @A@
               DCW  @A@
               DCW  @A@
               DCW  @A@
               DCW  @'@

               ORG  4095               * CONST_STR_LITERAL-15
               DCW  @C@
               DCW  @3@
               DCW  @:@
               DCW  @%@
               DCW  @S@
               DCW  @;@
               DCW  @'@

               ORG  4102               * CONST_STR_LITERAL-16
               DCW  @C@
               DCW  @3@
               DCW  @:@
               DCW  @%@
               DCW  @D@
               DCW  @;@
               DCW  @'@

               ORG  4109               * CONST_STR_LITERAL-17
               DCW  @C@
               DCW  @:@
               DCW  @%@
               DCW  @S@
               DCW  @;@
               DCW  @'@

               ORG  4115               * CONST_STR_LITERAL-18
               DCW  @C@
               DCW  @:@
               DCW  @%@
               DCW  @D@
               DCW  @;@
               DCW  @'@

               ORG  4121               * CONST_STR_LITERAL-19
               DCW  @C@
               DCW  @2@
               DCW  @:@
               DCW  @%@
               DCW  @S@
               DCW  @;@
               DCW  @'@

               ORG  4128               * CONST_STR_LITERAL-20
               DCW  @C@
               DCW  @2@
               DCW  @:@
               DCW  @%@
               DCW  @D@
               DCW  @;@
               DCW  @'@

               ORG  4135               * CONST_STR_LITERAL-21
               DCW  @C@
               DCW  @:@
               DCW  @%@
               DCW  @S@
               DCW  @;@
               DCW  @'@

               ORG  4141               * CONST_STR_LITERAL-22
               DCW  @C@
               DCW  @:@
               DCW  @%@
               DCW  @D@
               DCW  @;@
               DCW  @'@

               ORG  4147               * CONST_STR_LITERAL-23
               DCW  @C@
               DCW  @2@
               DCW  @:@
               DCW  @%@
               DCW  @S@
               DCW  @;@
               DCW  @'@

               ORG  4154               * CONST_STR_LITERAL-24
               DCW  @C@
               DCW  @2@
               DCW  @:@
               DCW  @%@
               DCW  @D@
               DCW  @;@
               DCW  @'@

               ORG  4161               * CONST_STR_LITERAL-25
               DCW  @C@
               DCW  @3@
               DCW  @:@
               DCW  @%@
               DCW  @S@
               DCW  @;@
               DCW  @'@

               ORG  4168               * CONST_STR_LITERAL-26
               DCW  @C@
               DCW  @3@
               DCW  @:@
               DCW  @%@
               DCW  @D@
               DCW  @;@
               DCW  @'@

               ORG  4175               * CONST_STR_LITERAL-27
               DCW  @X@
               DCW  @:@
               DCW  @%@
               DCW  @D@
               DCW  @;@
               DCW  @'@

               ORG  4181               * CONST_STR_LITERAL-28
               DCW  @E@
               DCW  @:@
               DCW  @%@
               DCW  @D@
               DCW  @;@
               DCW  @'@

               ORG  4187               * CONST_STR_LITERAL-29
               DCW  @E@
               DCW  @:@
               DCW  @%@
               DCW  @D@
               DCW  @;@
               DCW  @'@

               ORG  4193               * CONST_STR_LITERAL-30
               DCW  @X@
               DCW  @:@
               DCW  @%@
               DCW  @D@
               DCW  @;@
               DCW  @'@

               ORG  4199               * CONST_STR_LITERAL-31
               DCW  @A@
               DCW  @:@
               DCW  @%@
               DCW  @D@
               DCW  @ @
               DCW  @B@
               DCW  @:@
               DCW  @%@
               DCW  @D@
               DCW  @;@
               DCW  @'@

               ORG  4210               * CONST_STR_LITERAL-32
               DCW  @A@
               DCW  @:@
               DCW  @%@
               DCW  @D@
               DCW  @ @
               DCW  @B@
               DCW  @:@
               DCW  @%@
               DCW  @D@
               DCW  @;@
               DCW  @'@

               ORG  4221               * CONST_STR_LITERAL-33
               DCW  @A@
               DCW  @:@
               DCW  @%@
               DCW  @D@
               DCW  @ @
               DCW  @B@
               DCW  @:@
               DCW  @%@
               DCW  @D@
               DCW  @;@
               DCW  @'@

               ORG  4232               * CONST_STR_LITERAL-34
               DCW  @;@
               DCW  @D@
               DCW  @O@
               DCW  @N@
               DCW  @E@
               DCW  @.@
               DCW  @;@
               DCW  @'@

     * START POSITION OF PROGRAM CODE
               ORG  4500
     START     NOP                     * Program starts here

     * SETTING OF STACK POINTER (STACK GROWS UPWARD)
               SBR  X2,399             * X2 is the stack pointer
               MCW  X2,X3              * Copy X2 to X3

               B    LUDAAA             * Jump to function main
               H                       * Program executed. System halted.

     ********************************************************************************
     * Function : puts
     ********************************************************************************
     LWBAAA    SBR  3+X3               * Save return address in register B to local frame (X3)
               SW   1+X3               * Set the WM
               CW   2+X3               * Clean WM
               CW   3+X3               * Clean WM

     ***************************************
     * BeginBlock [Block LXBAAA:null]
               MA   LWDAAA,X2          * Reserve 3 bytes of space on Stack
     * While [while (((*s) != '\0')) [Block LYBAAA:LXBAAA] top:LZBAAA bottom:LACAAA]
     LZBAAA    NOP                     * Top of the loop
     * NotEqual (!=) ((*s) != '\0')
     * DereferenceExpression (*s)
     * Parameter Variable (s : 15997+X3)
     * Push (15997+X3:3)
               MA   LWDAAA,X2          * Add 3 to X2
               LCA  15997+X3,0+X2      * Load data 15997+X3 into Stack
     * Pop (X1:3)
               LCA  0+X2,X1            * Load data in Stack into memory at X1
               MA   LZDAAA,X2          * Add -3 to X2
     * Push (0+X1:1)
               MA   LAEAAA,X2          * Add 1 to X2
               LCA  0+X1,0+X2          * Load data 0+X1 into Stack
     * End DereferenceExpression (*s)
     * Constant ('\0' : EOS)
     * Push (EOS:1)
               MA   LAEAAA,X2          * Add 1 to X2
               LCA  EOS,0+X2           * Load data EOS into Stack
               C    0+X2,15999+X2      * Compare
     * Pop (1)
               MA   LBEAAA,X2          * Add -1 to X2
     * Pop (1)
               MA   LBEAAA,X2          * Add -1 to X2
     * Push (LCEAAA:5)
               MA   LDEAAA,X2          * Add 5 to X2
               LCA  LCEAAA,0+X2        * Load data 00001 into Stack
               BE   LXDAAA             * Jump if equal
               B    LYDAAA             * Jump to End
     LXDAAA    MCW  LEEAAA,0+X2        * Equal: Set stack location to 0
     LYDAAA    NOP                     * End of NotEqual
               MCS  0+X2,0+X2          * Clear WM
     * Pop (5)
               MA   LFEAAA,X2          * Add -5 to X2
               BCE  LACAAA,5+X2,       * Jump to bottom

     ***************************************
     * BeginBlock [Block LYBAAA:LXBAAA]
     * Function Call putchar((*(s++)))
     * Push (5)
               MA   LDEAAA,X2          * Add 5 to X2
     * DereferenceExpression (*(s++))
     * PostIncrement (s++)
     * Push (LZDAAA:3)
               MA   LWDAAA,X2          * Add 3 to X2
               LCA  LZDAAA,0+X2        * Load data I9G into Stack
               MA   X3,0+X2
     * Pop (X1:3)
               LCA  0+X2,X1            * Load data in Stack into memory at X1
               MA   LZDAAA,X2          * Add -3 to X2
     * Push (0+X1:3)
               MA   LWDAAA,X2          * Add 3 to X2
               LCA  0+X1,0+X2          * Load data 0+X1 into Stack
               MA   LAEAAA,0+X1        * PostIncrement pointer pointed by X1
     * Pop (X1:3)
               LCA  0+X2,X1            * Load data in Stack into memory at X1
               MA   LZDAAA,X2          * Add -3 to X2
     * Push (0+X1:1)
               MA   LAEAAA,X2          * Add 1 to X2
               LCA  0+X1,0+X2          * Load data 0+X1 into Stack
     * End DereferenceExpression (*(s++))
     * Push (X3:3)
               MA   LWDAAA,X2          * Add 3 to X2
               LCA  X3,0+X2            * Load data X3 into Stack
               MCW  X2,X3              * Copy X2 into X3
               B    LLBAAA             * Jump to function putchar
     * Pop (X3:3)
               LCA  0+X2,X3            * Load data in Stack into memory at X3
               MA   LZDAAA,X2          * Add -3 to X2
     * Pop (1)
               MA   LBEAAA,X2          * Add -1 to X2
     * Pop (5)
               MA   LFEAAA,X2          * Add -5 to X2
     LYBAAA    NOP                     * Return
               BCE  LXBAAA,RF,R        * Jump back to caller
     * EndBlock [Block LYBAAA:LXBAAA]
     ***************************************

               B    LZBAAA             * Jump to top
     LACAAA    NOP                     * Bottom of the while loop

     LXBAAA    NOP                     * Return
               MA   LZDAAA,X2          * Reserve 3 bytes of space on Stack
               MCW  @ @,RF             * Clear the Return Flag
     * EndBlock [Block LXBAAA:null]
     ***************************************

               LCA  3+X3,X1            * Load return address to X1
               B    0+X1               * Jump back to caller

     ********************************************************************************
     * End Function : puts
     ********************************************************************************

     ********************************************************************************
     * Function : printf
     ********************************************************************************
     LPCAAA    SBR  3+X3               * Save return address in register B to local frame (X3)
               SW   1+X3               * Set the WM
               CW   2+X3               * Clean WM
               CW   3+X3               * Clean WM

     ***************************************
     * BeginBlock [Block LQCAAA:null]
               MA   LGEAAA,X2          * Reserve 11 bytes of space on Stack
     * Assignment (arg = ((*char) (( &cformat_str ) + 15997)))
     * Addition (( &cformat_str ) + 15997)
     * AddressOf ( &cformat_str )
     * Push (LZDAAA:3)
               MA   LWDAAA,X2          * Add 3 to X2
               LCA  LZDAAA,0+X2        * Load data I9G into Stack
               MA   X3,0+X2
     * Constant (15997 : LZDAAA)
     * Push (LZDAAA:3)
               MA   LWDAAA,X2          * Add 3 to X2
               LCA  LZDAAA,0+X2        * Load data I9G into Stack
               MA   0+X2,15997+X2      * Add
     * Pop (3)
               MA   LZDAAA,X2          * Add -3 to X2
     * Push (LHEAAA:3)
               MA   LWDAAA,X2          * Add 3 to X2
               LCA  LHEAAA,0+X2        * Load data 006 into Stack
               MA   X3,0+X2
     * Pop (X1:3)
               LCA  0+X2,X1            * Load data in Stack into memory at X1
               MA   LZDAAA,X2          * Add -3 to X2
     * Pop (0+X1:3)
               LCA  0+X2,0+X1          * Load data in Stack into memory at 0+X1
               MA   LZDAAA,X2          * Add -3 to X2
     * End Assignment (arg = ((*char) (( &cformat_str ) + 15997)))
     * While [while (((c = (*(cformat_str++))) != '\0')) [Block LRCAAA:LQCAAA] top:LMDAAA bottom:LNDAAA]
     LMDAAA    NOP                     * Top of the loop
     * NotEqual (!=) ((c = (*(cformat_str++))) != '\0')
     * Assignment (c = (*(cformat_str++)))
     * DereferenceExpression (*(cformat_str++))
     * PostIncrement (cformat_str++)
     * Push (LZDAAA:3)
               MA   LWDAAA,X2          * Add 3 to X2
               LCA  LZDAAA,0+X2        * Load data I9G into Stack
               MA   X3,0+X2
     * Pop (X1:3)
               LCA  0+X2,X1            * Load data in Stack into memory at X1
               MA   LZDAAA,X2          * Add -3 to X2
     * Push (0+X1:3)
               MA   LWDAAA,X2          * Add 3 to X2
               LCA  0+X1,0+X2          * Load data 0+X1 into Stack
               MA   LAEAAA,0+X1        * PostIncrement pointer pointed by X1
     * Pop (X1:3)
               LCA  0+X2,X1            * Load data in Stack into memory at X1
               MA   LZDAAA,X2          * Add -3 to X2
     * Push (0+X1:1)
               MA   LAEAAA,X2          * Add 1 to X2
               LCA  0+X1,0+X2          * Load data 0+X1 into Stack
     * End DereferenceExpression (*(cformat_str++))
     * Push (LKEAAA:3)
               MA   LWDAAA,X2          * Add 3 to X2
               LCA  LKEAAA,0+X2        * Load data 007 into Stack
               MA   X3,0+X2
     * Pop (X1:3)
               LCA  0+X2,X1            * Load data in Stack into memory at X1
               MA   LZDAAA,X2          * Add -3 to X2
               LCA  0+X2,0+X1          * Load data in Stack into X1
     * End Assignment (c = (*(cformat_str++)))
     * Constant ('\0' : EOS)
     * Push (EOS:1)
               MA   LAEAAA,X2          * Add 1 to X2
               LCA  EOS,0+X2           * Load data EOS into Stack
               C    0+X2,15999+X2      * Compare
     * Pop (1)
               MA   LBEAAA,X2          * Add -1 to X2
     * Pop (1)
               MA   LBEAAA,X2          * Add -1 to X2
     * Push (LCEAAA:5)
               MA   LDEAAA,X2          * Add 5 to X2
               LCA  LCEAAA,0+X2        * Load data 00001 into Stack
               BE   LIEAAA             * Jump if equal
               B    LJEAAA             * Jump to End
     LIEAAA    MCW  LEEAAA,0+X2        * Equal: Set stack location to 0
     LJEAAA    NOP                     * End of NotEqual
               MCS  0+X2,0+X2          * Clear WM
     * Pop (5)
               MA   LFEAAA,X2          * Add -5 to X2
               BCE  LNDAAA,5+X2,       * Jump to bottom

     ***************************************
     * BeginBlock [Block LRCAAA:LQCAAA]
     * If [if ((c != '%') then [Block LSCAAA:LRCAAA] else [Block LTCAAA:LRCAAA]]
     * NotEqual (!=) (c != '%')
     * Local Variable (c : 7+X3)
     * Push (7+X3:1)
               MA   LAEAAA,X2          * Add 1 to X2
               LCA  7+X3,0+X2          * Load data 7+X3 into Stack
     * Constant ('%' : @%@)
     * Push (@%@:1)
               MA   LAEAAA,X2          * Add 1 to X2
               LCA  @%@,0+X2           * Load data % into Stack
               C    0+X2,15999+X2      * Compare
     * Pop (1)
               MA   LBEAAA,X2          * Add -1 to X2
     * Pop (1)
               MA   LBEAAA,X2          * Add -1 to X2
     * Push (LCEAAA:5)
               MA   LDEAAA,X2          * Add 5 to X2
               LCA  LCEAAA,0+X2        * Load data 00001 into Stack
               BE   LLEAAA             * Jump if equal
               B    LMEAAA             * Jump to End
     LLEAAA    MCW  LEEAAA,0+X2        * Equal: Set stack location to 0
     LMEAAA    NOP                     * End of NotEqual
               MCS  0+X2,0+X2          * Clear WM
     * Pop (5)
               MA   LFEAAA,X2          * Add -5 to X2
               BCE  LKDAAA,5+X2,       * Jump when False

     ***************************************
     * BeginBlock [Block LSCAAA:LRCAAA]
     * Function Call putchar(c)
     * Push (5)
               MA   LDEAAA,X2          * Add 5 to X2
     * Local Variable (c : 7+X3)
     * Push (7+X3:1)
               MA   LAEAAA,X2          * Add 1 to X2
               LCA  7+X3,0+X2          * Load data 7+X3 into Stack
     * Push (X3:3)
               MA   LWDAAA,X2          * Add 3 to X2
               LCA  X3,0+X2            * Load data X3 into Stack
               MCW  X2,X3              * Copy X2 into X3
               B    LLBAAA             * Jump to function putchar
     * Pop (X3:3)
               LCA  0+X2,X3            * Load data in Stack into memory at X3
               MA   LZDAAA,X2          * Add -3 to X2
     * Pop (1)
               MA   LBEAAA,X2          * Add -1 to X2
     * Pop (5)
               MA   LFEAAA,X2          * Add -5 to X2
     LSCAAA    NOP                     * Return
               BCE  LRCAAA,RF,R        * Jump back to caller
     * EndBlock [Block LSCAAA:LRCAAA]
     ***************************************

               B    LLDAAA             * Jump when true
     LKDAAA    NOP                     * Executed when False

     ***************************************
     * BeginBlock [Block LTCAAA:LRCAAA]
     * Assignment (c = (*(cformat_str++)))
     * DereferenceExpression (*(cformat_str++))
     * PostIncrement (cformat_str++)
     * Push (LZDAAA:3)
               MA   LWDAAA,X2          * Add 3 to X2
               LCA  LZDAAA,0+X2        * Load data I9G into Stack
               MA   X3,0+X2
     * Pop (X1:3)
               LCA  0+X2,X1            * Load data in Stack into memory at X1
               MA   LZDAAA,X2          * Add -3 to X2
     * Push (0+X1:3)
               MA   LWDAAA,X2          * Add 3 to X2
               LCA  0+X1,0+X2          * Load data 0+X1 into Stack
               MA   LAEAAA,0+X1        * PostIncrement pointer pointed by X1
     * Pop (X1:3)
               LCA  0+X2,X1            * Load data in Stack into memory at X1
               MA   LZDAAA,X2          * Add -3 to X2
     * Push (0+X1:1)
               MA   LAEAAA,X2          * Add 1 to X2
               LCA  0+X1,0+X2          * Load data 0+X1 into Stack
     * End DereferenceExpression (*(cformat_str++))
     * Push (LKEAAA:3)
               MA   LWDAAA,X2          * Add 3 to X2
               LCA  LKEAAA,0+X2        * Load data 007 into Stack
               MA   X3,0+X2
     * Pop (X1:3)
               LCA  0+X2,X1            * Load data in Stack into memory at X1
               MA   LZDAAA,X2          * Add -3 to X2
     * Pop (0+X1:1)
               LCA  0+X2,0+X1          * Load data in Stack into memory at 0+X1
               MA   LBEAAA,X2          * Add -1 to X2
     * End Assignment (c = (*(cformat_str++)))
     * If [if ((c == '%') then [Block LUCAAA:LTCAAA] else [if ((c == 'C') then [Block LVCAAA:LTCAAA] else [if ((c == 'S') then [Block LWCAAA:LTCAAA] else [if ((c == 'D') then [Block LXCAAA:LTCAAA] else [if ((c == 'P') then [Block LYCAAA:LTCAAA] else [Block LZCAAA:LTCAAA]]]]]]
     * Equal (==) (c == '%')
     * Local Variable (c : 7+X3)
     * Push (7+X3:1)
               MA   LAEAAA,X2          * Add 1 to X2
               LCA  7+X3,0+X2          * Load data 7+X3 into Stack
     * Constant ('%' : @%@)
     * Push (@%@:1)
               MA   LAEAAA,X2          * Add 1 to X2
               LCA  @%@,0+X2           * Load data % into Stack
               C    0+X2,15999+X2      * Compare
     * Pop (1)
               MA   LBEAAA,X2          * Add -1 to X2
     * Pop (1)
               MA   LBEAAA,X2          * Add -1 to X2
     * Push (LEEAAA:5)
               MA   LDEAAA,X2          * Add 5 to X2
               LCA  LEEAAA,0+X2        * Load data 00000 into Stack
               BE   LOEAAA             * Jump if equal
               B    LPEAAA             * Jump to End
     LOEAAA    MCW  LCEAAA,0+X2        * Equal
     LPEAAA    NOP                     * End of Equal
               MCS  0+X2,0+X2          * Clear WM
     * Pop (5)
               MA   LFEAAA,X2          * Add -5 to X2
               BCE  LIDAAA,5+X2,       * Jump when False

     ***************************************
     * BeginBlock [Block LUCAAA:LTCAAA]
     * Function Call putchar('%')
     * Push (5)
               MA   LDEAAA,X2          * Add 5 to X2
     * Constant ('%' : @%@)
     * Push (@%@:1)
               MA   LAEAAA,X2          * Add 1 to X2
               LCA  @%@,0+X2           * Load data % into Stack
     * Push (X3:3)
               MA   LWDAAA,X2          * Add 3 to X2
               LCA  X3,0+X2            * Load data X3 into Stack
               MCW  X2,X3              * Copy X2 into X3
               B    LLBAAA             * Jump to function putchar
     * Pop (X3:3)
               LCA  0+X2,X3            * Load data in Stack into memory at X3
               MA   LZDAAA,X2          * Add -3 to X2
     * Pop (1)
               MA   LBEAAA,X2          * Add -1 to X2
     * Pop (5)
               MA   LFEAAA,X2          * Add -5 to X2
     LUCAAA    NOP                     * Return
               BCE  LTCAAA,RF,R        * Jump back to caller
     * EndBlock [Block LUCAAA:LTCAAA]
     ***************************************

               B    LJDAAA             * Jump when true
     LIDAAA    NOP                     * Executed when False
     * If [if ((c == 'C') then [Block LVCAAA:LTCAAA] else [if ((c == 'S') then [Block LWCAAA:LTCAAA] else [if ((c == 'D') then [Block LXCAAA:LTCAAA] else [if ((c == 'P') then [Block LYCAAA:LTCAAA] else [Block LZCAAA:LTCAAA]]]]]
     * Equal (==) (c == 'C')
     * Local Variable (c : 7+X3)
     * Push (7+X3:1)
               MA   LAEAAA,X2          * Add 1 to X2
               LCA  7+X3,0+X2          * Load data 7+X3 into Stack
     * Constant ('C' : @C@)
     * Push (@C@:1)
               MA   LAEAAA,X2          * Add 1 to X2
               LCA  @C@,0+X2           * Load data C into Stack
               C    0+X2,15999+X2      * Compare
     * Pop (1)
               MA   LBEAAA,X2          * Add -1 to X2
     * Pop (1)
               MA   LBEAAA,X2          * Add -1 to X2
     * Push (LEEAAA:5)
               MA   LDEAAA,X2          * Add 5 to X2
               LCA  LEEAAA,0+X2        * Load data 00000 into Stack
               BE   LQEAAA             * Jump if equal
               B    LREAAA             * Jump to End
     LQEAAA    MCW  LCEAAA,0+X2        * Equal
     LREAAA    NOP                     * End of Equal
               MCS  0+X2,0+X2          * Clear WM
     * Pop (5)
               MA   LFEAAA,X2          * Add -5 to X2
               BCE  LGDAAA,5+X2,       * Jump when False

     ***************************************
     * BeginBlock [Block LVCAAA:LTCAAA]
     * Function Call putchar((*arg))
     * Push (5)
               MA   LDEAAA,X2          * Add 5 to X2
     * DereferenceExpression (*arg)
     * Local Variable (arg : 6+X3)
     * Push (6+X3:3)
               MA   LWDAAA,X2          * Add 3 to X2
               LCA  6+X3,0+X2          * Load data 6+X3 into Stack
     * Pop (X1:3)
               LCA  0+X2,X1            * Load data in Stack into memory at X1
               MA   LZDAAA,X2          * Add -3 to X2
     * Push (0+X1:1)
               MA   LAEAAA,X2          * Add 1 to X2
               LCA  0+X1,0+X2          * Load data 0+X1 into Stack
     * End DereferenceExpression (*arg)
     * Push (X3:3)
               MA   LWDAAA,X2          * Add 3 to X2
               LCA  X3,0+X2            * Load data X3 into Stack
               MCW  X2,X3              * Copy X2 into X3
               B    LLBAAA             * Jump to function putchar
     * Pop (X3:3)
               LCA  0+X2,X3            * Load data in Stack into memory at X3
               MA   LZDAAA,X2          * Add -3 to X2
     * Pop (1)
               MA   LBEAAA,X2          * Add -1 to X2
     * Pop (5)
               MA   LFEAAA,X2          * Add -5 to X2
     * Assignment (arg = (arg + 15999))
     * Addition (arg + 15999)
     * Local Variable (arg : 6+X3)
     * Push (6+X3:3)
               MA   LWDAAA,X2          * Add 3 to X2
               LCA  6+X3,0+X2          * Load data 6+X3 into Stack
     * Constant (15999 : LBEAAA)
     * Push (LBEAAA:3)
               MA   LWDAAA,X2          * Add 3 to X2
               LCA  LBEAAA,0+X2        * Load data I9I into Stack
               MA   0+X2,15997+X2      * Add
     * Pop (3)
               MA   LZDAAA,X2          * Add -3 to X2
     * Push (LHEAAA:3)
               MA   LWDAAA,X2          * Add 3 to X2
               LCA  LHEAAA,0+X2        * Load data 006 into Stack
               MA   X3,0+X2
     * Pop (X1:3)
               LCA  0+X2,X1            * Load data in Stack into memory at X1
               MA   LZDAAA,X2          * Add -3 to X2
     * Pop (0+X1:3)
               LCA  0+X2,0+X1          * Load data in Stack into memory at 0+X1
               MA   LZDAAA,X2          * Add -3 to X2
     * End Assignment (arg = (arg + 15999))
     LVCAAA    NOP                     * Return
               BCE  LTCAAA,RF,R        * Jump back to caller
     * EndBlock [Block LVCAAA:LTCAAA]
     ***************************************

               B    LHDAAA             * Jump when true
     LGDAAA    NOP                     * Executed when False
     * If [if ((c == 'S') then [Block LWCAAA:LTCAAA] else [if ((c == 'D') then [Block LXCAAA:LTCAAA] else [if ((c == 'P') then [Block LYCAAA:LTCAAA] else [Block LZCAAA:LTCAAA]]]]
     * Equal (==) (c == 'S')
     * Local Variable (c : 7+X3)
     * Push (7+X3:1)
               MA   LAEAAA,X2          * Add 1 to X2
               LCA  7+X3,0+X2          * Load data 7+X3 into Stack
     * Constant ('S' : @S@)
     * Push (@S@:1)
               MA   LAEAAA,X2          * Add 1 to X2
               LCA  @S@,0+X2           * Load data S into Stack
               C    0+X2,15999+X2      * Compare
     * Pop (1)
               MA   LBEAAA,X2          * Add -1 to X2
     * Pop (1)
               MA   LBEAAA,X2          * Add -1 to X2
     * Push (LEEAAA:5)
               MA   LDEAAA,X2          * Add 5 to X2
               LCA  LEEAAA,0+X2        * Load data 00000 into Stack
               BE   LTEAAA             * Jump if equal
               B    LUEAAA             * Jump to End
     LTEAAA    MCW  LCEAAA,0+X2        * Equal
     LUEAAA    NOP                     * End of Equal
               MCS  0+X2,0+X2          * Clear WM
     * Pop (5)
               MA   LFEAAA,X2          * Add -5 to X2
               BCE  LEDAAA,5+X2,       * Jump when False

     ***************************************
     * BeginBlock [Block LWCAAA:LTCAAA]
     * Function Call puts((*((**char) arg)))
     * Push (5)
               MA   LDEAAA,X2          * Add 5 to X2
     * DereferenceExpression (*((**char) arg))
     * Local Variable (arg : 6+X3)
     * Push (6+X3:3)
               MA   LWDAAA,X2          * Add 3 to X2
               LCA  6+X3,0+X2          * Load data 6+X3 into Stack
     * Pop (X1:3)
               LCA  0+X2,X1            * Load data in Stack into memory at X1
               MA   LZDAAA,X2          * Add -3 to X2
     * Push (0+X1:3)
               MA   LWDAAA,X2          * Add 3 to X2
               LCA  0+X1,0+X2          * Load data 0+X1 into Stack
     * End DereferenceExpression (*((**char) arg))
     * Push (X3:3)
               MA   LWDAAA,X2          * Add 3 to X2
               LCA  X3,0+X2            * Load data X3 into Stack
               MCW  X2,X3              * Copy X2 into X3
               B    LWBAAA             * Jump to function puts
     * Pop (X3:3)
               LCA  0+X2,X3            * Load data in Stack into memory at X3
               MA   LZDAAA,X2          * Add -3 to X2
     * Pop (3)
               MA   LZDAAA,X2          * Add -3 to X2
     * Pop (5)
               MA   LFEAAA,X2          * Add -5 to X2
     * Assignment (arg = (arg + 15997))
     * Addition (arg + 15997)
     * Local Variable (arg : 6+X3)
     * Push (6+X3:3)
               MA   LWDAAA,X2          * Add 3 to X2
               LCA  6+X3,0+X2          * Load data 6+X3 into Stack
     * Constant (15997 : LZDAAA)
     * Push (LZDAAA:3)
               MA   LWDAAA,X2          * Add 3 to X2
               LCA  LZDAAA,0+X2        * Load data I9G into Stack
               MA   0+X2,15997+X2      * Add
     * Pop (3)
               MA   LZDAAA,X2          * Add -3 to X2
     * Push (LHEAAA:3)
               MA   LWDAAA,X2          * Add 3 to X2
               LCA  LHEAAA,0+X2        * Load data 006 into Stack
               MA   X3,0+X2
     * Pop (X1:3)
               LCA  0+X2,X1            * Load data in Stack into memory at X1
               MA   LZDAAA,X2          * Add -3 to X2
     * Pop (0+X1:3)
               LCA  0+X2,0+X1          * Load data in Stack into memory at 0+X1
               MA   LZDAAA,X2          * Add -3 to X2
     * End Assignment (arg = (arg + 15997))
     LWCAAA    NOP                     * Return
               BCE  LTCAAA,RF,R        * Jump back to caller
     * EndBlock [Block LWCAAA:LTCAAA]
     ***************************************

               B    LFDAAA             * Jump when true
     LEDAAA    NOP                     * Executed when False
     * If [if ((c == 'D') then [Block LXCAAA:LTCAAA] else [if ((c == 'P') then [Block LYCAAA:LTCAAA] else [Block LZCAAA:LTCAAA]]]
     * Equal (==) (c == 'D')
     * Local Variable (c : 7+X3)
     * Push (7+X3:1)
               MA   LAEAAA,X2          * Add 1 to X2
               LCA  7+X3,0+X2          * Load data 7+X3 into Stack
     * Constant ('D' : @D@)
     * Push (@D@:1)
               MA   LAEAAA,X2          * Add 1 to X2
               LCA  @D@,0+X2           * Load data D into Stack
               C    0+X2,15999+X2      * Compare
     * Pop (1)
               MA   LBEAAA,X2          * Add -1 to X2
     * Pop (1)
               MA   LBEAAA,X2          * Add -1 to X2
     * Push (LEEAAA:5)
               MA   LDEAAA,X2          * Add 5 to X2
               LCA  LEEAAA,0+X2        * Load data 00000 into Stack
               BE   LWEAAA             * Jump if equal
               B    LXEAAA             * Jump to End
     LWEAAA    MCW  LCEAAA,0+X2        * Equal
     LXEAAA    NOP                     * End of Equal
               MCS  0+X2,0+X2          * Clear WM
     * Pop (5)
               MA   LFEAAA,X2          * Add -5 to X2
               BCE  LCDAAA,5+X2,       * Jump when False

     ***************************************
     * BeginBlock [Block LXCAAA:LTCAAA]
               MA   LKEAAA,X2          * Reserve 7 bytes of space on Stack
     * Function Call itoa((*((*int) arg)), a, 10)
     * Push (3)
               MA   LWDAAA,X2          * Add 3 to X2
     * Constant (10 : LZEAAA)
     * Push (LZEAAA:5)
               MA   LDEAAA,X2          * Add 5 to X2
               LCA  LZEAAA,0+X2        * Load data 00010 into Stack
     * Local Array (a:char [7])
     * Push (LAFAAA:3)
               MA   LWDAAA,X2          * Add 3 to X2
               LCA  LAFAAA,0+X2        * Load data 012 into Stack
               MA   X3,0+X2
     * DereferenceExpression (*((*int) arg))
     * Local Variable (arg : 6+X3)
     * Push (6+X3:3)
               MA   LWDAAA,X2          * Add 3 to X2
               LCA  6+X3,0+X2          * Load data 6+X3 into Stack
     * Pop (X1:3)
               LCA  0+X2,X1            * Load data in Stack into memory at X1
               MA   LZDAAA,X2          * Add -3 to X2
     * Push (0+X1:5)
               MA   LDEAAA,X2          * Add 5 to X2
               LCA  0+X1,0+X2          * Load data 0+X1 into Stack
     * End DereferenceExpression (*((*int) arg))
     * Push (X3:3)
               MA   LWDAAA,X2          * Add 3 to X2
               LCA  X3,0+X2            * Load data X3 into Stack
               MCW  X2,X3              * Copy X2 into X3
               B    LYAAAA             * Jump to function itoa
     * Pop (X3:3)
               LCA  0+X2,X3            * Load data in Stack into memory at X3
               MA   LZDAAA,X2          * Add -3 to X2
     * Pop (5)
               MA   LFEAAA,X2          * Add -5 to X2
     * Pop (3)
               MA   LZDAAA,X2          * Add -3 to X2
     * Pop (5)
               MA   LFEAAA,X2          * Add -5 to X2
     * Pop (3)
               MA   LZDAAA,X2          * Add -3 to X2
     * Function Call puts(a)
     * Push (5)
               MA   LDEAAA,X2          * Add 5 to X2
     * Local Array (a:char [7])
     * Push (LAFAAA:3)
               MA   LWDAAA,X2          * Add 3 to X2
               LCA  LAFAAA,0+X2        * Load data 012 into Stack
               MA   X3,0+X2
     * Push (X3:3)
               MA   LWDAAA,X2          * Add 3 to X2
               LCA  X3,0+X2            * Load data X3 into Stack
               MCW  X2,X3              * Copy X2 into X3
               B    LWBAAA             * Jump to function puts
     * Pop (X3:3)
               LCA  0+X2,X3            * Load data in Stack into memory at X3
               MA   LZDAAA,X2          * Add -3 to X2
     * Pop (3)
               MA   LZDAAA,X2          * Add -3 to X2
     * Pop (5)
               MA   LFEAAA,X2          * Add -5 to X2
     * Assignment (arg = (arg + 15995))
     * Addition (arg + 15995)
     * Local Variable (arg : 6+X3)
     * Push (6+X3:3)
               MA   LWDAAA,X2          * Add 3 to X2
               LCA  6+X3,0+X2          * Load data 6+X3 into Stack
     * Constant (15995 : LFEAAA)
     * Push (LFEAAA:3)
               MA   LWDAAA,X2          * Add 3 to X2
               LCA  LFEAAA,0+X2        * Load data I9E into Stack
               MA   0+X2,15997+X2      * Add
     * Pop (3)
               MA   LZDAAA,X2          * Add -3 to X2
     * Push (LHEAAA:3)
               MA   LWDAAA,X2          * Add 3 to X2
               LCA  LHEAAA,0+X2        * Load data 006 into Stack
               MA   X3,0+X2
     * Pop (X1:3)
               LCA  0+X2,X1            * Load data in Stack into memory at X1
               MA   LZDAAA,X2          * Add -3 to X2
     * Pop (0+X1:3)
               LCA  0+X2,0+X1          * Load data in Stack into memory at 0+X1
               MA   LZDAAA,X2          * Add -3 to X2
     * End Assignment (arg = (arg + 15995))
     LXCAAA    NOP                     * Return
               MA   LBFAAA,X2          * Reserve 7 bytes of space on Stack
               BCE  LTCAAA,RF,R        * Jump back to caller
     * EndBlock [Block LXCAAA:LTCAAA]
     ***************************************

               B    LDDAAA             * Jump when true
     LCDAAA    NOP                     * Executed when False
     * If [if ((c == 'P') then [Block LYCAAA:LTCAAA] else [Block LZCAAA:LTCAAA]]
     * Equal (==) (c == 'P')
     * Local Variable (c : 7+X3)
     * Push (7+X3:1)
               MA   LAEAAA,X2          * Add 1 to X2
               LCA  7+X3,0+X2          * Load data 7+X3 into Stack
     * Constant ('P' : @P@)
     * Push (@P@:1)
               MA   LAEAAA,X2          * Add 1 to X2
               LCA  @P@,0+X2           * Load data P into Stack
               C    0+X2,15999+X2      * Compare
     * Pop (1)
               MA   LBEAAA,X2          * Add -1 to X2
     * Pop (1)
               MA   LBEAAA,X2          * Add -1 to X2
     * Push (LEEAAA:5)
               MA   LDEAAA,X2          * Add 5 to X2
               LCA  LEEAAA,0+X2        * Load data 00000 into Stack
               BE   LCFAAA             * Jump if equal
               B    LDFAAA             * Jump to End
     LCFAAA    MCW  LCEAAA,0+X2        * Equal
     LDFAAA    NOP                     * End of Equal
               MCS  0+X2,0+X2          * Clear WM
     * Pop (5)
               MA   LFEAAA,X2          * Add -5 to X2
               BCE  LADAAA,5+X2,       * Jump when False

     ***************************************
     * BeginBlock [Block LYCAAA:LTCAAA]
     * Assignment (addrP = arg)
     * Local Variable (arg : 6+X3)
     * Push (6+X3:3)
               MA   LWDAAA,X2          * Add 3 to X2
               LCA  6+X3,0+X2          * Load data 6+X3 into Stack
     * Push (LFFAAA:3)
               MA   LWDAAA,X2          * Add 3 to X2
               LCA  LFFAAA,0+X2        * Load data 010 into Stack
               MA   X3,0+X2
     * Pop (X1:3)
               LCA  0+X2,X1            * Load data in Stack into memory at X1
               MA   LZDAAA,X2          * Add -3 to X2
     * Pop (0+X1:3)
               LCA  0+X2,0+X1          * Load data in Stack into memory at 0+X1
               MA   LZDAAA,X2          * Add -3 to X2
     * End Assignment (addrP = arg)
     * Assignment (addrC = (*addrP))
     * DereferenceExpression (*addrP)
     * Local Variable (addrP : 10+X3)
     * Push (10+X3:3)
               MA   LWDAAA,X2          * Add 3 to X2
               LCA  10+X3,0+X2         * Load data 10+X3 into Stack
     * Pop (X1:3)
               LCA  0+X2,X1            * Load data in Stack into memory at X1
               MA   LZDAAA,X2          * Add -3 to X2
     * Push (0+X1:1)
               MA   LAEAAA,X2          * Add 1 to X2
               LCA  0+X1,0+X2          * Load data 0+X1 into Stack
     * End DereferenceExpression (*addrP)
     * Push (LGEAAA:3)
               MA   LWDAAA,X2          * Add 3 to X2
               LCA  LGEAAA,0+X2        * Load data 011 into Stack
               MA   X3,0+X2
     * Pop (X1:3)
               LCA  0+X2,X1            * Load data in Stack into memory at X1
               MA   LZDAAA,X2          * Add -3 to X2
     * Pop (0+X1:1)
               LCA  0+X2,0+X1          * Load data in Stack into memory at 0+X1
               MA   LBEAAA,X2          * Add -1 to X2
     * End Assignment (addrC = (*addrP))
     * Function Call putchar(addrC)
     * Push (5)
               MA   LDEAAA,X2          * Add 5 to X2
     * Local Variable (addrC : 11+X3)
     * Push (11+X3:1)
               MA   LAEAAA,X2          * Add 1 to X2
               LCA  11+X3,0+X2         * Load data 11+X3 into Stack
     * Push (X3:3)
               MA   LWDAAA,X2          * Add 3 to X2
               LCA  X3,0+X2            * Load data X3 into Stack
               MCW  X2,X3              * Copy X2 into X3
               B    LLBAAA             * Jump to function putchar
     * Pop (X3:3)
               LCA  0+X2,X3            * Load data in Stack into memory at X3
               MA   LZDAAA,X2          * Add -3 to X2
     * Pop (1)
               MA   LBEAAA,X2          * Add -1 to X2
     * Pop (5)
               MA   LFEAAA,X2          * Add -5 to X2
     * Start asm block
               W    
     * End asm block
     * Start asm block
               W    
     * End asm block
     * Start asm block
               W    
     * End asm block
     * Assignment (arg = (arg + 15999))
     * Addition (arg + 15999)
     * Local Variable (arg : 6+X3)
     * Push (6+X3:3)
               MA   LWDAAA,X2          * Add 3 to X2
               LCA  6+X3,0+X2          * Load data 6+X3 into Stack
     * Constant (15999 : LBEAAA)
     * Push (LBEAAA:3)
               MA   LWDAAA,X2          * Add 3 to X2
               LCA  LBEAAA,0+X2        * Load data I9I into Stack
               MA   0+X2,15997+X2      * Add
     * Pop (3)
               MA   LZDAAA,X2          * Add -3 to X2
     * Push (LHEAAA:3)
               MA   LWDAAA,X2          * Add 3 to X2
               LCA  LHEAAA,0+X2        * Load data 006 into Stack
               MA   X3,0+X2
     * Pop (X1:3)
               LCA  0+X2,X1            * Load data in Stack into memory at X1
               MA   LZDAAA,X2          * Add -3 to X2
     * Pop (0+X1:3)
               LCA  0+X2,0+X1          * Load data in Stack into memory at 0+X1
               MA   LZDAAA,X2          * Add -3 to X2
     * End Assignment (arg = (arg + 15999))
     LYCAAA    NOP                     * Return
               BCE  LTCAAA,RF,R        * Jump back to caller
     * EndBlock [Block LYCAAA:LTCAAA]
     ***************************************

               B    LBDAAA             * Jump when true
     LADAAA    NOP                     * Executed when False

     ***************************************
     * BeginBlock [Block LZCAAA:LTCAAA]
     * Set the return flag, so we know do deallocate our stack
               MCW  @R@,RF             * PUT R into location RF
               B    LZCAAA             * Jump back to caller
     LZCAAA    NOP                     * Return
               BCE  LTCAAA,RF,R        * Jump back to caller
     * EndBlock [Block LZCAAA:LTCAAA]
     ***************************************

     LBDAAA    NOP                     * Executed when True
     LDDAAA    NOP                     * Executed when True
     LFDAAA    NOP                     * Executed when True
     LHDAAA    NOP                     * Executed when True
     LJDAAA    NOP                     * Executed when True
     LTCAAA    NOP                     * Return
               BCE  LRCAAA,RF,R        * Jump back to caller
     * EndBlock [Block LTCAAA:LRCAAA]
     ***************************************

     LLDAAA    NOP                     * Executed when True
     LRCAAA    NOP                     * Return
               BCE  LQCAAA,RF,R        * Jump back to caller
     * EndBlock [Block LRCAAA:LQCAAA]
     ***************************************

               B    LMDAAA             * Jump to top
     LNDAAA    NOP                     * Bottom of the while loop

     LQCAAA    NOP                     * Return
               MA   LGFAAA,X2          * Reserve 11 bytes of space on Stack
               MCW  @ @,RF             * Clear the Return Flag
     * EndBlock [Block LQCAAA:null]
     ***************************************

               LCA  3+X3,X1            * Load return address to X1
               B    0+X1               * Jump back to caller

     ********************************************************************************
     * End Function : printf
     ********************************************************************************

     ********************************************************************************
     * Function : itoa
     ********************************************************************************
     LYAAAA    SBR  3+X3               * Save return address in register B to local frame (X3)
               SW   1+X3               * Set the WM
               CW   2+X3               * Clean WM
               CW   3+X3               * Clean WM

     ***************************************
     * BeginBlock [Block LZAAAA:null]
               LCA  LHFAAA,9+X3        * Load *char 4005 into memory 9+X3
               LCA  LCEAAA,14+X3       * Load int 1 into memory 14+X3
               MA   LIFAAA,X2          * Reserve 14 bytes of space on Stack
     * Assignment (start = str)
     * Parameter Variable (str : 15992+X3)
     * Push (15992+X3:3)
               MA   LWDAAA,X2          * Add 3 to X2
               LCA  15992+X3,0+X2      * Load data 15992+X3 into Stack
     * Push (LHEAAA:3)
               MA   LWDAAA,X2          * Add 3 to X2
               LCA  LHEAAA,0+X2        * Load data 006 into Stack
               MA   X3,0+X2
     * Pop (X1:3)
               LCA  0+X2,X1            * Load data in Stack into memory at X1
               MA   LZDAAA,X2          * Add -3 to X2
     * Pop (0+X1:3)
               LCA  0+X2,0+X1          * Load data in Stack into memory at 0+X1
               MA   LZDAAA,X2          * Add -3 to X2
     * End Assignment (start = str)
     * If [if ((value < 0) then [Block LABAAA:LZAAAA] else [if ((value == 0) then [Block LBBAAA:LZAAAA]]]
     * Less (<) (value < 0)
     * Parameter Variable (value : 15997+X3)
     * Push (15997+X3:5)
               MA   LDEAAA,X2          * Add 5 to X2
               LCA  15997+X3,0+X2      * Load data 15997+X3 into Stack
               B    LJFAAA             * Jump to snippet clean_number
     * Constant (0 : LEEAAA)
     * Push (LEEAAA:5)
               MA   LDEAAA,X2          * Add 5 to X2
               LCA  LEEAAA,0+X2        * Load data 00000 into Stack
               B    LJFAAA             * Jump to snippet clean_number
               C    0+X2,15995+X2      * Compare
     * Pop (5)
               MA   LFEAAA,X2          * Add -5 to X2
               MCW  LEEAAA,0+X2        * Set stack location to 0
               BL   LLFAAA             * Jump if less
               B    LMFAAA             * Jump to End
     LLFAAA    MCW  LCEAAA,0+X2        * Less: Set stack location to 1
     LMFAAA    NOP                     * End of Less
               MCS  0+X2,0+X2          * Clear WM
     * Pop (5)
               MA   LFEAAA,X2          * Add -5 to X2
               BCE  LDBAAA,5+X2,       * Jump when False

     ***************************************
     * BeginBlock [Block LABAAA:LZAAAA]
     * Assignment ((*(str++)) = '-')
     * Constant ('-' : @-@)
     * Push (@-@:1)
               MA   LAEAAA,X2          * Add 1 to X2
               LCA  @-@,0+X2           * Load data - into Stack
     * PostIncrement (str++)
     * Push (LOFAAA:3)
               MA   LWDAAA,X2          * Add 3 to X2
               LCA  LOFAAA,0+X2        * Load data I9B into Stack
               MA   X3,0+X2
     * Pop (X1:3)
               LCA  0+X2,X1            * Load data in Stack into memory at X1
               MA   LZDAAA,X2          * Add -3 to X2
     * Push (0+X1:3)
               MA   LWDAAA,X2          * Add 3 to X2
               LCA  0+X1,0+X2          * Load data 0+X1 into Stack
               MA   LAEAAA,0+X1        * PostIncrement pointer pointed by X1
     * Pop (X1:3)
               LCA  0+X2,X1            * Load data in Stack into memory at X1
               MA   LZDAAA,X2          * Add -3 to X2
     * Pop (0+X1:1)
               LCA  0+X2,0+X1          * Load data in Stack into memory at 0+X1
               MA   LBEAAA,X2          * Add -1 to X2
     * End Assignment ((*(str++)) = '-')
     * Assignment (value = (-value))
     * Negate (-value)
     * Parameter Variable (value : 15997+X3)
     * Push (15997+X3:5)
               MA   LDEAAA,X2          * Add 5 to X2
               LCA  15997+X3,0+X2      * Load data 15997+X3 into Stack
               ZS   0+X2
               B    LJFAAA             * Jump to snippet clean_number
     * Push (LZDAAA:3)
               MA   LWDAAA,X2          * Add 3 to X2
               LCA  LZDAAA,0+X2        * Load data I9G into Stack
               MA   X3,0+X2
     * Pop (X1:3)
               LCA  0+X2,X1            * Load data in Stack into memory at X1
               MA   LZDAAA,X2          * Add -3 to X2
     * Pop (0+X1:5)
               LCA  0+X2,0+X1          * Load data in Stack into memory at 0+X1
               MA   LFEAAA,X2          * Add -5 to X2
     * End Assignment (value = (-value))
     LABAAA    NOP                     * Return
               BCE  LZAAAA,RF,R        * Jump back to caller
     * EndBlock [Block LABAAA:LZAAAA]
     ***************************************

               B    LEBAAA             * Jump when true
     LDBAAA    NOP                     * Executed when False
     * If [if ((value == 0) then [Block LBBAAA:LZAAAA]]
     * Equal (==) (value == 0)
     * Parameter Variable (value : 15997+X3)
     * Push (15997+X3:5)
               MA   LDEAAA,X2          * Add 5 to X2
               LCA  15997+X3,0+X2      * Load data 15997+X3 into Stack
               B    LJFAAA             * Jump to snippet clean_number
     * Constant (0 : LEEAAA)
     * Push (LEEAAA:5)
               MA   LDEAAA,X2          * Add 5 to X2
               LCA  LEEAAA,0+X2        * Load data 00000 into Stack
               B    LJFAAA             * Jump to snippet clean_number
               C    0+X2,15995+X2      * Compare
     * Pop (5)
               MA   LFEAAA,X2          * Add -5 to X2
     * Pop (5)
               MA   LFEAAA,X2          * Add -5 to X2
     * Push (LEEAAA:5)
               MA   LDEAAA,X2          * Add 5 to X2
               LCA  LEEAAA,0+X2        * Load data 00000 into Stack
               BE   LPFAAA             * Jump if equal
               B    LQFAAA             * Jump to End
     LPFAAA    MCW  LCEAAA,0+X2        * Equal
     LQFAAA    NOP                     * End of Equal
               MCS  0+X2,0+X2          * Clear WM
     * Pop (5)
               MA   LFEAAA,X2          * Add -5 to X2
               BCE  LCBAAA,5+X2,       * Jump when False

     ***************************************
     * BeginBlock [Block LBBAAA:LZAAAA]
     * Assignment ((str[0]) = '0')
     * Constant ('0' : @0@)
     * Push (@0@:1)
               MA   LAEAAA,X2          * Add 1 to X2
               LCA  @0@,0+X2           * Load data 0 into Stack
     * SubScript (str[0])
     * Parameter Variable (str : 15992+X3)
     * Push (15992+X3:3)
               MA   LWDAAA,X2          * Add 3 to X2
               LCA  15992+X3,0+X2      * Load data 15992+X3 into Stack
     * End SubScript (str[0])
     * Pop (X1:3)
               LCA  0+X2,X1            * Load data in Stack into memory at X1
               MA   LZDAAA,X2          * Add -3 to X2
     * Pop (0+X1:1)
               LCA  0+X2,0+X1          * Load data in Stack into memory at 0+X1
               MA   LBEAAA,X2          * Add -1 to X2
     * End Assignment ((str[0]) = '0')
     * Assignment ((str[1]) = '\0')
     * Constant ('\0' : EOS)
     * Push (EOS:1)
               MA   LAEAAA,X2          * Add 1 to X2
               LCA  EOS,0+X2           * Load data EOS into Stack
     * SubScript (str[1])
     * Parameter Variable (str : 15992+X3)
     * Push (15992+X3:3)
               MA   LWDAAA,X2          * Add 3 to X2
               LCA  15992+X3,0+X2      * Load data 15992+X3 into Stack
               A    LCEAAA,0+X2        * Add offset 1 to point element 1
     * End SubScript (str[1])
     * Pop (X1:3)
               LCA  0+X2,X1            * Load data in Stack into memory at X1
               MA   LZDAAA,X2          * Add -3 to X2
     * Pop (0+X1:1)
               LCA  0+X2,0+X1          * Load data in Stack into memory at 0+X1
               MA   LBEAAA,X2          * Add -1 to X2
     * End Assignment ((str[1]) = '\0')
     * Local Variable (start : 6+X3)
     * Push (6+X3:3)
               MA   LWDAAA,X2          * Add 3 to X2
               LCA  6+X3,0+X2          * Load data 6+X3 into Stack
     * Pop (15984+X3:3)
               LCA  0+X2,15984+X3      * Load data in Stack into memory at 15984+X3
               MA   LZDAAA,X2          * Add -3 to X2
     * Set the return flag, so we know do deallocate our stack
               MCW  @R@,RF             * PUT R into location RF
               B    LBBAAA             * Jump back to caller
     LBBAAA    NOP                     * Return
               BCE  LZAAAA,RF,R        * Jump back to caller
     * EndBlock [Block LBBAAA:LZAAAA]
     ***************************************

     LCBAAA    NOP                     * Executed when False
     LEBAAA    NOP                     * Executed when True
     * While [while ((exp <= (value / base))) [Block LFBAAA:LZAAAA] top:LGBAAA bottom:LHBAAA]
     LGBAAA    NOP                     * Top of the loop
     * LessOrEqual (<=) (exp <= (value / base))
     * Local Variable (exp : 14+X3)
     * Push (14+X3:5)
               MA   LDEAAA,X2          * Add 5 to X2
               LCA  14+X3,0+X2         * Load data 14+X3 into Stack
               B    LJFAAA             * Jump to snippet clean_number
     * Divide (value / base)
     * Parameter Variable (base : 15989+X3)
     * Push (15989+X3:5)
               MA   LDEAAA,X2          * Add 5 to X2
               LCA  15989+X3,0+X2      * Load data 15989+X3 into Stack
     * Parameter Variable (value : 15997+X3)
     * Push (15997+X3:5)
               MA   LDEAAA,X2          * Add 5 to X2
               LCA  15997+X3,0+X2      * Load data 15997+X3 into Stack
               B    LSFAAA             * Jump to snippet SNIP_DIV
               MCW  0+X2,15995+X2      * copy stack location to stack location at offset -5
     * Pop (5)
               MA   LFEAAA,X2          * Add -5 to X2
               B    LJFAAA             * Jump to snippet clean_number
               C    0+X2,15995+X2      * Compare
     * Pop (5)
               MA   LFEAAA,X2          * Add -5 to X2
               MCW  LCEAAA,0+X2        * Set stack location to 1
               BH   LYFAAA             * Jump if less or equal
               B    LZFAAA             * Jump to End
     LYFAAA    MCW  LEEAAA,0+X2        * Less or equal: Set stack location to 0
     LZFAAA    NOP                     * End of LessOrEqual
               MCS  0+X2,0+X2          * Clear WM
     * Pop (5)
               MA   LFEAAA,X2          * Add -5 to X2
               BCE  LHBAAA,5+X2,       * Jump to bottom

     ***************************************
     * BeginBlock [Block LFBAAA:LZAAAA]
     * Assignment (exp = (exp * base))
     * Multiply (exp * base)
     * Local Variable (exp : 14+X3)
     * Push (14+X3:5)
               MA   LDEAAA,X2          * Add 5 to X2
               LCA  14+X3,0+X2         * Load data 14+X3 into Stack
     * Parameter Variable (base : 15989+X3)
     * Push (15989+X3:5)
               MA   LDEAAA,X2          * Add 5 to X2
               LCA  15989+X3,0+X2      * Load data 15989+X3 into Stack
               M    15995+X2,6+X2      * Multiply
               SW   2+X2
               LCA  6+X2,15995+X2
     * Pop (5)
               MA   LFEAAA,X2          * Add -5 to X2
     * Push (LIFAAA:3)
               MA   LWDAAA,X2          * Add 3 to X2
               LCA  LIFAAA,0+X2        * Load data 014 into Stack
               MA   X3,0+X2
     * Pop (X1:3)
               LCA  0+X2,X1            * Load data in Stack into memory at X1
               MA   LZDAAA,X2          * Add -3 to X2
     * Pop (0+X1:5)
               LCA  0+X2,0+X1          * Load data in Stack into memory at 0+X1
               MA   LFEAAA,X2          * Add -5 to X2
     * End Assignment (exp = (exp * base))
     LFBAAA    NOP                     * Return
               BCE  LZAAAA,RF,R        * Jump back to caller
     * EndBlock [Block LFBAAA:LZAAAA]
     ***************************************

               B    LGBAAA             * Jump to top
     LHBAAA    NOP                     * Bottom of the while loop

     * While [while (exp) [Block LIBAAA:LZAAAA] top:LJBAAA bottom:LKBAAA]
     LJBAAA    NOP                     * Top of the loop
     * Local Variable (exp : 14+X3)
     * Push (14+X3:5)
               MA   LDEAAA,X2          * Add 5 to X2
               LCA  14+X3,0+X2         * Load data 14+X3 into Stack
               MCS  0+X2,0+X2          * Clear WM
     * Pop (5)
               MA   LFEAAA,X2          * Add -5 to X2
               BCE  LKBAAA,5+X2,       * Jump to bottom

     ***************************************
     * BeginBlock [Block LIBAAA:LZAAAA]
     * Assignment ((*(str++)) = (digits[(value / exp)]))
     * SubScript (digits[(value / exp)])
     * Local Variable (digits : 9+X3)
     * Push (9+X3:3)
               MA   LWDAAA,X2          * Add 3 to X2
               LCA  9+X3,0+X2          * Load data 9+X3 into Stack
     * Divide (value / exp)
     * Local Variable (exp : 14+X3)
     * Push (14+X3:5)
               MA   LDEAAA,X2          * Add 5 to X2
               LCA  14+X3,0+X2         * Load data 14+X3 into Stack
     * Parameter Variable (value : 15997+X3)
     * Push (15997+X3:5)
               MA   LDEAAA,X2          * Add 5 to X2
               LCA  15997+X3,0+X2      * Load data 15997+X3 into Stack
               B    LSFAAA             * Jump to snippet SNIP_DIV
               MCW  0+X2,15995+X2      * copy stack location to stack location at offset -5
     * Pop (5)
               MA   LFEAAA,X2          * Add -5 to X2
     * Put raw index on the stack
     * Push (LCEAAA:5)
               MA   LDEAAA,X2          * Add 5 to X2
               LCA  LCEAAA,0+X2        * Load data 00001 into Stack
               M    15995+X2,6+X2
               SW   2+X2
               LCA  6+X2,15995+X2
     * Pop (5)
               MA   LFEAAA,X2          * Add -5 to X2
     * Stack top is now array index
               B    LAGAAA             * Jump to snippet number_to_pointer
               MA   0+X2,15997+X2
     * Pop (3)
               MA   LZDAAA,X2          * Add -3 to X2
     * Stack top is location in array now
     * End SubScript (digits[(value / exp)])
     * Pop (X1:3)
               LCA  0+X2,X1            * Load data in Stack into memory at X1
               MA   LZDAAA,X2          * Add -3 to X2
     * Push (0+X1:1)
               MA   LAEAAA,X2          * Add 1 to X2
               LCA  0+X1,0+X2          * Load data 0+X1 into Stack
     * PostIncrement (str++)
     * Push (LOFAAA:3)
               MA   LWDAAA,X2          * Add 3 to X2
               LCA  LOFAAA,0+X2        * Load data I9B into Stack
               MA   X3,0+X2
     * Pop (X1:3)
               LCA  0+X2,X1            * Load data in Stack into memory at X1
               MA   LZDAAA,X2          * Add -3 to X2
     * Push (0+X1:3)
               MA   LWDAAA,X2          * Add 3 to X2
               LCA  0+X1,0+X2          * Load data 0+X1 into Stack
               MA   LAEAAA,0+X1        * PostIncrement pointer pointed by X1
     * Pop (X1:3)
               LCA  0+X2,X1            * Load data in Stack into memory at X1
               MA   LZDAAA,X2          * Add -3 to X2
     * Pop (0+X1:1)
               LCA  0+X2,0+X1          * Load data in Stack into memory at 0+X1
               MA   LBEAAA,X2          * Add -1 to X2
     * End Assignment ((*(str++)) = (digits[(value / exp)]))
     * Assignment (value = (value % exp))
     * Modulo (%) (value % exp)
     * Local Variable (exp : 14+X3)
     * Push (14+X3:5)
               MA   LDEAAA,X2          * Add 5 to X2
               LCA  14+X3,0+X2         * Load data 14+X3 into Stack
     * Parameter Variable (value : 15997+X3)
     * Push (15997+X3:5)
               MA   LDEAAA,X2          * Add 5 to X2
               LCA  15997+X3,0+X2      * Load data 15997+X3 into Stack
               B    LSFAAA             * Jump to snippet SNIP_DIV
     * Pop (5)
               MA   LFEAAA,X2          * Add -5 to X2
     * Push (LZDAAA:3)
               MA   LWDAAA,X2          * Add 3 to X2
               LCA  LZDAAA,0+X2        * Load data I9G into Stack
               MA   X3,0+X2
     * Pop (X1:3)
               LCA  0+X2,X1            * Load data in Stack into memory at X1
               MA   LZDAAA,X2          * Add -3 to X2
     * Pop (0+X1:5)
               LCA  0+X2,0+X1          * Load data in Stack into memory at 0+X1
               MA   LFEAAA,X2          * Add -5 to X2
     * End Assignment (value = (value % exp))
     * Assignment (exp = (exp / base))
     * Divide (exp / base)
     * Parameter Variable (base : 15989+X3)
     * Push (15989+X3:5)
               MA   LDEAAA,X2          * Add 5 to X2
               LCA  15989+X3,0+X2      * Load data 15989+X3 into Stack
     * Local Variable (exp : 14+X3)
     * Push (14+X3:5)
               MA   LDEAAA,X2          * Add 5 to X2
               LCA  14+X3,0+X2         * Load data 14+X3 into Stack
               B    LSFAAA             * Jump to snippet SNIP_DIV
               MCW  0+X2,15995+X2      * copy stack location to stack location at offset -5
     * Pop (5)
               MA   LFEAAA,X2          * Add -5 to X2
     * Push (LIFAAA:3)
               MA   LWDAAA,X2          * Add 3 to X2
               LCA  LIFAAA,0+X2        * Load data 014 into Stack
               MA   X3,0+X2
     * Pop (X1:3)
               LCA  0+X2,X1            * Load data in Stack into memory at X1
               MA   LZDAAA,X2          * Add -3 to X2
     * Pop (0+X1:5)
               LCA  0+X2,0+X1          * Load data in Stack into memory at 0+X1
               MA   LFEAAA,X2          * Add -5 to X2
     * End Assignment (exp = (exp / base))
     LIBAAA    NOP                     * Return
               BCE  LZAAAA,RF,R        * Jump back to caller
     * EndBlock [Block LIBAAA:LZAAAA]
     ***************************************

               B    LJBAAA             * Jump to top
     LKBAAA    NOP                     * Bottom of the while loop

     * Assignment ((*str) = '\0')
     * Constant ('\0' : EOS)
     * Push (EOS:1)
               MA   LAEAAA,X2          * Add 1 to X2
               LCA  EOS,0+X2           * Load data EOS into Stack
     * Parameter Variable (str : 15992+X3)
     * Push (15992+X3:3)
               MA   LWDAAA,X2          * Add 3 to X2
               LCA  15992+X3,0+X2      * Load data 15992+X3 into Stack
     * Pop (X1:3)
               LCA  0+X2,X1            * Load data in Stack into memory at X1
               MA   LZDAAA,X2          * Add -3 to X2
     * Pop (0+X1:1)
               LCA  0+X2,0+X1          * Load data in Stack into memory at 0+X1
               MA   LBEAAA,X2          * Add -1 to X2
     * End Assignment ((*str) = '\0')
     * Local Variable (start : 6+X3)
     * Push (6+X3:3)
               MA   LWDAAA,X2          * Add 3 to X2
               LCA  6+X3,0+X2          * Load data 6+X3 into Stack
     * Pop (15984+X3:3)
               LCA  0+X2,15984+X3      * Load data in Stack into memory at 15984+X3
               MA   LZDAAA,X2          * Add -3 to X2
     * Set the return flag, so we know do deallocate our stack
               MCW  @R@,RF             * PUT R into location RF
               B    LZAAAA             * Jump back to caller
     LZAAAA    NOP                     * Return
               MA   LHGAAA,X2          * Reserve 14 bytes of space on Stack
               MCW  @ @,RF             * Clear the Return Flag
     * EndBlock [Block LZAAAA:null]
     ***************************************

               LCA  3+X3,X1            * Load return address to X1
               B    0+X1               * Jump back to caller

     ********************************************************************************
     * End Function : itoa
     ********************************************************************************

     ********************************************************************************
     * Function : putchar
     ********************************************************************************
     LLBAAA    SBR  3+X3               * Save return address in register B to local frame (X3)
               SW   1+X3               * Set the WM
               CW   2+X3               * Clean WM
               CW   3+X3               * Clean WM

     ***************************************
     * BeginBlock [Block LMBAAA:null]
               MA   LWDAAA,X2          * Reserve 3 bytes of space on Stack
     * If [if ((c != '\n') then [Block LNBAAA:LMBAAA] else [Block LOBAAA:LMBAAA]]
     * NotEqual (!=) (c != '\n')
     * Parameter Variable (c : 15997+X3)
     * Push (15997+X3:1)
               MA   LAEAAA,X2          * Add 1 to X2
               LCA  15997+X3,0+X2      * Load data 15997+X3 into Stack
     * Constant ('\n' : EOL)
     * Push (EOL:1)
               MA   LAEAAA,X2          * Add 1 to X2
               LCA  EOL,0+X2           * Load data EOL into Stack
               C    0+X2,15999+X2      * Compare
     * Pop (1)
               MA   LBEAAA,X2          * Add -1 to X2
     * Pop (1)
               MA   LBEAAA,X2          * Add -1 to X2
     * Push (LCEAAA:5)
               MA   LDEAAA,X2          * Add 5 to X2
               LCA  LCEAAA,0+X2        * Load data 00001 into Stack
               BE   LIGAAA             * Jump if equal
               B    LJGAAA             * Jump to End
     LIGAAA    MCW  LEEAAA,0+X2        * Equal: Set stack location to 0
     LJGAAA    NOP                     * End of NotEqual
               MCS  0+X2,0+X2          * Clear WM
     * Pop (5)
               MA   LFEAAA,X2          * Add -5 to X2
               BCE  LSBAAA,5+X2,       * Jump when False

     ***************************************
     * BeginBlock [Block LNBAAA:LMBAAA]
     * Assignment ((*(__putchar_pos++)) = c)
     * Parameter Variable (c : 15997+X3)
     * Push (15997+X3:1)
               MA   LAEAAA,X2          * Add 1 to X2
               LCA  15997+X3,0+X2      * Load data 15997+X3 into Stack
     * PostIncrement (__putchar_pos++)
     * Push (LKGAAA:3)
               MA   LWDAAA,X2          * Add 3 to X2
               LCA  LKGAAA,0+X2        * Load data 02U into Stack
     * Pop (X1:3)
               LCA  0+X2,X1            * Load data in Stack into memory at X1
               MA   LZDAAA,X2          * Add -3 to X2
     * Push (0+X1:3)
               MA   LWDAAA,X2          * Add 3 to X2
               LCA  0+X1,0+X2          * Load data 0+X1 into Stack
               MA   LAEAAA,0+X1        * PostIncrement pointer pointed by X1
     * Pop (X1:3)
               LCA  0+X2,X1            * Load data in Stack into memory at X1
               MA   LZDAAA,X2          * Add -3 to X2
     * Pop (0+X1:1)
               LCA  0+X2,0+X1          * Load data in Stack into memory at 0+X1
               MA   LBEAAA,X2          * Add -1 to X2
     * End Assignment ((*(__putchar_pos++)) = c)
     LNBAAA    NOP                     * Return
               BCE  LMBAAA,RF,R        * Jump back to caller
     * EndBlock [Block LNBAAA:LMBAAA]
     ***************************************

               B    LTBAAA             * Jump when true
     LSBAAA    NOP                     * Executed when False

     ***************************************
     * BeginBlock [Block LOBAAA:LMBAAA]
     * While [while ((((int) __putchar_last) >= ((int) __putchar_pos))) [Block LPBAAA:LOBAAA] top:LQBAAA bottom:LRBAAA]
     LQBAAA    NOP                     * Top of the loop
     * GreaterOrEqual (>=) ((((int) __putchar_last) >= ((int) __putchar_pos))
     * Static Variable (__putchar_last : 4027)
     * Push (4027:3)
               MA   LWDAAA,X2          * Add 3 to X2
               LCA  4027,0+X2          * Load data 4027 into Stack
     * Cast Pointer(__putchar_last) to Number
               B    LLGAAA             * Jump to snippet pointer_to_number
               B    LJFAAA             * Jump to snippet clean_number
     * Static Variable (__putchar_pos : 4024)
     * Push (4024:3)
               MA   LWDAAA,X2          * Add 3 to X2
               LCA  4024,0+X2          * Load data 4024 into Stack
     * Cast Pointer(__putchar_pos) to Number
               B    LLGAAA             * Jump to snippet pointer_to_number
               B    LJFAAA             * Jump to snippet clean_number
               C    0+X2,15995+X2      * Compare
     * Pop (5)
               MA   LFEAAA,X2          * Add -5 to X2
               MCW  LCEAAA,0+X2        * Set stack location to 1
               BL   LUGAAA             * Jump if greater or equal
               B    LVGAAA             * Jump to End
     LUGAAA    MCW  LEEAAA,0+X2        * GreaterOrEqual: Set stack location to 0
     LVGAAA    NOP                     * End of GreaterOrEqual
               MCS  0+X2,0+X2          * Clear WM
     * Pop (5)
               MA   LFEAAA,X2          * Add -5 to X2
               BCE  LRBAAA,5+X2,       * Jump to bottom

     ***************************************
     * BeginBlock [Block LPBAAA:LOBAAA]
     * Assignment ((*(__putchar_last--)) = ' ')
     * Constant (' ' : @ @)
     * Push (@ @:1)
               MA   LAEAAA,X2          * Add 1 to X2
               LCA  @ @,0+X2           * Load data   into Stack
     * PostDecrement (__putchar_last--)
     * Push (LXGAAA:3)
               MA   LWDAAA,X2          * Add 3 to X2
               LCA  LXGAAA,0+X2        * Load data 02X into Stack
     * Pop (X1:3)
               LCA  0+X2,X1            * Load data in Stack into memory at X1
               MA   LZDAAA,X2          * Add -3 to X2
     * Push (0+X1:3)
               MA   LWDAAA,X2          * Add 3 to X2
               LCA  0+X1,0+X2          * Load data 0+X1 into Stack
               MA   LBEAAA,0+X1        * PostDecrement pointer pointed by X1
     * Pop (X1:3)
               LCA  0+X2,X1            * Load data in Stack into memory at X1
               MA   LZDAAA,X2          * Add -3 to X2
     * Pop (0+X1:1)
               LCA  0+X2,0+X1          * Load data in Stack into memory at 0+X1
               MA   LBEAAA,X2          * Add -1 to X2
     * End Assignment ((*(__putchar_last--)) = ' ')
     LPBAAA    NOP                     * Return
               BCE  LOBAAA,RF,R        * Jump back to caller
     * EndBlock [Block LPBAAA:LOBAAA]
     ***************************************

               B    LQBAAA             * Jump to top
     LRBAAA    NOP                     * Bottom of the while loop

     * Assignment (__putchar_last = __putchar_pos)
     * Static Variable (__putchar_pos : 4024)
     * Push (4024:3)
               MA   LWDAAA,X2          * Add 3 to X2
               LCA  4024,0+X2          * Load data 4024 into Stack
     * Push (LXGAAA:3)
               MA   LWDAAA,X2          * Add 3 to X2
               LCA  LXGAAA,0+X2        * Load data 02X into Stack
     * Pop (X1:3)
               LCA  0+X2,X1            * Load data in Stack into memory at X1
               MA   LZDAAA,X2          * Add -3 to X2
     * Pop (0+X1:3)
               LCA  0+X2,0+X1          * Load data in Stack into memory at 0+X1
               MA   LZDAAA,X2          * Add -3 to X2
     * End Assignment (__putchar_last = __putchar_pos)
     * Assignment (__putchar_pos = 201)
     * Constant (201 : LYGAAA)
     * Push (LYGAAA:3)
               MA   LWDAAA,X2          * Add 3 to X2
               LCA  LYGAAA,0+X2        * Load data 201 into Stack
     * Push (LKGAAA:3)
               MA   LWDAAA,X2          * Add 3 to X2
               LCA  LKGAAA,0+X2        * Load data 02U into Stack
     * Pop (X1:3)
               LCA  0+X2,X1            * Load data in Stack into memory at X1
               MA   LZDAAA,X2          * Add -3 to X2
     * Pop (0+X1:3)
               LCA  0+X2,0+X1          * Load data in Stack into memory at 0+X1
               MA   LZDAAA,X2          * Add -3 to X2
     * End Assignment (__putchar_pos = 201)
     * Start asm block
               W    
     * End asm block
     LOBAAA    NOP                     * Return
               BCE  LMBAAA,RF,R        * Jump back to caller
     * EndBlock [Block LOBAAA:LMBAAA]
     ***************************************

     LTBAAA    NOP                     * Executed when True
     * If [if ((__putchar_pos == 333) then [Block LUBAAA:LMBAAA]]
     * Equal (==) (__putchar_pos == 333)
     * Static Variable (__putchar_pos : 4024)
     * Push (4024:3)
               MA   LWDAAA,X2          * Add 3 to X2
               LCA  4024,0+X2          * Load data 4024 into Stack
     * Constant (333 : LBHAAA)
     * Push (LBHAAA:3)
               MA   LWDAAA,X2          * Add 3 to X2
               LCA  LBHAAA,0+X2        * Load data 333 into Stack
               C    0+X2,15997+X2      * Compare
     * Pop (3)
               MA   LZDAAA,X2          * Add -3 to X2
     * Pop (3)
               MA   LZDAAA,X2          * Add -3 to X2
     * Push (LEEAAA:5)
               MA   LDEAAA,X2          * Add 5 to X2
               LCA  LEEAAA,0+X2        * Load data 00000 into Stack
               BE   LZGAAA             * Jump if equal
               B    LAHAAA             * Jump to End
     LZGAAA    MCW  LCEAAA,0+X2        * Equal
     LAHAAA    NOP                     * End of Equal
               MCS  0+X2,0+X2          * Clear WM
     * Pop (5)
               MA   LFEAAA,X2          * Add -5 to X2
               BCE  LVBAAA,5+X2,       * Jump when False

     ***************************************
     * BeginBlock [Block LUBAAA:LMBAAA]
     * Assignment (__putchar_last = __putchar_pos)
     * Static Variable (__putchar_pos : 4024)
     * Push (4024:3)
               MA   LWDAAA,X2          * Add 3 to X2
               LCA  4024,0+X2          * Load data 4024 into Stack
     * Push (LXGAAA:3)
               MA   LWDAAA,X2          * Add 3 to X2
               LCA  LXGAAA,0+X2        * Load data 02X into Stack
     * Pop (X1:3)
               LCA  0+X2,X1            * Load data in Stack into memory at X1
               MA   LZDAAA,X2          * Add -3 to X2
     * Pop (0+X1:3)
               LCA  0+X2,0+X1          * Load data in Stack into memory at 0+X1
               MA   LZDAAA,X2          * Add -3 to X2
     * End Assignment (__putchar_last = __putchar_pos)
     * Assignment (__putchar_pos = 201)
     * Constant (201 : LYGAAA)
     * Push (LYGAAA:3)
               MA   LWDAAA,X2          * Add 3 to X2
               LCA  LYGAAA,0+X2        * Load data 201 into Stack
     * Push (LKGAAA:3)
               MA   LWDAAA,X2          * Add 3 to X2
               LCA  LKGAAA,0+X2        * Load data 02U into Stack
     * Pop (X1:3)
               LCA  0+X2,X1            * Load data in Stack into memory at X1
               MA   LZDAAA,X2          * Add -3 to X2
     * Pop (0+X1:3)
               LCA  0+X2,0+X1          * Load data in Stack into memory at 0+X1
               MA   LZDAAA,X2          * Add -3 to X2
     * End Assignment (__putchar_pos = 201)
     * Start asm block
               W    
     * End asm block
     LUBAAA    NOP                     * Return
               BCE  LMBAAA,RF,R        * Jump back to caller
     * EndBlock [Block LUBAAA:LMBAAA]
     ***************************************

     LVBAAA    NOP                     * Executed when False
     LMBAAA    NOP                     * Return
               MA   LZDAAA,X2          * Reserve 3 bytes of space on Stack
               MCW  @ @,RF             * Clear the Return Flag
     * EndBlock [Block LMBAAA:null]
     ***************************************

               LCA  3+X3,X1            * Load return address to X1
               B    0+X1               * Jump back to caller

     ********************************************************************************
     * End Function : putchar
     ********************************************************************************

     ********************************************************************************
     * Function : strlen
     ********************************************************************************
     LFAAAA    SBR  3+X3               * Save return address in register B to local frame (X3)
               SW   1+X3               * Set the WM
               CW   2+X3               * Clean WM
               CW   3+X3               * Clean WM

     ***************************************
     * BeginBlock [Block LGAAAA:null]
               LCA  LCHAAA,8+X3        * Load int -1 into memory 8+X3
               MA   LDHAAA,X2          * Reserve 8 bytes of space on Stack
     * While [while (((str[(++len)]) != '\0')) [] top:LHAAAA bottom:LIAAAA]
     LHAAAA    NOP                     * Top of the loop
     * NotEqual (!=) ((str[(++len)]) != '\0')
     * SubScript (str[(++len)])
     * Parameter Variable (str : 15997+X3)
     * Push (15997+X3:3)
               MA   LWDAAA,X2          * Add 3 to X2
               LCA  15997+X3,0+X2      * Load data 15997+X3 into Stack
     * PreIncrement((++len)
     * Push (LDHAAA:3)
               MA   LWDAAA,X2          * Add 3 to X2
               LCA  LDHAAA,0+X2        * Load data 008 into Stack
               MA   X3,0+X2
     * Pop (X1:3)
               LCA  0+X2,X1            * Load data in Stack into memory at X1
               MA   LZDAAA,X2          * Add -3 to X2
               A    LCEAAA,0+X1        * PreIncrement variable pointed by X1
     * Push (0+X1:5)
               MA   LDEAAA,X2          * Add 5 to X2
               LCA  0+X1,0+X2          * Load data 0+X1 into Stack
     * Put raw index on the stack
     * Push (LCEAAA:5)
               MA   LDEAAA,X2          * Add 5 to X2
               LCA  LCEAAA,0+X2        * Load data 00001 into Stack
               M    15995+X2,6+X2
               SW   2+X2
               LCA  6+X2,15995+X2
     * Pop (5)
               MA   LFEAAA,X2          * Add -5 to X2
     * Stack top is now array index
               B    LAGAAA             * Jump to snippet number_to_pointer
               MA   0+X2,15997+X2
     * Pop (3)
               MA   LZDAAA,X2          * Add -3 to X2
     * Stack top is location in array now
     * End SubScript (str[(++len)])
     * Pop (X1:3)
               LCA  0+X2,X1            * Load data in Stack into memory at X1
               MA   LZDAAA,X2          * Add -3 to X2
     * Push (0+X1:1)
               MA   LAEAAA,X2          * Add 1 to X2
               LCA  0+X1,0+X2          * Load data 0+X1 into Stack
     * Constant ('\0' : EOS)
     * Push (EOS:1)
               MA   LAEAAA,X2          * Add 1 to X2
               LCA  EOS,0+X2           * Load data EOS into Stack
               C    0+X2,15999+X2      * Compare
     * Pop (1)
               MA   LBEAAA,X2          * Add -1 to X2
     * Pop (1)
               MA   LBEAAA,X2          * Add -1 to X2
     * Push (LCEAAA:5)
               MA   LDEAAA,X2          * Add 5 to X2
               LCA  LCEAAA,0+X2        * Load data 00001 into Stack
               BE   LEHAAA             * Jump if equal
               B    LFHAAA             * Jump to End
     LEHAAA    MCW  LEEAAA,0+X2        * Equal: Set stack location to 0
     LFHAAA    NOP                     * End of NotEqual
               MCS  0+X2,0+X2          * Clear WM
     * Pop (5)
               MA   LFEAAA,X2          * Add -5 to X2
               BCE  LIAAAA,5+X2,       * Jump to bottom
               B    LHAAAA             * Jump to top
     LIAAAA    NOP                     * Bottom of the while loop

     * Local Variable (len : 8+X3)
     * Push (8+X3:5)
               MA   LDEAAA,X2          * Add 5 to X2
               LCA  8+X3,0+X2          * Load data 8+X3 into Stack
     * Pop (15994+X3:5)
               LCA  0+X2,15994+X3      * Load data in Stack into memory at 15994+X3
               MA   LFEAAA,X2          * Add -5 to X2
     * Set the return flag, so we know do deallocate our stack
               MCW  @R@,RF             * PUT R into location RF
               B    LGAAAA             * Jump back to caller
     LGAAAA    NOP                     * Return
               MA   LOFAAA,X2          * Reserve 8 bytes of space on Stack
               MCW  @ @,RF             * Clear the Return Flag
     * EndBlock [Block LGAAAA:null]
     ***************************************

               LCA  3+X3,X1            * Load return address to X1
               B    0+X1               * Jump back to caller

     ********************************************************************************
     * End Function : strlen
     ********************************************************************************

     ********************************************************************************
     * Function : genRand
     ********************************************************************************
     LBAAAA    SBR  3+X3               * Save return address in register B to local frame (X3)
               SW   1+X3               * Set the WM
               CW   2+X3               * Clean WM
               CW   3+X3               * Clean WM

     ***************************************
     * BeginBlock [Block LCAAAA:null]
               MA   LWDAAA,X2          * Reserve 3 bytes of space on Stack
     * Assignment (seed = (((42 * seed) + 19) % 100000))
     * Modulo (%) (((42 * seed) + 19) % 100000)
     * Constant (100000 : LGHAAA)
     * Push (LGHAAA:5)
               MA   LDEAAA,X2          * Add 5 to X2
               LCA  LGHAAA,0+X2        * Load data 100000 into Stack
     * Addition ((42 * seed) + 19)
     * Multiply (42 * seed)
     * Constant (42 : LHHAAA)
     * Push (LHHAAA:5)
               MA   LDEAAA,X2          * Add 5 to X2
               LCA  LHHAAA,0+X2        * Load data 00042 into Stack
     * Static Variable (seed : 4004)
     * Push (4004:5)
               MA   LDEAAA,X2          * Add 5 to X2
               LCA  4004,0+X2          * Load data 4004 into Stack
               M    15995+X2,6+X2      * Multiply
               SW   2+X2
               LCA  6+X2,15995+X2
     * Pop (5)
               MA   LFEAAA,X2          * Add -5 to X2
     * Constant (19 : LIHAAA)
     * Push (LIHAAA:5)
               MA   LDEAAA,X2          * Add 5 to X2
               LCA  LIHAAA,0+X2        * Load data 00019 into Stack
               A    0+X2,15995+X2      * Add
     * Pop (5)
               MA   LFEAAA,X2          * Add -5 to X2
               B    LSFAAA             * Jump to snippet SNIP_DIV
     * Pop (5)
               MA   LFEAAA,X2          * Add -5 to X2
     * Push (LJHAAA:3)
               MA   LWDAAA,X2          * Add 3 to X2
               LCA  LJHAAA,0+X2        * Load data 00U into Stack
     * Pop (X1:3)
               LCA  0+X2,X1            * Load data in Stack into memory at X1
               MA   LZDAAA,X2          * Add -3 to X2
     * Pop (0+X1:5)
               LCA  0+X2,0+X1          * Load data in Stack into memory at 0+X1
               MA   LFEAAA,X2          * Add -5 to X2
     * End Assignment (seed = (((42 * seed) + 19) % 100000))
     * Static Variable (seed : 4004)
     * Push (4004:5)
               MA   LDEAAA,X2          * Add 5 to X2
               LCA  4004,0+X2          * Load data 4004 into Stack
     * Pop (15997+X3:5)
               LCA  0+X2,15997+X3      * Load data in Stack into memory at 15997+X3
               MA   LFEAAA,X2          * Add -5 to X2
     * Set the return flag, so we know do deallocate our stack
               MCW  @R@,RF             * PUT R into location RF
               B    LCAAAA             * Jump back to caller
     LCAAAA    NOP                     * Return
               MA   LZDAAA,X2          * Reserve 3 bytes of space on Stack
               MCW  @ @,RF             * Clear the Return Flag
     * EndBlock [Block LCAAAA:null]
     ***************************************

               LCA  3+X3,X1            * Load return address to X1
               B    0+X1               * Jump back to caller

     ********************************************************************************
     * End Function : genRand
     ********************************************************************************

     ********************************************************************************
     * Function : func
     ********************************************************************************
     LSDAAA    SBR  3+X3               * Save return address in register B to local frame (X3)
               SW   1+X3               * Set the WM
               CW   2+X3               * Clean WM
               CW   3+X3               * Clean WM

     ***************************************
     * BeginBlock [Block LTDAAA:null]
               LCA  LKHAAA,13+X3       * Load int 111 into memory 13+X3
               MA   LLHAAA,X2          * Reserve 13 bytes of space on Stack
     * Function Call printf(CONST_STR_LITERAL-8, a2)
     * Push (5)
               MA   LDEAAA,X2          * Add 5 to X2
     * Parameter Variable (a2 : 15997+X3)
     * Push (15997+X3:5)
               MA   LDEAAA,X2          * Add 5 to X2
               LCA  15997+X3,0+X2      * Load data 15997+X3 into Stack
     * Static Array (CONST_STR_LITERAL-8:char [7])
     * Push (LMHAAA:3)
               MA   LWDAAA,X2          * Add 3 to X2
               LCA  LMHAAA,0+X2        * Load data 03/ into Stack
     * Push (X3:3)
               MA   LWDAAA,X2          * Add 3 to X2
               LCA  X3,0+X2            * Load data X3 into Stack
               MCW  X2,X3              * Copy X2 into X3
               B    LPCAAA             * Jump to function printf
     * Pop (X3:3)
               LCA  0+X2,X3            * Load data in Stack into memory at X3
               MA   LZDAAA,X2          * Add -3 to X2
     * Pop (3)
               MA   LZDAAA,X2          * Add -3 to X2
     * Pop (5)
               MA   LFEAAA,X2          * Add -5 to X2
     * Pop (5)
               MA   LFEAAA,X2          * Add -5 to X2
     * Function Call printf(CONST_STR_LITERAL-9, b2)
     * Push (5)
               MA   LDEAAA,X2          * Add 5 to X2
     * Parameter Variable (b2 : 15992+X3)
     * Push (15992+X3:5)
               MA   LDEAAA,X2          * Add 5 to X2
               LCA  15992+X3,0+X2      * Load data 15992+X3 into Stack
     * Static Array (CONST_STR_LITERAL-9:char [7])
     * Push (LNHAAA:3)
               MA   LWDAAA,X2          * Add 3 to X2
               LCA  LNHAAA,0+X2        * Load data 03Y into Stack
     * Push (X3:3)
               MA   LWDAAA,X2          * Add 3 to X2
               LCA  X3,0+X2            * Load data X3 into Stack
               MCW  X2,X3              * Copy X2 into X3
               B    LPCAAA             * Jump to function printf
     * Pop (X3:3)
               LCA  0+X2,X3            * Load data in Stack into memory at X3
               MA   LZDAAA,X2          * Add -3 to X2
     * Pop (3)
               MA   LZDAAA,X2          * Add -3 to X2
     * Pop (5)
               MA   LFEAAA,X2          * Add -5 to X2
     * Pop (5)
               MA   LFEAAA,X2          * Add -5 to X2
     * Assignment (d = (a2 + b2))
     * Addition (a2 + b2)
     * Parameter Variable (a2 : 15997+X3)
     * Push (15997+X3:5)
               MA   LDEAAA,X2          * Add 5 to X2
               LCA  15997+X3,0+X2      * Load data 15997+X3 into Stack
     * Parameter Variable (b2 : 15992+X3)
     * Push (15992+X3:5)
               MA   LDEAAA,X2          * Add 5 to X2
               LCA  15992+X3,0+X2      * Load data 15992+X3 into Stack
               A    0+X2,15995+X2      * Add
     * Pop (5)
               MA   LFEAAA,X2          * Add -5 to X2
     * Push (LDHAAA:3)
               MA   LWDAAA,X2          * Add 3 to X2
               LCA  LDHAAA,0+X2        * Load data 008 into Stack
               MA   X3,0+X2
     * Pop (X1:3)
               LCA  0+X2,X1            * Load data in Stack into memory at X1
               MA   LZDAAA,X2          * Add -3 to X2
     * Pop (0+X1:5)
               LCA  0+X2,0+X1          * Load data in Stack into memory at 0+X1
               MA   LFEAAA,X2          * Add -5 to X2
     * End Assignment (d = (a2 + b2))
     * Function Call printf(CONST_STR_LITERAL-10, d)
     * Push (5)
               MA   LDEAAA,X2          * Add 5 to X2
     * Local Variable (d : 8+X3)
     * Push (8+X3:5)
               MA   LDEAAA,X2          * Add 5 to X2
               LCA  8+X3,0+X2          * Load data 8+X3 into Stack
     * Static Array (CONST_STR_LITERAL-10:char [6])
     * Push (LOHAAA:3)
               MA   LWDAAA,X2          * Add 3 to X2
               LCA  LOHAAA,0+X2        * Load data 04V into Stack
     * Push (X3:3)
               MA   LWDAAA,X2          * Add 3 to X2
               LCA  X3,0+X2            * Load data X3 into Stack
               MCW  X2,X3              * Copy X2 into X3
               B    LPCAAA             * Jump to function printf
     * Pop (X3:3)
               LCA  0+X2,X3            * Load data in Stack into memory at X3
               MA   LZDAAA,X2          * Add -3 to X2
     * Pop (3)
               MA   LZDAAA,X2          * Add -3 to X2
     * Pop (5)
               MA   LFEAAA,X2          * Add -5 to X2
     * Pop (5)
               MA   LFEAAA,X2          * Add -5 to X2
     * Function Call printf(CONST_STR_LITERAL-11, f)
     * Push (5)
               MA   LDEAAA,X2          * Add 5 to X2
     * Local Variable (f : 13+X3)
     * Push (13+X3:5)
               MA   LDEAAA,X2          * Add 5 to X2
               LCA  13+X3,0+X2         * Load data 13+X3 into Stack
     * Static Array (CONST_STR_LITERAL-11:char [6])
     * Push (LPHAAA:3)
               MA   LWDAAA,X2          * Add 3 to X2
               LCA  LPHAAA,0+X2        * Load data 05/ into Stack
     * Push (X3:3)
               MA   LWDAAA,X2          * Add 3 to X2
               LCA  X3,0+X2            * Load data X3 into Stack
               MCW  X2,X3              * Copy X2 into X3
               B    LPCAAA             * Jump to function printf
     * Pop (X3:3)
               LCA  0+X2,X3            * Load data in Stack into memory at X3
               MA   LZDAAA,X2          * Add -3 to X2
     * Pop (3)
               MA   LZDAAA,X2          * Add -3 to X2
     * Pop (5)
               MA   LFEAAA,X2          * Add -5 to X2
     * Pop (5)
               MA   LFEAAA,X2          * Add -5 to X2
     * Constant (0 : LEEAAA)
     * Push (LEEAAA:5)
               MA   LDEAAA,X2          * Add 5 to X2
               LCA  LEEAAA,0+X2        * Load data 00000 into Stack
     * Pop (15987+X3:5)
               LCA  0+X2,15987+X3      * Load data in Stack into memory at 15987+X3
               MA   LFEAAA,X2          * Add -5 to X2
     * Set the return flag, so we know do deallocate our stack
               MCW  @R@,RF             * PUT R into location RF
               B    LTDAAA             * Jump back to caller
     LTDAAA    NOP                     * Return
               MA   LQHAAA,X2          * Reserve 13 bytes of space on Stack
               MCW  @ @,RF             * Clear the Return Flag
     * EndBlock [Block LTDAAA:null]
     ***************************************

               LCA  3+X3,X1            * Load return address to X1
               B    0+X1               * Jump back to caller

     ********************************************************************************
     * End Function : func
     ********************************************************************************

     ********************************************************************************
     * Function : main
     ********************************************************************************
     LUDAAA    SBR  3+X3               * Save return address in register B to local frame (X3)
               SW   1+X3               * Set the WM
               CW   2+X3               * Clean WM
               CW   3+X3               * Clean WM

     ***************************************
     * BeginBlock [Block LVDAAA:null]
               LCA  LRHAAA,6+X3        * Load *char 4086 into memory 6+X3
               LCA  LCEAAA,11+X3       * Load int 1 into memory 11+X3
               LCA  LCEAAA,16+X3       * Load int 1 into memory 16+X3
               LCA  LKHAAA,21+X3       * Load int 111 into memory 21+X3
               MA   LSHAAA,X2          * Reserve 21 bytes of space on Stack
     * Function Call printf(CONST_STR_LITERAL-15, c3)
     * Push (5)
               MA   LDEAAA,X2          * Add 5 to X2
     * Local Variable (c3 : 6+X3)
     * Push (6+X3:3)
               MA   LWDAAA,X2          * Add 3 to X2
               LCA  6+X3,0+X2          * Load data 6+X3 into Stack
     * Static Array (CONST_STR_LITERAL-15:char [7])
     * Push (LTHAAA:3)
               MA   LWDAAA,X2          * Add 3 to X2
               LCA  LTHAAA,0+X2        * Load data 09V into Stack
     * Push (X3:3)
               MA   LWDAAA,X2          * Add 3 to X2
               LCA  X3,0+X2            * Load data X3 into Stack
               MCW  X2,X3              * Copy X2 into X3
               B    LPCAAA             * Jump to function printf
     * Pop (X3:3)
               LCA  0+X2,X3            * Load data in Stack into memory at X3
               MA   LZDAAA,X2          * Add -3 to X2
     * Pop (3)
               MA   LZDAAA,X2          * Add -3 to X2
     * Pop (3)
               MA   LZDAAA,X2          * Add -3 to X2
     * Pop (5)
               MA   LFEAAA,X2          * Add -5 to X2
     * Function Call printf(CONST_STR_LITERAL-16, ((int) c3))
     * Push (5)
               MA   LDEAAA,X2          * Add 5 to X2
     * Local Variable (c3 : 6+X3)
     * Push (6+X3:3)
               MA   LWDAAA,X2          * Add 3 to X2
               LCA  6+X3,0+X2          * Load data 6+X3 into Stack
     * Cast Pointer(c3) to Number
               B    LLGAAA             * Jump to snippet pointer_to_number
     * Static Array (CONST_STR_LITERAL-16:char [7])
     * Push (LUHAAA:3)
               MA   LWDAAA,X2          * Add 3 to X2
               LCA  LUHAAA,0+X2        * Load data 10S into Stack
     * Push (X3:3)
               MA   LWDAAA,X2          * Add 3 to X2
               LCA  X3,0+X2            * Load data X3 into Stack
               MCW  X2,X3              * Copy X2 into X3
               B    LPCAAA             * Jump to function printf
     * Pop (X3:3)
               LCA  0+X2,X3            * Load data in Stack into memory at X3
               MA   LZDAAA,X2          * Add -3 to X2
     * Pop (3)
               MA   LZDAAA,X2          * Add -3 to X2
     * Pop (5)
               MA   LFEAAA,X2          * Add -5 to X2
     * Pop (5)
               MA   LFEAAA,X2          * Add -5 to X2
     * Function Call printf(CONST_STR_LITERAL-17, c)
     * Push (5)
               MA   LDEAAA,X2          * Add 5 to X2
     * Static Variable (c : 4064)
     * Push (4064:3)
               MA   LWDAAA,X2          * Add 3 to X2
               LCA  4064,0+X2          * Load data 4064 into Stack
     * Static Array (CONST_STR_LITERAL-17:char [6])
     * Push (LVHAAA:3)
               MA   LWDAAA,X2          * Add 3 to X2
               LCA  LVHAAA,0+X2        * Load data 10Z into Stack
     * Push (X3:3)
               MA   LWDAAA,X2          * Add 3 to X2
               LCA  X3,0+X2            * Load data X3 into Stack
               MCW  X2,X3              * Copy X2 into X3
               B    LPCAAA             * Jump to function printf
     * Pop (X3:3)
               LCA  0+X2,X3            * Load data in Stack into memory at X3
               MA   LZDAAA,X2          * Add -3 to X2
     * Pop (3)
               MA   LZDAAA,X2          * Add -3 to X2
     * Pop (3)
               MA   LZDAAA,X2          * Add -3 to X2
     * Pop (5)
               MA   LFEAAA,X2          * Add -5 to X2
     * Function Call printf(CONST_STR_LITERAL-18, ((int) c))
     * Push (5)
               MA   LDEAAA,X2          * Add 5 to X2
     * Static Variable (c : 4064)
     * Push (4064:3)
               MA   LWDAAA,X2          * Add 3 to X2
               LCA  4064,0+X2          * Load data 4064 into Stack
     * Cast Pointer(c) to Number
               B    LLGAAA             * Jump to snippet pointer_to_number
     * Static Array (CONST_STR_LITERAL-18:char [6])
     * Push (LWHAAA:3)
               MA   LWDAAA,X2          * Add 3 to X2
               LCA  LWHAAA,0+X2        * Load data 11V into Stack
     * Push (X3:3)
               MA   LWDAAA,X2          * Add 3 to X2
               LCA  X3,0+X2            * Load data X3 into Stack
               MCW  X2,X3              * Copy X2 into X3
               B    LPCAAA             * Jump to function printf
     * Pop (X3:3)
               LCA  0+X2,X3            * Load data in Stack into memory at X3
               MA   LZDAAA,X2          * Add -3 to X2
     * Pop (3)
               MA   LZDAAA,X2          * Add -3 to X2
     * Pop (5)
               MA   LFEAAA,X2          * Add -5 to X2
     * Pop (5)
               MA   LFEAAA,X2          * Add -5 to X2
     * Function Call printf(CONST_STR_LITERAL-19, c2)
     * Push (5)
               MA   LDEAAA,X2          * Add 5 to X2
     * Static Variable (c2 : 4076)
     * Push (4076:3)
               MA   LWDAAA,X2          * Add 3 to X2
               LCA  4076,0+X2          * Load data 4076 into Stack
     * Static Array (CONST_STR_LITERAL-19:char [7])
     * Push (LXHAAA:3)
               MA   LWDAAA,X2          * Add 3 to X2
               LCA  LXHAAA,0+X2        * Load data 12/ into Stack
     * Push (X3:3)
               MA   LWDAAA,X2          * Add 3 to X2
               LCA  X3,0+X2            * Load data X3 into Stack
               MCW  X2,X3              * Copy X2 into X3
               B    LPCAAA             * Jump to function printf
     * Pop (X3:3)
               LCA  0+X2,X3            * Load data in Stack into memory at X3
               MA   LZDAAA,X2          * Add -3 to X2
     * Pop (3)
               MA   LZDAAA,X2          * Add -3 to X2
     * Pop (3)
               MA   LZDAAA,X2          * Add -3 to X2
     * Pop (5)
               MA   LFEAAA,X2          * Add -5 to X2
     * Function Call printf(CONST_STR_LITERAL-20, ((int) c2))
     * Push (5)
               MA   LDEAAA,X2          * Add 5 to X2
     * Static Variable (c2 : 4076)
     * Push (4076:3)
               MA   LWDAAA,X2          * Add 3 to X2
               LCA  4076,0+X2          * Load data 4076 into Stack
     * Cast Pointer(c2) to Number
               B    LLGAAA             * Jump to snippet pointer_to_number
     * Static Array (CONST_STR_LITERAL-20:char [7])
     * Push (LYHAAA:3)
               MA   LWDAAA,X2          * Add 3 to X2
               LCA  LYHAAA,0+X2        * Load data 12Y into Stack
     * Push (X3:3)
               MA   LWDAAA,X2          * Add 3 to X2
               LCA  X3,0+X2            * Load data X3 into Stack
               MCW  X2,X3              * Copy X2 into X3
               B    LPCAAA             * Jump to function printf
     * Pop (X3:3)
               LCA  0+X2,X3            * Load data in Stack into memory at X3
               MA   LZDAAA,X2          * Add -3 to X2
     * Pop (3)
               MA   LZDAAA,X2          * Add -3 to X2
     * Pop (5)
               MA   LFEAAA,X2          * Add -5 to X2
     * Pop (5)
               MA   LFEAAA,X2          * Add -5 to X2
     * Assignment ((c[3]) = 'B')
     * Constant ('B' : @B@)
     * Push (@B@:1)
               MA   LAEAAA,X2          * Add 1 to X2
               LCA  @B@,0+X2           * Load data B into Stack
     * SubScript (c[3])
     * Static Variable (c : 4064)
     * Push (4064:3)
               MA   LWDAAA,X2          * Add 3 to X2
               LCA  4064,0+X2          * Load data 4064 into Stack
               A    LAIAAA,0+X2        * Add offset 3 to point element 3
     * End SubScript (c[3])
     * Pop (X1:3)
               LCA  0+X2,X1            * Load data in Stack into memory at X1
               MA   LZDAAA,X2          * Add -3 to X2
     * Pop (0+X1:1)
               LCA  0+X2,0+X1          * Load data in Stack into memory at 0+X1
               MA   LBEAAA,X2          * Add -1 to X2
     * End Assignment ((c[3]) = 'B')
     * Function Call printf(CONST_STR_LITERAL-21, c)
     * Push (5)
               MA   LDEAAA,X2          * Add 5 to X2
     * Static Variable (c : 4064)
     * Push (4064:3)
               MA   LWDAAA,X2          * Add 3 to X2
               LCA  4064,0+X2          * Load data 4064 into Stack
     * Static Array (CONST_STR_LITERAL-21:char [6])
     * Push (LBIAAA:3)
               MA   LWDAAA,X2          * Add 3 to X2
               LCA  LBIAAA,0+X2        * Load data 13V into Stack
     * Push (X3:3)
               MA   LWDAAA,X2          * Add 3 to X2
               LCA  X3,0+X2            * Load data X3 into Stack
               MCW  X2,X3              * Copy X2 into X3
               B    LPCAAA             * Jump to function printf
     * Pop (X3:3)
               LCA  0+X2,X3            * Load data in Stack into memory at X3
               MA   LZDAAA,X2          * Add -3 to X2
     * Pop (3)
               MA   LZDAAA,X2          * Add -3 to X2
     * Pop (3)
               MA   LZDAAA,X2          * Add -3 to X2
     * Pop (5)
               MA   LFEAAA,X2          * Add -5 to X2
     * Function Call printf(CONST_STR_LITERAL-22, ((int) c))
     * Push (5)
               MA   LDEAAA,X2          * Add 5 to X2
     * Static Variable (c : 4064)
     * Push (4064:3)
               MA   LWDAAA,X2          * Add 3 to X2
               LCA  4064,0+X2          * Load data 4064 into Stack
     * Cast Pointer(c) to Number
               B    LLGAAA             * Jump to snippet pointer_to_number
     * Static Array (CONST_STR_LITERAL-22:char [6])
     * Push (LCIAAA:3)
               MA   LWDAAA,X2          * Add 3 to X2
               LCA  LCIAAA,0+X2        * Load data 14/ into Stack
     * Push (X3:3)
               MA   LWDAAA,X2          * Add 3 to X2
               LCA  X3,0+X2            * Load data X3 into Stack
               MCW  X2,X3              * Copy X2 into X3
               B    LPCAAA             * Jump to function printf
     * Pop (X3:3)
               LCA  0+X2,X3            * Load data in Stack into memory at X3
               MA   LZDAAA,X2          * Add -3 to X2
     * Pop (3)
               MA   LZDAAA,X2          * Add -3 to X2
     * Pop (5)
               MA   LFEAAA,X2          * Add -5 to X2
     * Pop (5)
               MA   LFEAAA,X2          * Add -5 to X2
     * Function Call printf(CONST_STR_LITERAL-23, c2)
     * Push (5)
               MA   LDEAAA,X2          * Add 5 to X2
     * Static Variable (c2 : 4076)
     * Push (4076:3)
               MA   LWDAAA,X2          * Add 3 to X2
               LCA  4076,0+X2          * Load data 4076 into Stack
     * Static Array (CONST_STR_LITERAL-23:char [7])
     * Push (LDIAAA:3)
               MA   LWDAAA,X2          * Add 3 to X2
               LCA  LDIAAA,0+X2        * Load data 14X into Stack
     * Push (X3:3)
               MA   LWDAAA,X2          * Add 3 to X2
               LCA  X3,0+X2            * Load data X3 into Stack
               MCW  X2,X3              * Copy X2 into X3
               B    LPCAAA             * Jump to function printf
     * Pop (X3:3)
               LCA  0+X2,X3            * Load data in Stack into memory at X3
               MA   LZDAAA,X2          * Add -3 to X2
     * Pop (3)
               MA   LZDAAA,X2          * Add -3 to X2
     * Pop (3)
               MA   LZDAAA,X2          * Add -3 to X2
     * Pop (5)
               MA   LFEAAA,X2          * Add -5 to X2
     * Function Call printf(CONST_STR_LITERAL-24, ((int) c2))
     * Push (5)
               MA   LDEAAA,X2          * Add 5 to X2
     * Static Variable (c2 : 4076)
     * Push (4076:3)
               MA   LWDAAA,X2          * Add 3 to X2
               LCA  4076,0+X2          * Load data 4076 into Stack
     * Cast Pointer(c2) to Number
               B    LLGAAA             * Jump to snippet pointer_to_number
     * Static Array (CONST_STR_LITERAL-24:char [7])
     * Push (LEIAAA:3)
               MA   LWDAAA,X2          * Add 3 to X2
               LCA  LEIAAA,0+X2        * Load data 15U into Stack
     * Push (X3:3)
               MA   LWDAAA,X2          * Add 3 to X2
               LCA  X3,0+X2            * Load data X3 into Stack
               MCW  X2,X3              * Copy X2 into X3
               B    LPCAAA             * Jump to function printf
     * Pop (X3:3)
               LCA  0+X2,X3            * Load data in Stack into memory at X3
               MA   LZDAAA,X2          * Add -3 to X2
     * Pop (3)
               MA   LZDAAA,X2          * Add -3 to X2
     * Pop (5)
               MA   LFEAAA,X2          * Add -5 to X2
     * Pop (5)
               MA   LFEAAA,X2          * Add -5 to X2
     * Function Call printf(CONST_STR_LITERAL-25, c3)
     * Push (5)
               MA   LDEAAA,X2          * Add 5 to X2
     * Local Variable (c3 : 6+X3)
     * Push (6+X3:3)
               MA   LWDAAA,X2          * Add 3 to X2
               LCA  6+X3,0+X2          * Load data 6+X3 into Stack
     * Static Array (CONST_STR_LITERAL-25:char [7])
     * Push (LFIAAA:3)
               MA   LWDAAA,X2          * Add 3 to X2
               LCA  LFIAAA,0+X2        * Load data 16/ into Stack
     * Push (X3:3)
               MA   LWDAAA,X2          * Add 3 to X2
               LCA  X3,0+X2            * Load data X3 into Stack
               MCW  X2,X3              * Copy X2 into X3
               B    LPCAAA             * Jump to function printf
     * Pop (X3:3)
               LCA  0+X2,X3            * Load data in Stack into memory at X3
               MA   LZDAAA,X2          * Add -3 to X2
     * Pop (3)
               MA   LZDAAA,X2          * Add -3 to X2
     * Pop (3)
               MA   LZDAAA,X2          * Add -3 to X2
     * Pop (5)
               MA   LFEAAA,X2          * Add -5 to X2
     * Function Call printf(CONST_STR_LITERAL-26, ((int) c3))
     * Push (5)
               MA   LDEAAA,X2          * Add 5 to X2
     * Local Variable (c3 : 6+X3)
     * Push (6+X3:3)
               MA   LWDAAA,X2          * Add 3 to X2
               LCA  6+X3,0+X2          * Load data 6+X3 into Stack
     * Cast Pointer(c3) to Number
               B    LLGAAA             * Jump to snippet pointer_to_number
     * Static Array (CONST_STR_LITERAL-26:char [7])
     * Push (LGIAAA:3)
               MA   LWDAAA,X2          * Add 3 to X2
               LCA  LGIAAA,0+X2        * Load data 16Y into Stack
     * Push (X3:3)
               MA   LWDAAA,X2          * Add 3 to X2
               LCA  X3,0+X2            * Load data X3 into Stack
               MCW  X2,X3              * Copy X2 into X3
               B    LPCAAA             * Jump to function printf
     * Pop (X3:3)
               LCA  0+X2,X3            * Load data in Stack into memory at X3
               MA   LZDAAA,X2          * Add -3 to X2
     * Pop (3)
               MA   LZDAAA,X2          * Add -3 to X2
     * Pop (5)
               MA   LFEAAA,X2          * Add -5 to X2
     * Pop (5)
               MA   LFEAAA,X2          * Add -5 to X2
     * Function Call printf(CONST_STR_LITERAL-27, x)
     * Push (5)
               MA   LDEAAA,X2          * Add 5 to X2
     * Static Variable (x : 4061)
     * Push (4061:5)
               MA   LDEAAA,X2          * Add 5 to X2
               LCA  4061,0+X2          * Load data 4061 into Stack
     * Static Array (CONST_STR_LITERAL-27:char [6])
     * Push (LHIAAA:3)
               MA   LWDAAA,X2          * Add 3 to X2
               LCA  LHIAAA,0+X2        * Load data 17V into Stack
     * Push (X3:3)
               MA   LWDAAA,X2          * Add 3 to X2
               LCA  X3,0+X2            * Load data X3 into Stack
               MCW  X2,X3              * Copy X2 into X3
               B    LPCAAA             * Jump to function printf
     * Pop (X3:3)
               LCA  0+X2,X3            * Load data in Stack into memory at X3
               MA   LZDAAA,X2          * Add -3 to X2
     * Pop (3)
               MA   LZDAAA,X2          * Add -3 to X2
     * Pop (5)
               MA   LFEAAA,X2          * Add -5 to X2
     * Pop (5)
               MA   LFEAAA,X2          * Add -5 to X2
     * Function Call printf(CONST_STR_LITERAL-28, e)
     * Push (5)
               MA   LDEAAA,X2          * Add 5 to X2
     * Local Variable (e : 21+X3)
     * Push (21+X3:5)
               MA   LDEAAA,X2          * Add 5 to X2
               LCA  21+X3,0+X2         * Load data 21+X3 into Stack
     * Static Array (CONST_STR_LITERAL-28:char [6])
     * Push (LIIAAA:3)
               MA   LWDAAA,X2          * Add 3 to X2
               LCA  LIIAAA,0+X2        * Load data 18/ into Stack
     * Push (X3:3)
               MA   LWDAAA,X2          * Add 3 to X2
               LCA  X3,0+X2            * Load data X3 into Stack
               MCW  X2,X3              * Copy X2 into X3
               B    LPCAAA             * Jump to function printf
     * Pop (X3:3)
               LCA  0+X2,X3            * Load data in Stack into memory at X3
               MA   LZDAAA,X2          * Add -3 to X2
     * Pop (3)
               MA   LZDAAA,X2          * Add -3 to X2
     * Pop (5)
               MA   LFEAAA,X2          * Add -5 to X2
     * Pop (5)
               MA   LFEAAA,X2          * Add -5 to X2
     * Assignment (x = 222)
     * Constant (222 : LJIAAA)
     * Push (LJIAAA:5)
               MA   LDEAAA,X2          * Add 5 to X2
               LCA  LJIAAA,0+X2        * Load data 00222 into Stack
     * Push (LKIAAA:3)
               MA   LWDAAA,X2          * Add 3 to X2
               LCA  LKIAAA,0+X2        * Load data 06/ into Stack
     * Pop (X1:3)
               LCA  0+X2,X1            * Load data in Stack into memory at X1
               MA   LZDAAA,X2          * Add -3 to X2
     * Pop (0+X1:5)
               LCA  0+X2,0+X1          * Load data in Stack into memory at 0+X1
               MA   LFEAAA,X2          * Add -5 to X2
     * End Assignment (x = 222)
     * Function Call printf(CONST_STR_LITERAL-29, e)
     * Push (5)
               MA   LDEAAA,X2          * Add 5 to X2
     * Local Variable (e : 21+X3)
     * Push (21+X3:5)
               MA   LDEAAA,X2          * Add 5 to X2
               LCA  21+X3,0+X2         * Load data 21+X3 into Stack
     * Static Array (CONST_STR_LITERAL-29:char [6])
     * Push (LLIAAA:3)
               MA   LWDAAA,X2          * Add 3 to X2
               LCA  LLIAAA,0+X2        * Load data 18X into Stack
     * Push (X3:3)
               MA   LWDAAA,X2          * Add 3 to X2
               LCA  X3,0+X2            * Load data X3 into Stack
               MCW  X2,X3              * Copy X2 into X3
               B    LPCAAA             * Jump to function printf
     * Pop (X3:3)
               LCA  0+X2,X3            * Load data in Stack into memory at X3
               MA   LZDAAA,X2          * Add -3 to X2
     * Pop (3)
               MA   LZDAAA,X2          * Add -3 to X2
     * Pop (5)
               MA   LFEAAA,X2          * Add -5 to X2
     * Pop (5)
               MA   LFEAAA,X2          * Add -5 to X2
     * Function Call printf(CONST_STR_LITERAL-30, x)
     * Push (5)
               MA   LDEAAA,X2          * Add 5 to X2
     * Static Variable (x : 4061)
     * Push (4061:5)
               MA   LDEAAA,X2          * Add 5 to X2
               LCA  4061,0+X2          * Load data 4061 into Stack
     * Static Array (CONST_STR_LITERAL-30:char [6])
     * Push (LMIAAA:3)
               MA   LWDAAA,X2          * Add 3 to X2
               LCA  LMIAAA,0+X2        * Load data 19T into Stack
     * Push (X3:3)
               MA   LWDAAA,X2          * Add 3 to X2
               LCA  X3,0+X2            * Load data X3 into Stack
               MCW  X2,X3              * Copy X2 into X3
               B    LPCAAA             * Jump to function printf
     * Pop (X3:3)
               LCA  0+X2,X3            * Load data in Stack into memory at X3
               MA   LZDAAA,X2          * Add -3 to X2
     * Pop (3)
               MA   LZDAAA,X2          * Add -3 to X2
     * Pop (5)
               MA   LFEAAA,X2          * Add -5 to X2
     * Pop (5)
               MA   LFEAAA,X2          * Add -5 to X2
     * Function Call printf(CONST_STR_LITERAL-31, a, b)
     * Push (5)
               MA   LDEAAA,X2          * Add 5 to X2
     * Local Variable (b : 16+X3)
     * Push (16+X3:5)
               MA   LDEAAA,X2          * Add 5 to X2
               LCA  16+X3,0+X2         * Load data 16+X3 into Stack
     * Local Variable (a : 11+X3)
     * Push (11+X3:5)
               MA   LDEAAA,X2          * Add 5 to X2
               LCA  11+X3,0+X2         * Load data 11+X3 into Stack
     * Static Array (CONST_STR_LITERAL-31:char [11])
     * Push (LNIAAA:3)
               MA   LWDAAA,X2          * Add 3 to X2
               LCA  LNIAAA,0+X2        * Load data 19Z into Stack
     * Push (X3:3)
               MA   LWDAAA,X2          * Add 3 to X2
               LCA  X3,0+X2            * Load data X3 into Stack
               MCW  X2,X3              * Copy X2 into X3
               B    LPCAAA             * Jump to function printf
     * Pop (X3:3)
               LCA  0+X2,X3            * Load data in Stack into memory at X3
               MA   LZDAAA,X2          * Add -3 to X2
     * Pop (3)
               MA   LZDAAA,X2          * Add -3 to X2
     * Pop (5)
               MA   LFEAAA,X2          * Add -5 to X2
     * Pop (5)
               MA   LFEAAA,X2          * Add -5 to X2
     * Pop (5)
               MA   LFEAAA,X2          * Add -5 to X2
     * Assignment (a = 2)
     * Constant (2 : LOIAAA)
     * Push (LOIAAA:5)
               MA   LDEAAA,X2          * Add 5 to X2
               LCA  LOIAAA,0+X2        * Load data 00002 into Stack
     * Push (LGEAAA:3)
               MA   LWDAAA,X2          * Add 3 to X2
               LCA  LGEAAA,0+X2        * Load data 011 into Stack
               MA   X3,0+X2
     * Pop (X1:3)
               LCA  0+X2,X1            * Load data in Stack into memory at X1
               MA   LZDAAA,X2          * Add -3 to X2
     * Pop (0+X1:5)
               LCA  0+X2,0+X1          * Load data in Stack into memory at 0+X1
               MA   LFEAAA,X2          * Add -5 to X2
     * End Assignment (a = 2)
     * Function Call printf(CONST_STR_LITERAL-32, a, b)
     * Push (5)
               MA   LDEAAA,X2          * Add 5 to X2
     * Local Variable (b : 16+X3)
     * Push (16+X3:5)
               MA   LDEAAA,X2          * Add 5 to X2
               LCA  16+X3,0+X2         * Load data 16+X3 into Stack
     * Local Variable (a : 11+X3)
     * Push (11+X3:5)
               MA   LDEAAA,X2          * Add 5 to X2
               LCA  11+X3,0+X2         * Load data 11+X3 into Stack
     * Static Array (CONST_STR_LITERAL-32:char [11])
     * Push (LPIAAA:3)
               MA   LWDAAA,X2          * Add 3 to X2
               LCA  LPIAAA,0+X2        * Load data 21' into Stack
     * Push (X3:3)
               MA   LWDAAA,X2          * Add 3 to X2
               LCA  X3,0+X2            * Load data X3 into Stack
               MCW  X2,X3              * Copy X2 into X3
               B    LPCAAA             * Jump to function printf
     * Pop (X3:3)
               LCA  0+X2,X3            * Load data in Stack into memory at X3
               MA   LZDAAA,X2          * Add -3 to X2
     * Pop (3)
               MA   LZDAAA,X2          * Add -3 to X2
     * Pop (5)
               MA   LFEAAA,X2          * Add -5 to X2
     * Pop (5)
               MA   LFEAAA,X2          * Add -5 to X2
     * Pop (5)
               MA   LFEAAA,X2          * Add -5 to X2
     * Assignment (b = 3)
     * Constant (3 : LAIAAA)
     * Push (LAIAAA:5)
               MA   LDEAAA,X2          * Add 5 to X2
               LCA  LAIAAA,0+X2        * Load data 00003 into Stack
     * Push (LQIAAA:3)
               MA   LWDAAA,X2          * Add 3 to X2
               LCA  LQIAAA,0+X2        * Load data 016 into Stack
               MA   X3,0+X2
     * Pop (X1:3)
               LCA  0+X2,X1            * Load data in Stack into memory at X1
               MA   LZDAAA,X2          * Add -3 to X2
     * Pop (0+X1:5)
               LCA  0+X2,0+X1          * Load data in Stack into memory at 0+X1
               MA   LFEAAA,X2          * Add -5 to X2
     * End Assignment (b = 3)
     * Function Call printf(CONST_STR_LITERAL-33, a, b)
     * Push (5)
               MA   LDEAAA,X2          * Add 5 to X2
     * Local Variable (b : 16+X3)
     * Push (16+X3:5)
               MA   LDEAAA,X2          * Add 5 to X2
               LCA  16+X3,0+X2         * Load data 16+X3 into Stack
     * Local Variable (a : 11+X3)
     * Push (11+X3:5)
               MA   LDEAAA,X2          * Add 5 to X2
               LCA  11+X3,0+X2         * Load data 11+X3 into Stack
     * Static Array (CONST_STR_LITERAL-33:char [11])
     * Push (LRIAAA:3)
               MA   LWDAAA,X2          * Add 3 to X2
               LCA  LRIAAA,0+X2        * Load data 22/ into Stack
     * Push (X3:3)
               MA   LWDAAA,X2          * Add 3 to X2
               LCA  X3,0+X2            * Load data X3 into Stack
               MCW  X2,X3              * Copy X2 into X3
               B    LPCAAA             * Jump to function printf
     * Pop (X3:3)
               LCA  0+X2,X3            * Load data in Stack into memory at X3
               MA   LZDAAA,X2          * Add -3 to X2
     * Pop (3)
               MA   LZDAAA,X2          * Add -3 to X2
     * Pop (5)
               MA   LFEAAA,X2          * Add -5 to X2
     * Pop (5)
               MA   LFEAAA,X2          * Add -5 to X2
     * Pop (5)
               MA   LFEAAA,X2          * Add -5 to X2
     * Function Call func(a, b)
     * Push (5)
               MA   LDEAAA,X2          * Add 5 to X2
     * Local Variable (b : 16+X3)
     * Push (16+X3:5)
               MA   LDEAAA,X2          * Add 5 to X2
               LCA  16+X3,0+X2         * Load data 16+X3 into Stack
     * Local Variable (a : 11+X3)
     * Push (11+X3:5)
               MA   LDEAAA,X2          * Add 5 to X2
               LCA  11+X3,0+X2         * Load data 11+X3 into Stack
     * Push (X3:3)
               MA   LWDAAA,X2          * Add 3 to X2
               LCA  X3,0+X2            * Load data X3 into Stack
               MCW  X2,X3              * Copy X2 into X3
               B    LSDAAA             * Jump to function func
     * Pop (X3:3)
               LCA  0+X2,X3            * Load data in Stack into memory at X3
               MA   LZDAAA,X2          * Add -3 to X2
     * Pop (5)
               MA   LFEAAA,X2          * Add -5 to X2
     * Pop (5)
               MA   LFEAAA,X2          * Add -5 to X2
     * Pop (5)
               MA   LFEAAA,X2          * Add -5 to X2
     * Function Call printf(CONST_STR_LITERAL-34)
     * Push (5)
               MA   LDEAAA,X2          * Add 5 to X2
     * Static Array (CONST_STR_LITERAL-34:char [8])
     * Push (LSIAAA:3)
               MA   LWDAAA,X2          * Add 3 to X2
               LCA  LSIAAA,0+X2        * Load data 23S into Stack
     * Push (X3:3)
               MA   LWDAAA,X2          * Add 3 to X2
               LCA  X3,0+X2            * Load data X3 into Stack
               MCW  X2,X3              * Copy X2 into X3
               B    LPCAAA             * Jump to function printf
     * Pop (X3:3)
               LCA  0+X2,X3            * Load data in Stack into memory at X3
               MA   LZDAAA,X2          * Add -3 to X2
     * Pop (3)
               MA   LZDAAA,X2          * Add -3 to X2
     * Pop (5)
               MA   LFEAAA,X2          * Add -5 to X2
     LVDAAA    NOP                     * Return
               MA   LTIAAA,X2          * Reserve 21 bytes of space on Stack
               MCW  @ @,RF             * Clear the Return Flag
     * EndBlock [Block LVDAAA:null]
     ***************************************

               LCA  3+X3,X1            * Load return address to X1
               B    0+X1               * Jump back to caller

     ********************************************************************************
     * End Function : main
     ********************************************************************************

     ********************************************************************************
     * Function : strcpy
     ********************************************************************************
     LJAAAA    SBR  3+X3               * Save return address in register B to local frame (X3)
               SW   1+X3               * Set the WM
               CW   2+X3               * Clean WM
               CW   3+X3               * Clean WM

     ***************************************
     * BeginBlock [Block LKAAAA:null]
               MA   LWDAAA,X2          * Reserve 3 bytes of space on Stack
     * While [while ((((*(dest++)) = (*(src++))) != '\0')) [] top:LLAAAA bottom:LMAAAA]
     LLAAAA    NOP                     * Top of the loop
     * NotEqual (!=) (((*(dest++)) = (*(src++))) != '\0')
     * Assignment ((*(dest++)) = (*(src++)))
     * DereferenceExpression (*(src++))
     * PostIncrement (src++)
     * Push (LWIAAA:3)
               MA   LWDAAA,X2          * Add 3 to X2
               LCA  LWIAAA,0+X2        * Load data I9D into Stack
               MA   X3,0+X2
     * Pop (X1:3)
               LCA  0+X2,X1            * Load data in Stack into memory at X1
               MA   LZDAAA,X2          * Add -3 to X2
     * Push (0+X1:3)
               MA   LWDAAA,X2          * Add 3 to X2
               LCA  0+X1,0+X2          * Load data 0+X1 into Stack
               MA   LAEAAA,0+X1        * PostIncrement pointer pointed by X1
     * Pop (X1:3)
               LCA  0+X2,X1            * Load data in Stack into memory at X1
               MA   LZDAAA,X2          * Add -3 to X2
     * Push (0+X1:1)
               MA   LAEAAA,X2          * Add 1 to X2
               LCA  0+X1,0+X2          * Load data 0+X1 into Stack
     * End DereferenceExpression (*(src++))
     * PostIncrement (dest++)
     * Push (LZDAAA:3)
               MA   LWDAAA,X2          * Add 3 to X2
               LCA  LZDAAA,0+X2        * Load data I9G into Stack
               MA   X3,0+X2
     * Pop (X1:3)
               LCA  0+X2,X1            * Load data in Stack into memory at X1
               MA   LZDAAA,X2          * Add -3 to X2
     * Push (0+X1:3)
               MA   LWDAAA,X2          * Add 3 to X2
               LCA  0+X1,0+X2          * Load data 0+X1 into Stack
               MA   LAEAAA,0+X1        * PostIncrement pointer pointed by X1
     * Pop (X1:3)
               LCA  0+X2,X1            * Load data in Stack into memory at X1
               MA   LZDAAA,X2          * Add -3 to X2
               LCA  0+X2,0+X1          * Load data in Stack into X1
     * End Assignment ((*(dest++)) = (*(src++)))
     * Constant ('\0' : EOS)
     * Push (EOS:1)
               MA   LAEAAA,X2          * Add 1 to X2
               LCA  EOS,0+X2           * Load data EOS into Stack
               C    0+X2,15999+X2      * Compare
     * Pop (1)
               MA   LBEAAA,X2          * Add -1 to X2
     * Pop (1)
               MA   LBEAAA,X2          * Add -1 to X2
     * Push (LCEAAA:5)
               MA   LDEAAA,X2          * Add 5 to X2
               LCA  LCEAAA,0+X2        * Load data 00001 into Stack
               BE   LUIAAA             * Jump if equal
               B    LVIAAA             * Jump to End
     LUIAAA    MCW  LEEAAA,0+X2        * Equal: Set stack location to 0
     LVIAAA    NOP                     * End of NotEqual
               MCS  0+X2,0+X2          * Clear WM
     * Pop (5)
               MA   LFEAAA,X2          * Add -5 to X2
               BCE  LMAAAA,5+X2,       * Jump to bottom
               B    LLAAAA             * Jump to top
     LMAAAA    NOP                     * Bottom of the while loop

     LKAAAA    NOP                     * Return
               MA   LZDAAA,X2          * Reserve 3 bytes of space on Stack
               MCW  @ @,RF             * Clear the Return Flag
     * EndBlock [Block LKAAAA:null]
     ***************************************

               LCA  3+X3,X1            * Load return address to X1
               B    0+X1               * Jump back to caller

     ********************************************************************************
     * End Function : strcpy
     ********************************************************************************
     ****************************************************************
     ** CLEAN NUMBER SNIPPET                                       **
     ****************************************************************
     
     * Normalizes the zone bits of a number, leaving either A=0B=0
     * for a positive or A=0B=1 for a negative
     LJFAAA    SBR  X1
     * Do nothing on either no zone bits or only a b zone bit
               BWZ  LKFAAA,0+X2,2
               BWZ  LKFAAA,0+X2,K
     * else clear the zone bits, as it is positive
               MZ   @ @,0+X2
     LKFAAA    B    0+X1
     
     ****************************************************************
     ****************************************************************  
     ** DIVISION SNIPPET                                           **
     ****************************************************************  
     
     LSFAAA    SBR  LTFAAA+3           * SETUP RETURN ADDRESS
     * POP DIVIDEND
               MCW  0+X2, LUFAAA
               SBR  X2, 15995+X2

     * POP DIVISOR
               MCW  0+X2, LVFAAA
               SBR  X2, 15995+X2

               B    *+17
               
               DCW  @00000@                
               DC   @00000000000@        

               ZA   LUFAAA, *-7         * PUT DIVIDEND INTO WORKING BL
               D    LVFAAA, *-19        * DIVIDE
               MZ   *-22, *-21          * KILL THE ZONE BIT
               MZ   *-29, *-34          * KILL THE ZONE BIT
               MCW  *-41, LWFAAA        * PICK UP ANSWER
               SW   *-44                * SO I CAN PICKUP REMAINDER
               MCW  *-46, LXFAAA        * GET REMAINDER
               CW   *-55                * CLEAR THE WM
               MZ   LWFAAA-1, LWFAAA    * CLEANUP QUOTIENT BITZONE
               MZ   LXFAAA-1, LXFAAA    * CLEANUP REMAINDER BITZONE
               
     * PUSH REMAINDER
               SBR  X2, 5+X2
               SW   15996+X2
               MCW  LXFAAA, 0+X2
               
     * PUSH QUOTIENT
               SBR  X2, 5+X2
               SW   15996+X2
               MCW  LWFAAA, 0+X2

     LTFAAA    B    000                 * JUMP BACK
               
     LVFAAA    DCW  00000               * DIVISOR
     LUFAAA    DCW  00000               * DIVIDEND
     LWFAAA    DCW  00000               * QUOTIENT
     LXFAAA    DCW  00000               * REMAINDER

     ****************************************************************
 
     ****************************************************************
     ** CAST NUMBER TO POINTER SNIPPET                             **
     ****************************************************************
     
     LAGAAA    SBR  X1
     * Casts a 5-digit number to a 3-digit address
     * make a copy of the top of the stack
               SW   15998+X2
               LCA  0+X2,3+X2
               CW   15998+X2
     * zero out the zone bits of our copy
               MZ   @0@,3+X2
               MZ   @0@,2+X2
               MZ   @0@,1+X2
     * set the low-order digit's zone bits
               C    @04000@,0+X2
               BL   LDGAAA
               C    @08000@,0+X2
               BL   LCGAAA
               C    @12000@,0+X2
               BL   LBGAAA
               S    @12000@,0+X2
               MZ   @A@,3+X2
               B    LDGAAA
     LBGAAA    S    @08000@,0+X2
               MZ   @I@,3+X2
               B    LDGAAA
     LCGAAA    S    @04000@,0+X2
               MZ   @S@,3+X2
     * For some reason the zone bits get set - it still works though.
     LDGAAA    C    @01000@,0+X2
               BL   LGGAAA
               C    @02000@,0+X2
               BL   LFGAAA
               C    @03000@,0+X2
               BL   LEGAAA
               MZ   @A@,1+X2
               B    LGGAAA
     LEGAAA    MZ   @I@,1+X2
               B    LGGAAA
     LFGAAA    MZ   @S@,1+X2
     LGGAAA    LCA  3+X2,15998+X2
               SBR  X2,15998+X2
               B    0+X1
               
     ****************************************************************
     
     ****************************************************************
     ** CAST POINTER TO NUMBER SNIPPET                             **
     ****************************************************************
     
     LLGAAA    SBR  X1
     * Casts a 3-digit address to a 5-digit number
     * Make room on the stack for an int
               MA   @002@,X2
     * make a copy of the top of the stack
               LCA  15998+X2,3+X2
     * Now zero out the top of the stack
               LCA  @00000@,0+X2
     * Now copy back, shifted over 2 digits
               MCW  3+X2,0+X2
     * Now zero out the zone bits on the stack
               MZ   @0@,0+X2
               MZ   @0@,15999+X2
               MZ   @0@,15998+X2
     * check the high-order digit's zone bits
               BWZ  LMGAAA,1+X2,S
               BWZ  LNGAAA,1+X2,K
               BWZ  LOGAAA,1+X2,B
               B    LPGAAA
     LMGAAA    A    @01000@,0+X2
               B    LPGAAA
     LNGAAA    A    @02000@,0+X2
               B    LPGAAA
     LOGAAA    A    @03000@,0+X2
     LPGAAA    BWZ  LQGAAA,3+X2,S
               BWZ  LRGAAA,3+X2,K
               BWZ  LSGAAA,3+X2,B
               B    LTGAAA
     LQGAAA    A    @04000@,0+X2
               B    LTGAAA
     LRGAAA    A    @08000@,0+X2
               B    LTGAAA
     LSGAAA    A    @12000@,0+X2
     LTGAAA    B    0+X1

     ****************************************************************

     LAEAAA    DCW  @001@              * Pointer 0
     LAFAAA    DCW  @012@              * Pointer 0
     LAIAAA    DCW  @00003@            * Value 00003
     LBEAAA    DCW  @I9I@              * Pointer 0
     LBFAAA    DCW  @I9C@              * Pointer 0
     LBHAAA    DCW  @333@              * Pointer 0
     LBIAAA    DCW  @13V@              * Pointer 0
     LCEAAA    DCW  @00001@            * Value 00001
     LCHAAA    DCW  @0000J@            * Value 0000J
     LCIAAA    DCW  @14/@              * Pointer 0
     LDEAAA    DCW  @005@              * Pointer 0
     LDHAAA    DCW  @008@              * Pointer 0
     LDIAAA    DCW  @14X@              * Pointer 0
     LEEAAA    DCW  @00000@            * Value 00000
     LEFAAA    DCW  @P@                * Value P
     LEIAAA    DCW  @15U@              * Pointer 0
     LFEAAA    DCW  @I9E@              * Pointer 0
     LFFAAA    DCW  @010@              * Pointer 0
     LFIAAA    DCW  @16/@              * Pointer 0
     LGEAAA    DCW  @011@              * Pointer 0
     LGFAAA    DCW  @I8I@              * Pointer 0
     LGHAAA    DCW  @100000@           * Value 100000
     LGIAAA    DCW  @16Y@              * Pointer 0
     LHEAAA    DCW  @006@              * Pointer 0
     LHFAAA    DCW  @00V@              * Pointer 0
     LHGAAA    DCW  @I8F@              * Pointer 0
     LHHAAA    DCW  @00042@            * Value 00042
     LHIAAA    DCW  @17V@              * Pointer 0
     LIFAAA    DCW  @014@              * Pointer 0
     LIHAAA    DCW  @00019@            * Value 00019
     LIIAAA    DCW  @18/@              * Pointer 0
     LJHAAA    DCW  @00U@              * Pointer 0
     LJIAAA    DCW  @00222@            * Value 00222
     LKEAAA    DCW  @007@              * Pointer 0
     LKGAAA    DCW  @02U@              * Pointer 0
     LKHAAA    DCW  @00111@            * Value 00111
     LKIAAA    DCW  @06/@              * Pointer 0
     LLHAAA    DCW  @013@              * Pointer 0
     LLIAAA    DCW  @18X@              * Pointer 0
     LMHAAA    DCW  @03/@              * Pointer 0
     LMIAAA    DCW  @19T@              * Pointer 0
     LNEAAA    DCW  @%@                * Value %
     LNFAAA    DCW  @-@                * Value -
     LNHAAA    DCW  @03Y@              * Pointer 0
     LNIAAA    DCW  @19Z@              * Pointer 0
     LOFAAA    DCW  @I9B@              * Pointer 0
     LOHAAA    DCW  @04V@              * Pointer 0
     LOIAAA    DCW  @00002@            * Value 00002
     LPHAAA    DCW  @05/@              * Pointer 0
     LPIAAA    DCW  @21'@              * Pointer 0
     LQHAAA    DCW  @I8G@              * Pointer 0
     LQIAAA    DCW  @016@              * Pointer 0
     LRFAAA    DCW  @0@                * Value 0
     LRHAAA    DCW  @08W@              * Pointer 0
     LRIAAA    DCW  @22/@              * Pointer 0
     LSEAAA    DCW  @C@                * Value C
     LSHAAA    DCW  @021@              * Pointer 0
     LSIAAA    DCW  @23S@              * Pointer 0
     LTHAAA    DCW  @09V@              * Pointer 0
     LTIAAA    DCW  @I7I@              * Pointer 0
     LUHAAA    DCW  @10S@              * Pointer 0
     LVEAAA    DCW  @S@                * Value S
     LVHAAA    DCW  @10Z@              * Pointer 0
     LWDAAA    DCW  @003@              * Pointer 0
     LWGAAA    DCW  @ @                * Value  
     LWHAAA    DCW  @11V@              * Pointer 0
     LWIAAA    DCW  @I9D@              * Pointer 0
     LXGAAA    DCW  @02X@              * Pointer 0
     LXHAAA    DCW  @12/@              * Pointer 0
     LYEAAA    DCW  @D@                * Value D
     LYGAAA    DCW  @201@              * Pointer 0
     LYHAAA    DCW  @12Y@              * Pointer 0
     LZDAAA    DCW  @I9G@              * Pointer 0
     LZEAAA    DCW  @00010@            * Value 00010
     LZHAAA    DCW  @B@                * Value B

               END  START              * End of program code.
